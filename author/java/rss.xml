<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📙 Java 람다의 변수 범위</title>
	  <link>//Java-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%EC%88%98-%EB%B2%94%EC%9C%84</link>
	  <author></author>
	  <pubDate>2021-03-19T19:18:00+09:00</pubDate>
	  <guid>//Java-%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B3%80%EC%88%98-%EB%B2%94%EC%9C%84</guid>
	  <description><![CDATA[
	     <h3 id="람다의-변수-범위">람다의 변수 범위</h3>

<p><img src="https://user-images.githubusercontent.com/43840561/111862130-956d4c80-8996-11eb-9abd-c2bef47886d9.png" alt="image" /></p>

<p>물론 위의 코드는 미션을 위해 일단 구현만을 목적으로 많은 리팩토링이 필요하니 참고 🥲<br />
미션을 진행하다가 for 문 내에 stream을 쓰게 되었는데, i의 값을 람다식 내에서 사용하려니 컴파일 에러가 났다.<br />
“Variable used in lambda expression should be final or effectively final”
즉 람다식에서 사용되는 변수는 final이거나 effectively final이어야 한다.</p>

<p>effectively final은 무엇이며, 람다의 변수 범위를 정확히 짚고 넘어가자.</p>

<h3 id="람다의-변수-범위-1">람다의 변수 범위</h3>

<p>다음과 같은 Lambda 클래스가 있고, 각각의 메서드를 호출해 클래스 필드인 <code class="highlighter-rouge">name</code>이 어떻게 바뀌는지 살펴본다 🔎</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">example1</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">function</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">5</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">function</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">example2</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">function</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">10</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">function</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">example3</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">function</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">15</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">function</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/43840561/111862546-58568980-8999-11eb-8fb0-6ac25fc92285.png" alt="image" /></p>

<p>이에 대한 출력 결과는 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/111862548-5ee50100-8999-11eb-9962-0697067614f8.png" alt="image" /></p>

<p>위 예제에서 람다식에서는 자신을 감싼 메서드나 클래스에 속한 변수에 접근을 할 수 있다.<br />
예제는 람다에 파라미터로 넘겨진 변수가 아닌 외부에서 정의된 변수를 사용하고 있는데 이러한 변수를 <strong>자유 변수</strong>라고 부른다.</p>

<p>그렇다면 다시 맨 처음 오류를 가져와서 … 
<img src="https://user-images.githubusercontent.com/43840561/111862130-956d4c80-8996-11eb-9abd-c2bef47886d9.png" alt="image" /></p>

<p>이 부분에서 왜 자유 변수인 i를 final이나 effectvely final로 선언하라는 것일까 ?</p>

<p>먼저 <strong>지역 변수</strong>는 JVM에서 스택 영역에 저장이 된다. <br />
그리고 실제 메모리와 다르게 JVM에서 이 스택 영역은 스레드 마다 별도의 스택이 생성된다. <br />
따라서 지역 변수는 한 스레드 안에서만 사용이 되며, 스레드끼리 공유하지 못한다.</p>

<p>지역 변수와 다르게 인스턴스 변수는 힙 영역에 생성되어 서로 다른 스레드끼리도 공유할 수 있는 공유 변수이다.</p>

<p><strong>람다</strong>는 각각 별도의 스레드에서 실행이 가능하다.<br />
위 예제에서 각각의 메서드는 i를 증가시키는 것이 아니라 람다를 리턴할 뿐이다.<br />
실행 흐름 상 메서드를 호출한 스레드의 스택에 지역 변수인 i가 생성이 되는데,<br />
람다식을 반환한 후에는 해당 함수가 종료되었으니 메모리에서 i가 사라질 것이다. <br />
그렇지만 반환된 람다식은 다른 스레드에서 호출될 수 있는데, i가 GC에 의해 정리되어 접근할 수 없는 문제가 발생할 수 있다.</p>

<p>때문에 실행 시점에 지역 변수가 사라질 것을 방지하기 위해서 이 자유 변수의 복사본을 만들어서 동작한다. 
이 복사본을 가지고 동작할 예정인데, 이 복사본 값이 바뀌어 버리면 의도하지 않은 결과가 생길 수 있으므로 컴파일 단계에서<br />
final 또는 effectively final로 선언해 변수를 신뢰할 수 있게 만드는 것이다.<br />
이를 <strong>람다 캡처링</strong>이라고 한다.</p>

<p>위 문제에서 컴파일 에러가 뜨는 것은 i가 스코프 밖에 있어 값이 변할 수 있어 신뢰할 수 없다.<br />
때문에 인텔리제이가 권해주는 방법을 쓰면 i를 스코프 안 변수에 새로 할당해서 사용하게 된다.<br />
<img src="https://user-images.githubusercontent.com/43840561/111863899-7de79100-89a1-11eb-8ed3-6c685817269d.png" alt="image" /></p>

<p>여기서 i는 <code class="highlighter-rouge">final</code> 로 선언되지는 않았지만, 자바 8에서 추가된 effectively final로 선언된 것이다.<br />
effectively final은 final로 선언되지 않아도 컴파일러가 해당 변수가 변경되지 않았다고 판단할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/111863962-d61e9300-89a1-11eb-85f8-b7e0a7d5ef7e.png" alt="image" /></p>

<p>만약 effectively final인 i의 값을 바꾸려 한다면 이렇게 컴파일 오류가 발생한다.</p>

<p>파도 파도 끝없는 람다의 세계 🤸‍♀️</p>

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://perfectacle.github.io/2019/06/30/java-8-lambda-capturing/">(Java) 람다 캡처링과 final 제약조건</a></li>
  <li><a href="https://futurecreator.github.io/2018/08/02/java-lambda-variable-scope/">Java Lambda (5) 변수 범위</a></li>
  <li><a href="https://jeong-pro.tistory.com/211">자바 람다에서 final이거나 final처럼 쓰인 지역 변수만 접근할 수 있는 이유</a></li>
</ul>

<hr />

<h3 id="enum-map">Enum Map</h3>


	  ]]></description>
	</item>

	<item>
	  <title>📙 내가 정리한 JUnit5</title>
	  <link>//%EB%82%B4%EA%B0%80-%EC%A0%95%EB%A6%AC%ED%95%9C-JUnit5</link>
	  <author></author>
	  <pubDate>2021-02-04T19:18:00+09:00</pubDate>
	  <guid>//%EB%82%B4%EA%B0%80-%EC%A0%95%EB%A6%AC%ED%95%9C-JUnit5</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>우테코 level1 1주차 - JUnit을 활용한 단위 테스트 이론 및 실습
단위테스트에 대해서 배웠다. 허나 나는 단위 테스트는 처음이라 👀
처음 배운 JUnit5를 익히기 위해 정리해본다.</p>
</blockquote>

<p><em>계속 추가 예정✍️</em></p>
<h2 id="junit이란">JUnit이란</h2>
<ul>
  <li>자바 프로그래밍 언어를 위한 단위 테스트 프레임 워크</li>
  <li>xUnit으로 알려진 단위 테스트 프레임 워크 제품군이다.</li>
  <li>“먼저 테스트 한 다음 코딩”</li>
  <li>“조금 테스트, 약간 코딩, 약간 테스트, 약간 코딩”</li>
</ul>

<h3 id="특징">특징</h3>
<ul>
  <li>테스트를 작성하고 실행하는 데 사용되는 오픈 소스 프레임 워크</li>
  <li>annotation을 제공한다.</li>
  <li>테스트 기대 결과를 위한 assertion을 제공한다.</li>
  <li>test runner를 제공한다.</li>
  <li>퀄리티를 올리며 빠르게 코드를 작성할 수 있게 해준다.</li>
  <li>자동으로 테스트가 실행될 수 있으며 자체의 결과를 확인하고 바로 결과를 제공한다.</li>
  <li>테스트 cases 및 기타 테스트 suites를 포함하는 test suites로 구성된다.</li>
  <li>테스트 성공시 초록, 실패시 빨강</li>
</ul>

<h3 id="단위-테스트-케이스는-왜-써">단위 테스트 케이스는 왜 써?</h3>
<ul>
  <li>메소드가 에상대로 동작하는지 확인한다.</li>
  <li>원하는 결과를 빠르게 확인하기 위해서는 테스트 프레임 워크가 필요하다.</li>
  <li>이 역할을 JUnit이 한다.</li>
  <li>알고 있는 입력과 기대하는 출력으로 작성된다.</li>
  <li>각 요구 사항에 대해 최소 두 개의 단위 테스트 케이스가 필요하다. (양성, 음성)</li>
  <li>요구사항에 하위 요구사항이 있으면 여기에도 두 개의 단위 테스트 케이스가 필요하다.</li>
</ul>

<h2 id="junit5-">JUnit5 👀</h2>
<h3 id="모듈-구성">모듈 구성</h3>
<h4 id="junit-platform">JUnit Platform</h4>
<p>테스트 프레임워크를 실행하는데 기반이 되는 모듈
플랫폼에서 동작하는 테스트 프레임 워크 개발을 위한 TestEngine API를 정의한다.
command line에서 console Launcher와 JUnit4 기반 환경의 플랫폼에서 실행하기 위한
JUnit 4 based Runner 를 제공한다.
각종 IDE 및 빌드 도구에 존재한다.</p>
<h4 id="junit-jupiter">JUnit Jupiter</h4>
<p>테스트를 위한 새로운 프로그래밍 모델 과 확장 모델의 조합이다.
주피터의 하위 프로젝트는 플랫폼에서 주피터 동작을 위한 TestEngine을 제공한다.</p>
<h4 id="junit-vintage">JUnit Vintage</h4>
<p>하위 버전을 실행할 수 있는 TestEngine을 제공한다.</p>

<h3 id="installation">Installation</h3>
<p>maven이나 gradle 프로젝트에서 
Jupiter Engine Dependency and Platform Runner Dependency 
즉 최소 2개의 dependency가 필요하다.</p>
<h4 id="maven">maven</h4>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;properties&gt;</span>
    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
    <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
    <span class="nt">&lt;maven.compiler.target&gt;</span>${maven.compiler.source}<span class="nt">&lt;/maven.compiler.target&gt;</span>
    <span class="nt">&lt;junit.jupiter.version&gt;</span>5.5.2<span class="nt">&lt;/junit.jupiter.version&gt;</span>
    <span class="nt">&lt;junit.platform.version&gt;</span>1.5.2<span class="nt">&lt;/junit.platform.version&gt;</span>
<span class="nt">&lt;/properties&gt;</span>
<span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.junit.jupiter<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>junit-jupiter-engine<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>${junit.jupiter.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.junit.platform<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>junit-platform-runner<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>${junit.platform.version}<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>
<h4 id="gradle">gradle</h4>
<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testRuntime</span><span class="o">(</span><span class="s2">"org.junit.jupiter:junit-jupiter-engine:5.5.2"</span><span class="o">)</span>
<span class="n">testRuntime</span><span class="o">(</span><span class="s2">"org.junit.platform:junit-platform-runner:1.5.2"</span><span class="o">)</span>

</code></pre></div></div>
<h3 id="java-versions">Java Versions</h3>
<p>Java8 이상이어야 한다.</p>

<h2 id="tests-작성하기">Tests 작성하기</h2>
<p><em>이 부분은 강의 시간에 다뤘던 코드로!</em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SetTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">checkSizeOfSet</span><span class="o">(){</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<h4 id="test-class">Test Class</h4>
<p>최소 하나의 테스트 메소드를 포함하는 최상위 클래스
<code class="highlighter-rouge">single constructor</code> 여야 한다.</p>

<h4 id="test-method">Test Method</h4>
<p><code class="highlighter-rouge">@Test</code>, <code class="highlighter-rouge">@ParameterizedTest</code> 등의 어노테이션을 통해 테스트 메소드임을 나타낸다.</p>
<ul>
  <li><code class="highlighter-rouge">assertJ</code>를 통해 테스트 코드의 가독성을 높이며 에러 메세지를 쉽게 확인할 수 있다.</li>
</ul>

<h2 id="공부한-annotation-몇-개">공부한 Annotation 몇 개</h2>

<h3 id="test">@Test</h3>
<p>메서드가 테스트 메서드임을 나타낸다.</p>

<h3 id="parameterizedtest">@ParameterizedTest</h3>
<p>메서드가 매개변수가 있는 테스트임을 나타낸다.</p>

<p>파라미터를 전달하는 방법은 아래의 어노테이션과 더불어 Source로 넘겨준다.</p>

<h4 id="valuesource">@ValueSource</h4>
<p>단일 리터럴 값 배열을 테스트 메서드에 전달할 수 있으며,
매번 테스트 메서드에 하나의 인수 만 전달할 수 있다.
<code class="highlighter-rouge">short</code>, <code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">int</code>, <code class="highlighter-rouge">long</code>, <code class="highlighter-rouge">float</code>, <code class="highlighter-rouge">double</code>, <code class="highlighter-rouge">char</code>, <code class="highlighter-rouge">boolean</code>, <code class="highlighter-rouge">java.lang.String</code>, <code class="highlighter-rouge">java.lang.Class</code> 리터럴 값을 지원한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">contains1</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">i</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="csvsource">@CsvSource</h4>
<p>여러 파라미터를 전달하고자 할 때 사용한다.
주로 입력 값과 기대 값을 함께 전달하며 테스트할 때 사용한다.
<code class="highlighter-rouge">,</code>로 값을 구분하지만 delimiter 속성을 사용해 사용자 정의를 할 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@CsvSource</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"1:true"</span><span class="o">,</span> <span class="s">"5:false"</span><span class="o">},</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="sc">':'</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">contains3</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">expected</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">assertThat</span><span class="o">(</span><span class="n">expected</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="nullsource">@NullSource</h4>
<p>단일 null 값을 전달할 수 있다.</p>

<p>하지만 기본 데이터 타입은 null 값을 허용할 수 없어 @NullSource를 사용할 수 없다.</p>

<h4 id="emptysource">@EmptySource</h4>
<p>메서드에 하나의 빈 값을 인수에 전달한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@EmptySource</span>
<span class="kt">void</span> <span class="nf">isBlank_ShouldReturnTrueForEmptyStrings</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="n">Strings</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">input</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="nullandemptysource">@NullAndEmptySource</h4>
<p><code class="highlighter-rouge">null</code>과 <code class="highlighter-rouge">empty</code> 값 모두를 전달하기 위해 사용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@NullAndEmptySource</span>
<span class="kt">void</span> <span class="nf">isBlank_ShouldReturnTrueForNullAndEmptyStrings</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="n">Strings</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">input</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>➕ <code class="highlighter-rouge">null</code>과 <code class="highlighter-rouge">empty</code> 값, 변형된 빈 문자열을 전달하기 위해 <code class="highlighter-rouge">@ValueSource</code>, <code class="highlighter-rouge">@NullSource</code>, <code class="highlighter-rouge">@EmptySource</code>를 함께 결합해 사용할 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@NullAndEmptySource</span>
<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">strings</span> <span class="o">=</span> <span class="o">{</span><span class="s">"  "</span><span class="o">,</span> <span class="s">"\t"</span><span class="o">,</span> <span class="s">"\n"</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">isBlank_ShouldReturnTrueForAllTypesOfBlankStrings</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="n">Strings</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">input</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="enumsource">@EnumSource</h4>
<p>열거형 갑의 배열을 메서드에 전달한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@EnumSource</span><span class="o">(</span><span class="n">Month</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 12 months를 전달</span>
<span class="kt">void</span> <span class="nf">getValueForAMonth_IsAlwaysBetweenOneAndTwelve</span><span class="o">(</span><span class="n">Month</span> <span class="n">month</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">monthNumber</span> <span class="o">=</span> <span class="n">month</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="n">monthNumber</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">monthNumber</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위 예시에서 <code class="highlighter-rouge">names</code> 속성을 사용하여 몇 개의 달만 전달할 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
<span class="nd">@EnumSource</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">Month</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"APRIL"</span><span class="o">,</span> <span class="s">"JUNE"</span><span class="o">,</span> <span class="s">"SEPTEMBER"</span><span class="o">,</span> <span class="s">"NOVEMBER"</span><span class="o">})</span>
<span class="kt">void</span> <span class="nf">someMonths_Are30DaysLong</span><span class="o">(</span><span class="n">Month</span> <span class="n">month</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isALeapYear</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">month</span><span class="o">.</span><span class="na">length</span><span class="o">(</span><span class="n">isALeapYear</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">@ValueSource</code> 와 비슷하게 테스트 실행 당 하나의 매개변수만 전달할 수 있다.</p>

<h3 id="beforeeach--aftereach">@BeforeEach / @AfterEach</h3>
<p>메서드가 현재 테스트 클래스의 각각의 메서드보다 먼저 / 각각의 메서드의 이후에 실행한다.</p>
<ul>
  <li>리턴 타입 : <code class="highlighter-rouge">void</code></li>
  <li><code class="highlighter-rouge">private</code> 불가능</li>
  <li><code class="highlighter-rouge">static</code> 불가능
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@BeforeEach</span>
<span class="kt">void</span> <span class="nf">setUp</span><span class="o">(){</span>
  <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
  <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
  <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
  <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
  <span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="beforeall--afterall">@BeforeAll / @AfterAll</h3>
<p>메서드가 현재 테스트 클래스의 모든 메서드보다 먼저 / 모든 메서드의 이후에 실행한다.</p>

<h3 id="displayname">@DisplayName</h3>
<p>클래스 또는 메서드에 대한 사용자 지정 표시 이름을 선언하는데 사용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Set의 사이즈 확인 테스트"</span><span class="o">)</span>
<span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">checkSizeOfSet</span><span class="o">(){</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="disabled">@Disabled</h3>
<p>클래스 또는 메서드를 비활성화 하는데 사용한다.</p>

<h2 id="참고-자료">참고 자료</h2>
<ul>
  <li><a href="https://junit.org/junit5/docs/current/user-guide/#launcher-api">JUnit 5 User Guide</a></li>
  <li><a href="https://www.baeldung.com/parameterized-tests-junit-5#4-csv-literals">Guide to JUnit 5 Parameterized Tests</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
