<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📋 Spring MVC - 4. MVC 프레임워크 만들기</title>
	  <link>//spring-mvc-4</link>
	  <author></author>
	  <pubDate>2021-05-04T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-4</guid>
	  <description><![CDATA[
	     <h2 id="mvc-프레임워크-만들기">MVC 프레임워크 만들기</h2>

<h2 id="프론트-컨트롤러-패턴">프론트 컨트롤러 패턴</h2>

<p>프론트 컨트롤러도 서블릿이다.<br />
요청을 모두 받고 요청에 맞는 컨트롤러를 호출한다.</p>

<h3 id="특징">특징</h3>

<p>프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받고, 요청에 맞는 컨트롤러를 찾아서 호출한다.<br />
입구를 하나로 묶는다.<br />
프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.</p>

<h3 id="스프링-웹-mvc와-프론트-컨트롤러">스프링 웹 MVC와 프론트 컨트롤러</h3>

<p>스프링 웹 MVC의 핵심도 바로 FrontController이다. (DispatcherServlet이 프론트 컨트롤러 패턴으로 되어있다.)</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2493682-0c37-4a1c-93c4-f2ffd02e7862/image.png" style="zoom: 67%;" /></p>

<p>ControllerV1을 인터페이스로 만들고 이를 구현한 Controller들을 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV1</span> <span class="kd">implements</span> <span class="n">ControllerV1</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="frontcontrollerservletv1">FrontControllerServletV1</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV1"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v1/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV1</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV1</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV1</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Controller 정보를 가진 서블릿인 FrontContoller를 구현한다.</p>

<ul>
  <li><strong>urlPatterns</strong> :  “/front-controller/v1/”를 포함한 하위 모든 요청을 하나의 서블릿에서 받아들인다.</li>
  <li><strong>controllerMap</strong> : key-매핑 URL, value-호출될 컨트롤러</li>
  <li><strong>service()</strong> : reqeustURI를 조회하여 실제 호출할 컨트롤러를 찾고 해당 컨트롤러를 실행(<code class="highlighter-rouge">process()</code>)한다.</li>
</ul>

<p>여러 Controller와 서블릿이 하나의 JSP를 재사용하고 있다.</p>

<hr />

<h2 id="view-분리">View 분리</h2>

<p>Controller에서 View로 이동하는 부분이 중복된다.<br />
Controller는 MyView만 반환해주면 된다.</p>

<h4 id="controllerv2">ControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV2</span> <span class="o">{</span>
    <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스를 구현하므로 반환 타입을 맞출 수 있다.</li>
</ul>

<h4 id="myview">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewPath</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewPath</span> <span class="o">=</span> <span class="n">viewPath</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="memberformcontrollerv2">MemberFormControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV2</span> <span class="kd">implements</span> <span class="n">ControllerV2</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>viewPath를 가지고 있는 MyView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv2">FrontControllerServletV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV2"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV2</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV2</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV2</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="model-추가">Model 추가</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9a6ede47-f242-4b1f-a88e-08f055df0508/image.png" style="zoom:67%;" /></p>

<h3 id="서블릿-종속성-추가">서블릿 종속성 추가</h3>

<p>컨트롤러 입장에서 <code class="highlighter-rouge">HttpServletRequest</code>, <code class="highlighter-rouge">HttpServletResponse</code>가 필요하지 않다.<br />
요청 파라미터를 Map으로 넘기면 컨트롤러가 서블릿이 아니어도 동작할 수 있다.</p>

<h3 id="뷰-이름-중복-제거">뷰 이름 중복 제거</h3>

<p>현재 컨트롤러에서 지정하는 뷰 이름에는 중복(<code class="highlighter-rouge">/WEB-INF/views/</code>)이 존재한다.<br />
컨트롤러는 뷰의 논리 이름을 반환하고, 물리 이름은 프론트 컨트롤러에서 처리하도록 변경해보자.<br />
논리적 물리적 이름을 구분하면 나중에 변경할 때 컨트롤러를 변경할 일이 없다.</p>

<h3 id="modelview">ModelView</h3>

<p>Model을 전달하기 위해서 <code class="highlighter-rouge">request.setAttribute()</code> 를 사용하여 데이터를 저장하고 뷰에 전달했다.<br />
서블릿의 종속성을 제거하기 위해, Model을 따로 만들고 View 이름까지 전달하는 객체를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">ModelView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewName</span> <span class="o">=</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controllerv3">ControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV3</span> <span class="o">{</span>
    <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>ModelView를 반환하도록 한다.</li>
</ul>

<h4 id="membersavecontrollerv3">MemberSaveControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV3</span> <span class="kd">implements</span> <span class="n">ControllerV3</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="s">"save-result"</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>논리 이름을 ModelView 객체에 넣어 생성하도록 한다.</li>
  <li>모델에 뷰에 필요한 객체를 담고 ModelView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv3-일부">FrontControllerServletV3 일부</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">createParamMap()</code> : HttpServletRequest의 파라미터 정보를 Map으로 변경한다.</li>
  <li><code class="highlighter-rouge">viewResolver()</code> : 컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.</li>
  <li><code class="highlighter-rouge">view.render(mv.getModel(), req, resp)</code> : 뷰 객체를 통해  HTML 화면을 렌더링한다.</li>
</ul>

<h4 id="myview-1">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">modelToRequestAttribute</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
    <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
    <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="단순하고-실용적인-컨트롤러">단순하고 실용적인 컨트롤러</h2>

<p>컨트롤러 인터페이스를 구현하면서 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 번거롭다.<br />
컨트롤러는 View의 이름만 변경하도록, 실용성 있도록 변경한다.</p>

<h4 id="controllerv4">ControllerV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV4</span> <span class="o">{</span>
    <span class="cm">/**
     *
     * @param paramMap
     * @param model
     * @return viewName
     */</span>

    <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>view 이름을 반환하도록 변경한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV4</span> <span class="kd">implements</span> <span class="n">ControllerV4</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"save-result"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Controller에서는 필요한 값을 꺼내고, 비즈니스 로직을 호출한 후 viewName만을 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv4">FrontControllerServletV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV4"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV4</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV4</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV4</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
      	<span class="c1">// model </span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>프론트 컨트롤러에서 model을 만들고 각 Controller에 paramMap과 model을 넘겨 처리를 하고, viewName을 반환받는다.</li>
  <li>modelView에서 model을 꺼낼 필요가 없다.</li>
</ul>

<p>하지만, 지금 ControllerV4 인터페이스로 받을 수 있는 컨트롤러를 제한하고 있다.</p>

<hr />

<h2 id="유연한-controller---어댑터-패턴">유연한 Controller - 어댑터 패턴</h2>

<p>지금까지의 프론트 컨트롤러는 한가지 인터페이스만 사용이 가능했었다. <br />
어떠한 컨트롤러도 호환이 가능하도록 어댑터 패턴을 사용한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0f169df9-469c-4e38-b61c-2cf42f872444/image.png" alt="" /></p>

<ul>
  <li>핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었다. 이 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.</li>
  <li>기존에는 프론트 컨트롤러가 바로 컨트롤러를 호출하였지만, 이제는 어댑터를 통해서 호출한다.</li>
  <li>핸들러 : 컨트롤러의 좀 더 넓은 범위. 어댑터가 있기 때문에 컨트롤러 개념 뿐만 아니라 해당하는 어댑터만 있으면 처리가 가능하다.</li>
</ul>

<h4 id="myhandleradapter">MyHandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">);</span>
    <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">supports(Object handler)</code> : 어댑터가 해당 컨트롤러를 처리할 수 있는지 반환</li>
  <li><code class="highlighter-rouge">handle(...)</code> : 어댑터는 실제 컨트롤러를 호출하고 결과로 ModelView를 반환한다.</li>
  <li>만약 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 직접 생성한다.</li>
  <li>프론트 컨트롤러가 아닌 어댑터가 실제 컨트롤러를 호출한다.</li>
</ul>

<h4 id="controllerv3handleradapter">ControllerV3HandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV3HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV3</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>supports()로 ControllerV3 타입인지 확인하고 맞다면 호출한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV5"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v5/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV5</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">handlerMappingMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MyHandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV5</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">initHandlerMappingMap</span><span class="o">();</span>
        <span class="n">initHandlerAdapters</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerMappingMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV3</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerAdapters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ControllerV3HandlerAdapter</span><span class="o">());</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// 요청 정보로 핸들러를 가져온다.</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 어댑터를 찾는다.</span>
        <span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyHandlerAdapter</span> <span class="nf">getHandlerAdapter</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">:</span> <span class="n">handlerAdapters</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">adapter</span><span class="o">.</span><span class="na">supports</span><span class="o">(</span><span class="n">handler</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">adapter</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"handler adapter를 찾을 수 없습니다. handler "</span> <span class="o">+</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 : 핸들러 매핑과 어댑터를 초기화한다.</li>
  <li>매핑 정보인 handlerMappingMap 이 Object Map으로 아무 타입이나 받을 수 있다.</li>
  <li>핸들러 매핑</li>
  <li>핸들러를 처리할 수 있는 어댑터 조회</li>
  <li>어댑터 호출</li>
</ul>

<h4 id="controllerv4handleradapter-예제">ControllerV4HandlerAdapter 예제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV4HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV4</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
      
        <span class="c1">//  viewName만 반환할 경우 ModelView 객체로 만들어주는 역할도 한다.</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>어댑터가 호출하는 ControllerV4는 viewName만 반환하는데, 이때 어댑터에서 이를 ModelView 객체로 만들어 반환한다.</li>
</ul>

<p>프론트 컨트롤러 입장에서는 핸들러 어댑터에만 의존하고 있다.</p>

<p>이 MVC 프레임 워크는 역할과 구현이 분리되어 있다.  <br />
모든 것을 인터페이스로 만들고 구현하고 싶은 부분만 주입하면 완벽! (스프링 MVC는 뷰와 뷰리졸버 다 인터페이스로 구현되어있다.)
어떤 핸들러를 추가하고 싶어도 우리는 핸들러어댑터만 구현해주면 된다!</p>

<h4 id="ex-requestmapping">ex) @RequestMapping()</h4>

<p>RequestMappingHandlerAdapter : 위 어노테이션이 붙은 핸들러를 처리해주는 어댑터</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-5</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-5</guid>
	  <description><![CDATA[
	     <h2 id="스프링-mvc-전체-구조">스프링 MVC 전체 구조</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/6b0d1860-915b-4819-9d2f-9521353e2142/image.png" style="zoom:80%;" /></p>

<h4 id="지금껏-만들었던-프레임-워크---스프링-mvc">지금껏 만들었던 프레임 워크 &lt;-&gt; 스프링 MVC</h4>

<ul>
  <li>FrontController - DispatcherServlet</li>
  <li>HandlerMappingMap - HandlerMapping</li>
  <li>MyHandlerAdapter - HandlerAdapter</li>
  <li>ModelView - ModelAndView</li>
  <li>ViewResolver - ViewResolver</li>
  <li>MyView - View</li>
</ul>

<h3 id="dispatcherservlet">DispatcherServlet</h3>

<p>DispacherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/630a4870-d2a9-4dec-a4c3-ccfe49db023a/image.png" style="zoom:67%;" /></p>

<p>스프링 부트는 DispatcherServlet를 자동으로 등록하면서 모든 경로에 대해서 매핑한다.</p>

<h4 id="요청의-흐름">요청의 흐름</h4>

<p>DispatcherServlet이 호출되면 <code class="highlighter-rouge">service()</code> 가 호출된다.<br />
최종적으로는 DispatcherServlet.doDispatch()` 가 호출된다.</p>

<h4 id="dodispatch">doDispatch()</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/cbfe84c7-a2f8-4bf1-a082-42c141b2e287/image.png" style="zoom:67%;" /></p>

<p>DispatcherServlet의 doDispatch()의 주요 부분들을 살펴보자!</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e644c4e-cd85-405a-a1ea-f063768df8a1/image.png" alt="" /></p>

<ul>
  <li>ModelAndView</li>
  <li>getHandler() : 핸들러를 가져온다.
    <ul>
      <li>핸들러가 없으면 404로 셋팅을 한다.</li>
    </ul>
  </li>
  <li>getHandlerAdapter() : 핸들러 어댑터를 가져온다.</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/536712af-32f3-41fc-af6f-5d885365747d/image.png" style="zoom:67%;" /></p>

<ul>
  <li>핸들러 어댑터로 핸들러 호출하고 ModelAndView 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/eef62fa6-513d-4ed3-b7a3-18ad10ae0074/image.png" style="zoom:67%;" /></p>

<ul>
  <li>view 렌더링 호출</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5a04d84a-5b0c-456c-baa1-ddf4401c2f36/image.png" alt="" /></p>

<ul>
  <li>ViewResolver를 통해서 view를 찾아 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/56d8ddca-3457-4b3a-a7b8-c462504d98d8/image.png" alt="" /></p>

<ul>
  <li>View 렌더링</li>
</ul>

<h3 id="스프링-mvc-구조">스프링 MVC 구조</h3>

<ol>
  <li>핸들러 조회 : 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러 조회</li>
  <li>핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터 조회</li>
  <li>핸들러 어댑터 실행 : 핸들러 어댑터 실행</li>
  <li>핸들러 실행 : 핸들러 어댑터가 실제 핸들러 실행</li>
  <li>ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환</li>
  <li>viewResolver 호출 : JSP의 경우 <code class="highlighter-rouge">InternalResourceViewResolver</code> 가 자동으로 등록되고 사용됨</li>
  <li>view 반환 : 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고 렌더링 역할을 담당하는 뷰 객체 반환
    <ul>
      <li>JSP의 경우 InternalResourceViewResolver(JstlView) 를 반환하고 내부에 forward() 로직이 있다.</li>
    </ul>
  </li>
  <li>뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.</li>
</ol>

<p>가장 큰 장점은 DispatcherServlet  코드의 변경 없이 원하는 기능을 변경하거나 확장할 수 있다.<br />
대부분 확장 가능하도록 인터페이스로 제공한다.</p>

<p>하지만 사실 우리가 확장할 컨트롤러는 거의 없다.</p>

<hr />

<h2 id="핸들러-매핑과-핸들러-어댑터">핸들러 매핑과 핸들러 어댑터</h2>

<h3 id="과거-controller-인터페이스">과거 Controller 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Controller</span> <span class="o">{</span>
    <span class="n">ModelAndView</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Component</code> :  ““/springmvc/old-controller: 라는 이름의 스프링 빈으로 등록</li>
  <li>빈의 이름으로<strong>URL</strong>을 매핑</li>
</ul>

<h4 id="위-컨트롤러가-호출되는-방식">위 컨트롤러가 호출되는 방식</h4>

<ul>
  <li><strong>HandlerMapping</strong>(핸들러 매핑)
    <ul>
      <li>핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 함
 ex) <strong>스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑</strong> 필요</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>(핸들러 어댑터)
    <ul>
      <li>핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요
 ex) Controller 인터페이스를 실행할 수 있는 핸들러 어댑터를 찾고 실행해야 함</li>
    </ul>
  </li>
  <li>스프링은 이미 필요한 핸들러 매핑과 핸들러 어댑터를 대부분 구현해두었다.</li>
</ul>

<h4 id="스프링-부트가-자동으로-등록하는-핸들러-매핑과-핸들러-어댑터">스프링 부트가 자동으로 등록하는 핸들러 매핑과 핸들러 어댑터</h4>

<ul>
  <li><strong>HandlerMapping</strong>
    <ul>
      <li>RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 핸들러를 찾는다. 
(위 예제의 @Component)</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>
    <ul>
      <li>RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>HttpRequestHandlerAdapter : HttpRequestHandler 처리</li>
      <li>SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용) 처리</li>
    </ul>
  </li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로핸들러를찾아주는 BeanNameUrlHandlerMapping가 실행에 성공하고 핸들러인 OldController 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다. SimpleControllerHandlerAdapter 가 Controller 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 SimpleControllerHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>SimpleControllerHandlerAdapter 는 핸들러인 OldController 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<h3 id="httprequesthandler"><strong>HttpRequestHandler</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HttpRequestHandler</span> <span class="o">{</span>
         <span class="kt">void</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><strong>서블릿과 가장 유사한 형태</strong>의 핸들러</li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회-1"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로 핸들러를찾아주는 BeanNameUrlHandlerMapping 가 실행에 성공하고 핸들러인 MyHttpRequestHandler 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회-1"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다.
HttpRequestHandlerAdapter 가 HttpRequestHandler 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행-1"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 HttpRequestHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>HttpRequestHandlerAdapter 는 핸들러인 MyHttpRequestHandler 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<hr />

<h2 id="뷰-리졸버">뷰 리졸버</h2>

<h4 id="application-properties">application-properties</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
</code></pre></div></div>

<p>스프링 부트는 <code class="highlighter-rouge">InternalResourceViewResolver</code> 라는 뷰 리졸버를 자동으로 등록한다.<br />
이때 <code class="highlighter-rouge">application.properties</code> 에 등록한 <code class="highlighter-rouge">spring.mvc.view.prefix</code> , <code class="highlighter-rouge">spring.mvc.view.suffix</code> 설정 정보를 사용해서 등록한다.</p>

<h4 id="스프링-부트가-자동으로-등록하는-뷰-리졸버">스프링 부트가 자동으로 등록하는 뷰 리졸버</h4>

<ul>
  <li>BeanNameViewResolver : 빈 이름으로 뷰를 찾아서 반환</li>
  <li>InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환</li>
</ul>

<p><strong>1.</strong> <strong>핸들러 어댑터 호출</strong><br />
핸들러 어댑터를 통해 논리 뷰 이름을 획득</p>

<p><strong>2. ViewResolver 호출</strong></p>

<p>new-form 이라는 뷰 이름으로 viewResolver를 순서대로 호출
InternalResourceViewResolver 가 호출됨</p>

<h5 id="3-internalresourceviewresolver"><strong>3. InternalResourceViewResolver</strong></h5>

<p>내부에서 자원을 찾을 수 있음을 의미한다.<br />
이 뷰 리졸버는 InternalResourceView 를 반환</p>

<h5 id="4-뷰---internalresourceview">4. <strong>뷰</strong> <strong>- InternalResourceView</strong></h5>

<p>InternalResourceView 는 JSP처럼 포워드 forward() 를 호출해서 처리할 수 있는 경우에 사용</p>

<h5 id="5-viewrender">5. view.render()</h5>

<p>view.render() 가 호출되고 InternalResourceView 는 forward() 를 사용해서 JSP를 실행한다</p>

<p>Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver 를 등록해야 한다. <br />
최근에는 라이브러리만 추가하면 스프링 부트가 이런 작업도 모두 자동화해준다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-3</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-3</guid>
	  <description><![CDATA[
	     <h2 id="서블릿-jsp-mvc-패턴">서블릿, JSP, MVC 패턴</h2>

<p>서블릿으로 만들어보고, JSP로 만들어보고 마지막으로 MVC로 만들어 볼 것이다!</p>

<h3 id="서블릿으로-만들었을-때-일부-예제">서블릿으로 만들었을 때 일부 예제</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"memberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">PrintWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;meta charset=\"UTF-8\"&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;title&gt;Title&lt;/title&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;a href=\"/index.html\"&gt;메인&lt;/a&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;id&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;username&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;age&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tbody&gt;"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Member</span> <span class="n">member</span> <span class="o">:</span> <span class="n">members</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tr&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tr&gt;"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tbody&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>복잡하지만… 동적으로 원하는 HTML을 만들 수 있다.</li>
  <li>각 요청마다 Servlet을 만들어야 한다.</li>
  <li>응답할 HTML을 자바 코드 내에 작성해야한다.</li>
</ul>

<hr />

<h2 id="jsp">JSP</h2>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<h5 id="import문-작성">import문 작성</h5>

<pre><code class="language-jsp">&lt;%@ page import="hello.servlet.domain.member.MemberRepository" %&gt;
&lt;%@ page import="hello.servlet.domain.member.Member" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<pre><code class="language-jsp">&lt;%
    // request, response 사용 가능
    MemberRepository memberRepository = MemberRepository.getInstance();
    System.out.println("save.jsp");
    String username = request.getParameter("username");
    int age = Integer.parseInt(request.getParameter("age"));
    Member member = new Member(username, age);
    System.out.println("member = " + member);
    memberRepository.save(member);

%&gt;
</code></pre>

<p><code class="highlighter-rouge">&lt;% %&gt;</code> 안에 자바코드를 작성할 수 있다.</p>

<ul>
  <li>비즈니스 로직과 뷰가 연결되어 있다.</li>
  <li>요구사항이 변경되면 뷰를 수정하다가 비즈니스 로직도 같이 수정될 수 있다.</li>
  <li>유지보수성이 떨어진다.</li>
</ul>

<hr />

<h2 id="mvc">MVC</h2>

<h3 id="servlet-jsp의-문제점">Servlet, JSP의 문제점</h3>

<h4 id="너무-많은-역할">너무 많은 역할</h4>

<p>하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하고, 또한 유지보수가 어려워진다.</p>

<h4 id="변경의-라이프-사이클">변경의 라이프 사이클</h4>

<p>비즈니스 로직과 뷰의 변경의 라이프 사이클이 다르다.<br />
예를 들어서 UI 를 일부 수정하는 일과 비즈니스 로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분 서로에게 영향을 주지 않는다. <br />
이렇게 변경의 라이프 사이클이 다른 부분을 하나의 코드로 관리하는 것은 유지보수하기 좋지 않다.<br />
레이어를 분리하는 기준은 변경 주기가 다를 때라고 생각하면 편하다.</p>

<h4 id="기능-특화">기능 특화</h4>

<p>뷰 템플릿은 화면을 렌더링 하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.</p>

<h3 id="model-view-controller">Model View Controller</h3>

<p>MVC 패턴은 서블릿이나, JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다.<br />
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.</p>

<h4 id="controller">Controller</h4>

<p>HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.<br />
중앙에서 조종하는 역할. (비즈니스 로직을 담을 수 있지만, 역할이 너무 많아지기 때문에 비즈니스 로직을 호출한다고 하자.)</p>

<h4 id="model">Model</h4>

<p>뷰에 출력할 데이터를 담아둔다.<br />
뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.</p>

<h4 id="view">View</h4>

<p>모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.</p>

<h3 id="mvc-적용하기">MVC 적용하기</h3>

<ul>
  <li>서블릿을 컨트롤러로 사용</li>
  <li>JSP를 뷰로 사용</li>
  <li>HttpServletRequest 객체를 모델로 사용 (<code class="highlighter-rouge">request.setAttribute()</code> , <code class="highlighter-rouge">request.getAttribute() </code>사용)</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1fa7cead-0d71-4afc-a391-a7b7932c9541/image.png" style="zoom:67%;" /></p>

<h4 id="mvcmemberformservlet">MvcMemberFormServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberFormServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/new-form"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberFormServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">dispatcher.forward()</code> : 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.<br />
클라이언트에게 갔다가 오는게 아닌(리다이렉트가 아닌), 서버 내부에서 호출한 것이다.</li>
  <li><code class="highlighter-rouge">/WEB-INF</code> :  이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없어 컨트롤러를 통해서만 접근이 가능하도록 한다.</li>
</ul>

<h4 id="redirect-vs-forward">redirect vs forward</h4>

<ul>
  <li>redirect : 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다.<br />
클라이언트가 인지할 수 있고, URL 경로도 실제로 변경된다.</li>
  <li>forward : 서버 내부에서 일어나는 호출이기 때문에 클라이언트가 인지하지 못한다.</li>
</ul>

<h4 id="mvcmembersaveservlet">MvcMemberSaveServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberSaveServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/save"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberSaveServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="c1">// 비즈니스 로직</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// Model에 데이터를 보관한다. - req 객체에 Map이 있는데 여기에 저장한다.</span>
        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/save-result.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="save-resultjsp">save-result.jsp</h4>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt; 성공
&lt;ul&gt;
    &lt;li&gt;id=${member.id}&lt;/li&gt;
    &lt;li&gt;username=${member.username}&lt;/li&gt;
    &lt;li&gt;age=${member.age}&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="/index.html"&gt;메인&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">${}</code> : jsp가 제공하는 프로퍼티 접근법으로, req에 담겨있는 attribute에 있는 데이터를 가져올 수 있다.</li>
</ul>

<h4 id="mvcmemberlistservlet">MvcMemberListServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/members.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membersjsp-일부">members.jsp 일부</h4>

<pre><code class="language-jsp">&lt;c:forEach var="item" items="${members}"&gt;
    &lt;tr&gt;
        &lt;td&gt;${item.id}&lt;/td&gt;
        &lt;td&gt;${item.username}&lt;/td&gt;
        &lt;td&gt;${item.age}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">&lt;c:forEach&gt;</code> : <code class="highlighter-rouge">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code> 를 선언해야한다.</li>
</ul>

<h3 id="mvc-패턴의-한계">MVC 패턴의 한계</h3>

<h3 id="forward의-중복">forward의 중복</h3>

<p>메서드를 추출해도 되지만, 메서드 호출마저 중복으로 일어난다.</p>

<h4 id="viewpath에-중복">ViewPath에 중복</h4>

<p>prefix인 <code class="highlighter-rouge">/WEB-INF/views/</code> 와 suffix인 <code class="highlighter-rouge">.jsp</code> 가 중복으로 발생한다.<br />
만약 jsp가 아닌 thymeleaf 같은 다른 뷰로 변경한다면 전체 코드를 다 변경해야 한다.</p>

<h4 id="사용하지-않는-코드">사용하지 않는 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span>
</code></pre></div></div>

<p>위 객체는 사용할 수도 있고, 안할수도 있다.</p>

<h4 id="공통-처리가-어렵다">공통 처리가 어렵다.</h4>

<p>컨트롤러에서 공통으로 처리해야 하는 부분이 점점 증가하는 경우를 생각해보자.<br />
단순히 공통 기능을 메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 된다. <br />
또한 호출하는 것 자체도 중복이다.</p>

<h4 id="프론트-컨트롤러front-controller-패턴을-도입하면-이런-문제를-깔끔하게-해결할-수-있다">프론트 컨트롤러(Front Controller) <strong>패턴</strong>을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.</h4>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 2. 서블릿</title>
	  <link>//spring-mvc-2</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-2</guid>
	  <description><![CDATA[
	     <h2 id="예제">예제</h2>

<p>스프링을 사용하지는 않지만 스프링 부트 프로젝트를 만든다. <br />
서블릿은 톰캣 같은 WAS를 직접 설치하고, 그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린 다음 톰캣 서버를 실행해야 했는데,<br />
스프링 부트는 톰캣 서버를 내장하고 있으니, 이로 진행한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9e7d412-01b4-4131-9aed-28fbf9acbe6e/image.png" alt="" /></p>

<p>보통은 Jar를 선택하지만, JSP를 돌리기 위해 War를 선택한다.</p>

<h4 id="helloservlet">HelloServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 서블릿이 호출되면 이 service가 호출된다.</span>
<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"helloServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"HelloServlet"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Request : "</span> <span class="o">+</span> <span class="n">req</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Response : "</span> <span class="o">+</span> <span class="n">resp</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello"</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HelloServlet
Request : org.apache.catalina.connector.RequestFacade@de1a8e6
Response : org.apache.catalina.connector.ResponseFacade@2b3735f6
amazzi
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@WebServlet</code> : 서블릿 어노테이션</li>
  <li><code class="highlighter-rouge">@ServletComponentScan</code> : 스프링이 자동으로 서블릿을 찾아 등록해준다.</li>
  <li>HTTP 요청이 오면 서블릿 컨테이너인 WAS가 HTTP 요청, 응답 객체를 서블릿에 던져준다.</li>
  <li><code class="highlighter-rouge">req.getParameter()</code> :  요청에서 해당 Parameter를 가져온다.</li>
  <li><code class="highlighter-rouge">resp.setCharacterEncoding("utf-8");</code> : 헤더에 CharacterEncoding을 지정한다.</li>
  <li><code class="highlighter-rouge">resp.getWriter().write();</code> : <code class="highlighter-rouge">write()</code> 에 바디에 담을 데이터를 넣어준다.</li>
</ul>

<h4 id="-requestfacade">🤔 RequestFacade?</h4>

<p>HttpServletRequest는 인터페이스이다.<br />
여러가지 WAS 서버들이 이 인터페이스의 구현체를 구현하고 있어 다양한 WAS를 사용할 수 있는 것이다.</p>

<h4 id="http-요청-메시지-로그로-확인하기">HTTP 요청 메시지 로그로 확인하기</h4>

<p>application-properties에 다음을 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logging.level.org.apache.coyote.http11=debug
</code></pre></div></div>

<h4 id="웹-애플리케이션-서버의-요청-응답-구조">웹 애플리케이션 서버의 요청 응답 구조</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d33b3a2-3565-4487-b17d-c7af286c3c30/image.png" style="zoom:80%;" /></p>

<hr />

<h2 id="httpservletrequest">HttpServletRequest</h2>

<p>서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. <br />
그리고 결과를 HttpServletRequest 객체에 담아서 제공한다.</p>

<ul>
  <li>START LINE
    <ul>
      <li>HTTP 메소드</li>
      <li>URL</li>
      <li>쿼리 스트링</li>
      <li>스키마, 프로토콜</li>
    </ul>
  </li>
  <li>HEADER
    <ul>
      <li>헤더 조회</li>
    </ul>
  </li>
  <li>BODY
    <ul>
      <li>form 파라미터의 형식 조회</li>
      <li>message body 데이터 직접 조회</li>
    </ul>
  </li>
  <li>부가 기능
    <ul>
      <li>임시 저장소 기능
        <ul>
          <li>해당 HTTP 요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능</li>
          <li>저장: request.setAttribute(name, value)</li>
          <li>조회: request.getAttribute(name)</li>
        </ul>
      </li>
      <li>세션 관리 기능
        <ul>
          <li>request.getSession(create: true)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="기본-사용">기본 사용</h4>

<h4 id="start-line">Start Line</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="o">=</span> <span class="n">GET</span>
<span class="n">request</span><span class="o">.</span><span class="na">getProtocal</span><span class="o">()</span> <span class="o">=</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">request</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()</span> <span class="o">=</span> <span class="n">http</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">()</span> <span class="o">=</span> <span class="nl">http:</span><span class="c1">//localhost:8080/request-header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">()</span> <span class="o">=</span> <span class="o">/</span><span class="n">request</span><span class="o">-</span><span class="n">header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">()</span> <span class="o">=</span> <span class="n">username</span><span class="o">=</span><span class="n">hello</span>
<span class="n">request</span><span class="o">.</span><span class="na">isSecure</span><span class="o">()</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre></div></div>

<h4 id="헤더-정보">헤더 정보</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getHeaderNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
        <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">headerName</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">headerName</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span>
                <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">headerName</span><span class="o">)));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Headers - end ---"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</code></pre></div></div>

<p>이 외에도 Header 정보를 추출하는 메서드들이 있다.</p>

<ul>
  <li>request.getServerName()</li>
  <li>request.getServerPort()</li>
  <li>request.getLocale()</li>
  <li>request.getCookies()</li>
  <li>request.getContentType()</li>
  <li>request.getCharacterEncoding()</li>
</ul>

<hr />

<h2 id="http-요청-데이터---get-쿼리-파라미터">HTTP 요청 데이터 - GET 쿼리 파라미터</h2>

<p>메시지 바디 없이, URL의 <strong>쿼리 파라미터</strong>를 사용해서 데이터를 전달하는 방법. <br />
예) 검색, 필터, 페이징등에서 많이 사용</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/request-param?username=hello&amp;age=20
</code></pre></div></div>

<p>쿼리파라미터는URL에다음과같이 ?를시작으로보낼수있다.추가파라미터는 &amp;로구분하면된다.</p>

<h4 id="requestparamservlet">RequestParamServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 파라미터 전송 기능
 * http://localhost:8080/request-param?username=hello&amp;age=20
 */</span>

<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestParamServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-param"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. 전체 파라미터 조회"</span><span class="o">);</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">()</span>
                <span class="o">.</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">paramName</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. 단일 파라미터 조회 (더 많이 쓰는 방식)"</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. 파라미터 이름이 같은 여러개 값이 있을 경우"</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">usernames</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터---post-html-form">HTTP 요청 데이터 - POST HTML Form</h2>

<p>메시지 바디에 데이터가 들어가기 때문에 content-type이 있다. <br />
<code class="highlighter-rouge">content-type : application/x-www-form-urlencoded </code><br />
바디에 쿼리 파리미터 형식으로 데이터를 전달한다. <code class="highlighter-rouge">username=hello&amp;age=20</code></p>

<h4 id="hello-formhtml-일부">hello-form.html 일부</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/request-param"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    username: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span><span class="nt">/&gt;</span> age: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"age"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>전송<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>이전에 만들었던 <strong>requestParamServlet</strong>에 요청을 보내면,</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3d6eaa71-b5b2-4166-9aa3-6b3aaf8bf97a/image.png" style="zoom: 50%;" /></p>

<p>다음과 같은 결과를 얻는다! <br />
그런데 <strong>requestParamServlet</strong>는 쿼리 파라미터만 조회하는데 ?</p>

<p>application/x-www-form-urlencoded 형식은 쿼리 파라미터 형식과 같다.<br />
따라서 <strong>쿼리 파라미터 조회 메서드를 그대로 사용</strong>하면 된다.
서버 입장에서는 둘의 형식이 동일하므로, request.getParameter() 로 편리하게 구분없이 조회할 수 있다.</p>

<p>request.getParameter() 는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다.</p>

<h4 id="-postman으로-테스트할-경우">💡 POSTMAN으로 테스트할 경우</h4>

<p>Form 데이터를 입력하기 귀찮은데, 이때 <strong>Content-type</strong>을 <code class="highlighter-rouge">application/x-www-form-urlencoded</code> 로 설정한다.</p>

<hr />

<h2 id="http-요청-데이터---api-메시지-바디">HTTP 요청 데이터 - API 메시지 바디</h2>

<p><strong>HTTP message body</strong>에 데이터를 직접 담아서 요청한다. <br />
HTTP API에서 주로 JSON을 사용한다.</p>

<h3 id="단순-텍스트">단순 텍스트</h3>

<h4 id="requestbodystringservlet---raw한-string">RequestBodyStringServlet - Raw한 String</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyStringServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-string"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyStringServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>HTML form도 이렇게 조회할 수 있지만 번거로우니 쿼리 파라미터 조회를 사용하자!</p>

<h3 id="json">JSON</h3>

<ul>
  <li>content-type: <strong>application/json</strong></li>
</ul>

<h4 id="hellodata">HelloData</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloData</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="requestbodyjsonservlet">RequestBodyJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>

        <span class="n">HelloData</span> <span class="n">helloData</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">messageBody</span><span class="o">,</span> <span class="n">HelloData</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JSON 결과를 파싱해서 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다. <br />
스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리( ObjectMapper)를 제공한다.</p>

<hr />

<h2 id="httpservletresponse---기본-사용법">HTTPServletResponse - 기본 사용법</h2>

<p>개발자가 직접 응답 객체를 만들기는 번거롭지 않게 서블릿이 제공해준다!</p>

<ul>
  <li>HTTP 응답코드 지정</li>
  <li>헤더 생성</li>
  <li>바디 생성 등등…</li>
</ul>

<h4 id="responseheaderservlet">ResponseHeaderServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHeaderServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-header"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseHeaderServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//[status-line] 상태코드 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">);</span> <span class="c1">//200</span>
        <span class="c1">//[response-headers] 응답 헤더 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"text/plain;charset=utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"no-cache, no-store, must-revalidate"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Pragma"</span><span class="o">,</span> <span class="s">"no-cache"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"my-header"</span><span class="o">,</span> <span class="s">"hello"</span><span class="o">);</span>
        <span class="c1">//[Header 편의 메서드] content(response); cookie(response); redirect(response);</span>
        <span class="c1">//[message body] 응답 바디 지정</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ok"</span><span class="o">);</span>

        <span class="c1">//Content-Type: text/plain;charset=utf-8</span>
        <span class="c1">//Content-Length: 2</span>
        <span class="c1">//response.setHeader("Content-Type", "text/plain;charset=utf-8");</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/plain"</span><span class="o">);</span> 
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span> 
        <span class="c1">//response.setContentLength(2); //(생략시 자동 생성)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="쿠키-설정하기">쿠키 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Set-Cookie: myCookie=good; Max-Age=600; </span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Set-Cookie"</span><span class="o">,</span> <span class="s">"myCookie=good; Max-Age=600"</span><span class="o">);</span> 

<span class="c1">// 또는 </span>
<span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">"myCookie"</span><span class="o">,</span> <span class="s">"good"</span><span class="o">);</span> 
<span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span> <span class="c1">//600초</span>
<span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="redirect-설정하기">Redirect 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Status Code 302</span>
<span class="c1">//Location: /basic/hello-form.html</span>
<span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FOUND</span><span class="o">);</span> <span class="c1">//302</span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Location"</span><span class="o">,</span> <span class="s">"/basic/hello-form.html"</span><span class="o">);</span>

<span class="c1">// 또는</span>
<span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/basic/hello-form.html"</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터">HTTP 요청 데이터</h2>

<h3 id="단순-텍스트-html">단순 텍스트, HTML</h3>

<h4 id="httpservletresponse">HttpServletResponse</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHtmlServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-html"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletResponse</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// Content-Type: text:html; charset=utf-8</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text:html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" &lt;div&gt;이건 아니지&lt;/div&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>간단하지만, HTML을 일일히 작성해주어야 한다?</p>

<h3 id="api-json">API JSON</h3>

<h4 id="responsejsonservlet">ResponseJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//Content-Type: application/json</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"content-type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">HelloData</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HelloData</span><span class="o">();</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">"mazzi"</span><span class="o">);</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        
        <span class="c1">// JSON으로 변환</span>
        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>(사실 스프링 쓰면 이렇게 길어지지도 않는다.)</p>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 배포 1단계 퀴즈 답</title>
	  <link>//deploy-answer</link>
	  <author></author>
	  <pubDate>2021-05-01T19:18:00+09:00</pubDate>
	  <guid>//deploy-answer</guid>
	  <description><![CDATA[
	     <h2 id="브라우저에서-googlecom를-요청할-때-통신-과정이-어떻게-이루어질까요">브라우저에서 <a href="https://www.google.com/url?q=http://google.com&amp;sa=D&amp;source=editors&amp;ust=1619888368939000&amp;usg=AFQjCNG8-uuzqgCTbtG39f_utwyeum7dGw">google.com</a>를 요청할 때 통신 과정이 어떻게 이루어질까요?</h2>

<h4 id="1-주소창에--googlecom를-입력하고-enter를-누른다">1. 주소창에  google.com를 입력하고 Enter를 누른다.</h4>

<h4 id="2-웹-브라우저가-다음과-같은-구문으로-url을-해석한다">2. 웹 브라우저가 다음과 같은 구문으로 URL을 해석한다.</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]
</code></pre></div></div>

<ul>
  <li>scheme : 접근할 방법을 정의해 둔 프로토콜 이름</li>
  <li>프로토콜 구분자인 <code class="highlighter-rouge">:</code> 와, IP 혹은 도메인 네임 정보가 필요한 프로토콜이면 //</li>
  <li>프로코콜마다 특화된 정보</li>
</ul>

<h4 id="3-url이-문법에-맞으면-host-부분을-인코딩한다">3. URL이 문법에 맞으면 Host 부분을 인코딩한다.</h4>

<h4 id="4-hsts-http-strict-transport-sercurity-목록을-로드해서-확인한다">4. HSTS (HTTP Strict Transport Sercurity) 목록을 로드해서 확인한다.</h4>

<p>있으면 첫 요청을 HTTPS, 없으면 HTTP</p>

<h4 id="5-dns를-조회한다">5. DNS를 조회한다.</h4>

<p>1) 우선, 로컬의 DNS Cache를 확인한다.</p>

<p>2) /etc/hosts 파일에 정적으로 설정한 정보를 확인한다.</p>

<p>3) /etc/resolv.conf에 설정한 정보를 기반으로 DNS 서버에게 질의한다.</p>

<p>4) DNS 서버는 정보가 있으면 반환하고 없으면 본인의 상위 DNS에게 질의를 하여 정보를 알아온다.</p>

<p>5) 도메인에 해당하는 IP를 알게되면 DNS Cache에 추가한다.</p>

<h4 id="6-arpaddress-resolution-protocol로-대상의-ip와-mac-주소를-알아낸다">6. ARP(Address Resolution Protocol)로 대상의 IP와 MAC 주소를 알아낸다.</h4>

<p>실질적인 통신을 하기 위해서는 논리 주소인 IP주소를 물리 주소인 MAC 주소로 변환해야 한다. <br />
해당 네트워크 내에서 ARP를 브로드 캐스팅하고, 해당 IP주소를 가지고 있는 노드는 자신의 MAC 주소를 응답한다.</p>

<h4 id="7-대상과-tcp-통신을-통해-socket을-연다">7. 대상과 TCP 통신을 통해 Socket을 연다.</h4>

<p>1) 브라우저가 대상 서버의 IP 주소를 받으면 URL에서 해당 포트 번호를 가져와서, TCP Socket stream 요청</p>

<p>2) TCP segment가 만들어지는 Transport Layer로 전달. target port는 header에 추가되고 source port는 시스템에서 동적 포트 범위내에서 임의 지정</p>

<p>3) TCP segment를 Network Layer로 전달. segment header에 대상 컴퓨터의 IP주소와 현재 컴퓨터의 IP주소가 삽입된 packet 구성</p>

<p>4) packet이 DataLink Layer로 전달. 시스템의 MAC address와 gateway(local router)의 MAC주소를 포함하는 Frame header 추가 (gateway의 MAC address를 모르는경우 ARP를 이용해 찾아야 한다.)</p>

<p>5) packet이 ethernet, Wifi, Cellular data network 중 하나로 전송</p>

<p>6) packet local subnet router 도착, AS(Autonomous System)경계 router들을 통과</p>

<p>7) TCP 소켓 통신</p>

<h4 id="8-http-프로토콜로-요청하고-응답한다">8. HTTP 프로토콜로 요청하고 응답한다.</h4>

<p>1) 요청/응답을 처리하는 서버인 HTTPD가 요청을 수신하고, URL에 해당하는 서버에 구성된 가상 호스트가 있는지 확인한다.</p>

<p>2) 서버는 해당 HTTP 메서드 요청을 수락할 수 있는지 확인한다.</p>

<p>3) 서버는 클라이언트가 IP, 인증 등을 통해 이 메서드를 사용할 수 있는지 확인한다.</p>

<p>4) 서버가 요청에 해당하는 콘텐츠를 가져온다.</p>

<p>5) 서버는 핸들러에 따라 파일 확장자를 분석한다.</p>

<h4 id="9-웹-브라우저가-그린다">9. 웹 브라우저가 그린다.</h4>

<h3 id="참고-자료">참고 자료</h3>

<p><a href="https://owlgwang.tistory.com/1">[웹 브라우저에 URL을 입력하면 어떤 일이 일어날까?](https://owlgwang.tistory.com/1)</a></p>

<hr />

<h2 id="ddos-공격에는-어떻게-대응하면-좋을까요">DDoS 공격에는 어떻게 대응하면 좋을까요?</h2>

<h3 id="udp-flood-공격">UDP Flood 공격</h3>

<ul>
  <li>DDoS 공격 형태 중 가장 많이 사용되는 오래된 공격 형태</li>
  <li>정상적인 사용자가 서버를 사용할 수 없도록 서버의 리소스를 소비하기 위해, 공격자가 피해자 시스템에 TCP(SYN) 연결 요청을 연속해서 전송 할 때 발생</li>
  <li>서버가 SYN 연결 요 청 을 받 으 면 , 클라이언트가 연결을 확인하기 위해 보내는 응답신호(ACK)를 기다리는 위해 통신을 열린 상태로 유지하지만, SYN Flood는 응답 신호를 보내지 않으므로 설정된 연결 시간이 초과 될 때까지 서버의 리소스를 소비</li>
  <li>피해자 서버가 정상적인 사용자에 대한 연결이 불가능한 서비스 장애</li>
</ul>

<h4 id="대응-방안">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 TCPSYNflag를 찾는다. (TCPdump 또는 Wireshark등의 패킷 분석 Tool이용)</li>
  <li>방화벽 장비의 “SYN쿠키” 기능을 사용하여 SYNFlood의 영향을 완화 (트래픽이 서버에 전달되기 전에 방화벽이 클라이언트와 서버 간의 TCP연결을 확인)</li>
</ul>

<h3 id="syn-flood">SYN Flood</h3>

<ul>
  <li>SYN Flood 와 매우 유사</li>
  <li>공격자가 봇넷을 사용하여 공격 대상 서버로 상당히 크고 많은 양의 트래픽을 전송</li>
  <li>상대적으로 훨씬 빠르며 서버 리소스를 소모하지 않고, 서버의 네트워크 환경에서 사용 가능한 모든 대역폭을 소비비하여 정상적인 사용자에 대한 접근을 막는다.</li>
  <li>네트워크 포트 중 UDP 패킷(예: 50555 포트)을 수신하는 서버가 해당 포트를 오픈하고 수신 대기하는 응용 프로그램이 작동하기 때문</li>
  <li>공격하는 동안 크고 많은 수의 UDP 패킷이 전송되며 대부분의 서버에서 응답하기에 빠르게 모든 사용 가능한 공격 대상 대역폭을 잠식</li>
</ul>

<h4 id="대응-방안-1">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 많은 수의 원본 IP 주소에서 오는 불규칙한 네트워크 포트의 통신 요청을 통해 공격 UDP 패킷을 찾는다.</li>
  <li>방화벽과 같은 주변 네트워크 장치에 대한 보안 규칙을 정의하여 필요한 포트에서만 인바운드 트래픽을 허용</li>
</ul>

<h3 id="icmpflood">ICMPFlood</h3>

<ul>
  <li>공격자가 봇넷을 사용하여 사용 가능한 모든 대역폭을 소비하고 정상적인 사용자의 접근을 막기 위해 많은 수의 ICMP 패킷을 공격 대상 서버로 전송</li>
  <li>대량의 ICMP 트래픽을 공격 대상 네트워크의 사용 가능한 모든 대역폭을 잠식할 수 있는 충분한 ICMP 요청 및 응답 트래픽 발생이 가능해야 한다.</li>
</ul>

<h4 id="대응-방안-2">대응 방안</h4>

<ul>
  <li>많은 사용자로부터 요청되는 인바운드 ICMP트래픽을 네트워크 로그에서 조사</li>
  <li>라우터와 같은 네트워크 경계 장치에 ICMP 트래픽의 임계치를 설정</li>
</ul>

<h3 id="httpflood">HTTPFlood</h3>

<ul>
  <li>공격자가 공격 대상 웹사이트에 대한 지속적인 많은 양의 HTTP GET 요청을 통해 웹서버의 리소스를 소진하게 하여 정상적인 사용자가 이용할 수 없도록 한다.</li>
</ul>

<h4 id="대응-방안-3">대응 방안</h4>

<ul>
  <li>대상 포트가 80이고 TCP프로토콜을 사용하는 대량의 요청을 네트워크 로그에서 조사</li>
  <li>웹방화벽(WAF)을 사용하여 공격에 대한 피해를 최소화</li>
</ul>

<h3 id="반사-ddos-공격-형태---synack-반사-공격">반사 DDoS 공격 형태 - SYN+ACK 반사 공격</h3>

<ul>
  <li>공격자가 피해자의 IP를 도용한 후 반사체로 악용될 서버에 SYN 패킷을 보내고 해당 응답인 SYN/ACK 패킷을 피해자에게 전송하게 하는 공격</li>
  <li>피해자는 SYN/ACK패킷을 대량으로 전송 받게 되면 해당 패킷을 처리하기 위해 리소스를 소모</li>
</ul>

<h4 id="대응-방안-4">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 TCPACK flag를 찾는다</li>
  <li>방화벽 및 프록시 서버와 같은 모든 주변 장치에서 목적지 IP 기반 SYN/ACK 패킷 임계치를 설정하여 차단</li>
</ul>

<h3 id="반사-ddos-공격-형태---ntp반사-및-증폭-공격">반사 DDoS 공격 형태 - NTP반사 및 증폭 공격</h3>

<ul>
  <li>공격자가 정상적인 NTP 서버의 트래픽을 사용하여 공격하는 형태</li>
  <li>공격자는 공격 대상의 IP 주소로 도용하고 NTP 서버가 많은 양의 응답 트래픽(고정된 패킷 크기)을 공격 대상 서버에게 보내도록 요청</li>
  <li>공격자는 다수의 인터넷에 공개된 NTP 서버에 monlist 요청을 하면 서버는 monlist 요청에 대한 응답을 일제히 공격 대상으로 전송하고 공격 대상은 네트워크 대역폭을 모두 소진하여 정상적인 사용자에 대한 서비스 장애가 발생</li>
</ul>

<h4 id="대응-방안-5">대응 방안</h4>

<ul>
  <li>출발지 중 UDP123포트와 특정 패킷 크기를 가진 트래픽을 네트워크 로그에서 조사</li>
  <li>NTP서버에 대한 무단 트래픽을 제한하는 방화벽 규칙을 적용</li>
</ul>

<h3 id="반사-ddos-공격-형태---dns반사-및-증폭-공격">반사 DDoS 공격 형태 - DNS반사 및 증폭 공격</h3>

<ul>
  <li>공격자가 DNS 시스템을 악용하여 많은 양의 트래픽을 전송하는 형태의 공격</li>
  <li>공격자가 피해자 IP 주소로 도용하여 다수의 공용 DNS 서버에 DNS 조회 요청을 전송하면 증폭된 응답은 공격 대상에게 전송되어 결국 사용 가능한 피해자 대역폭을 모두 소진하게 된다.</li>
</ul>

<h4 id="대응-방안-6">대응 방안</h4>

<ul>
  <li>DNS쿼리 요청이 없는 인바운드 DNS쿼리 응답을 네트워크 로그에서 조사</li>
</ul>

<h3 id="참고-자료-1">참고 자료</h3>

<ul>
  <li>중소기업 대상 DDoS 공격 대응 가이드</li>
</ul>

<hr />

<h3 id="현재-서버에서-몇개의-연결까지-가능한가요">현재 서버에서 몇개의 연결까지 가능한가요?</h3>

<p>현재 리눅스 서버의 소켓 개수 제한은 다음과 같다.</p>

<ul>
  <li>open files                      (-n) 1024</li>
</ul>

<hr />

<h3 id="생성한-ec2의-스토리지-용량을-재부팅-없이-늘리려면-어떻게-해야할까요">생성한 EC2의 스토리지 용량을 재부팅 없이, 늘리려면 어떻게 해야할까요?</h3>

<p><strong>1. EBS 볼륨 확장하기</strong></p>

<ul>
  <li>AWS console에 접속한다.</li>
  <li>EC2 서비스 &gt; 인스턴스에 접속한다.</li>
  <li>하드 디스크 볼륨을 늘리고 싶은 EC2를 선택하고, 하단에 루트 디바이스 선택</li>
</ul>

<p><strong>2. 볼륨 크기 조정 후 Linux 파일 시스템 확장하기</strong></p>

<ul>
  <li>
    <p>어떤 파티션의 크기를 조정해야 하는지 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsblk
</code></pre></div>    </div>
  </li>
  <li>
    <p>Linux 파티션 크기 조정</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo growpart /dev/xvdf 1  #디바이스 이름과 파티션 번호를 구분하는 공백을 추가해야합니다.
</code></pre></div>    </div>
  </li>
  <li>
    <p>파티션 크기 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsblk
</code></pre></div>    </div>
  </li>
  <li>
    <p>Linux 파일 시스템 확장</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo resize2fs /dev/xvdf1
</code></pre></div>    </div>
  </li>
  <li>
    <p>디스크 용량 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ df -h
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="참고-자료-2">참고 자료</h3>

<ul>
  <li><a href="https://ithub.tistory.com/253">AWS - EC2 하드디스크 용량 늘리기</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 @JsonProperty, @JsonNaming</title>
	  <link>//spring-json-property</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-json-property</guid>
	  <description><![CDATA[
	     <h4 id="이-글을-쓴-배경">이 글을 쓴 배경…</h4>

<p>클라이언트에서 HTTP Body에 Json을 실어 요청을 실어 보내고 이를 받는 DTO를 만들어 사용하고 있었다.<br />
하지만 API 명세로 클라이언트에서는 key 네이밍으로 스네이크 케이스를 사용하고,<br />
DTO 필드로는 스네이크 케이스를 사용하기 때문에 Jackson이 DTO에 제대로 매핑하지 못해 예외가 발생했다.</p>

<p>그래서 API 명세에서, 클라이언트가 key를 스네이크 케이스를 사용하여 보내주도록 바꾸려 하였으나,<br />
똑똑한 스프링은 이를 위한 어노테이션을 제공해주고 있었다.</p>

<h3 id="문제-상황-테스트">문제 상황 테스트</h3>

<h4 id="testdto">TestDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>스네이크 케이스</strong></li>
</ul>

<h4 id="test2dto">Test2Dto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2Dto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">test_id</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTest_id</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTest_id</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>카멜 케이스</strong></li>
</ul>

<h4 id="testcontroller">TestController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">TestDto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTestId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Test2Dto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTest_id</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 때 다음과 같은 테스트를 돌려본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">postTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
    <span class="c1">// given</span>
    <span class="n">Test2Dto</span> <span class="n">testDto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">);</span>
    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">().</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">testDto</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>

    <span class="c1">// then</span>
    <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
            <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.test_id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/66938519-c630-41fc-9fac-1899e6c1ab1d/image.png" style="zoom:80%;" /></p>

<p><strong>결과는 실패한다!</strong><br />
왜냐하면 클라이언트는 스네이크 케이스로 키 값을 보내고 응답에 대한 키 값도 <strong>스네이크 표기법</strong>이었는데,<br />
반환하는 DTO의 필드가 카멜 케이스이기 때문에 자동으로 키 값이 카멜 케이스로 잡히기 때문이다.</p>

<p>프론트에서는 스네이크 케이스가 컨벤션이고, 우리 자바에서는 카멜 케이스가 컨벤션인데…<br />
그럼 DTO의 필드를 스네이크로 바꿔야 하나? 혹은 요청의 키 값을 카멜로 바꿔야 하나?  🤷‍♀️</p>

<hr />

<h3 id="jsonproperty">@JsonProperty</h3>

<p>만능 스프링은 역시 이에 대한 어노테이션을 제공해준다.<br />
<code class="highlighter-rouge">@JsonProperty</code> 는 JSON 변환 시 key 이름을 우리가 원하는 대로 설정할 수 있게 해준다. <br />
이 어노테이션을 사용하기 위해서는 jackson 라이브러리를 사용하여야 하지만, 이미 스프링 내부에서는 jackson을 사용하고 있다.</p>

<p>사용하는 방법은 원하는 필드에 해당 어노테이션을 달고, 매핑할 key 이름을 옵션으로 준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">"test_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/8f93201e-e222-4c63-b5cf-16802205b7d5/image.png" style="zoom:80%;" /></p>

<p><strong>이렇게 되면 테스트 성공이다!</strong></p>

<p>그러면 필드 하나하나에 이렇게 매핑해주어야하나…?</p>

<hr />

<h3 id="jsonnaming">@JsonNaming</h3>

<p>다행히도 이런 중복되는 작업을 스프링 어노테이션으로 해결할 수 있다.<br />
클래스에 <code class="highlighter-rouge">@JsonNaming</code> 을 붙이면 모든 필드에 대한 표기법 매핑을 정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.PropertyNamingStrategy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.annotation.JsonNaming</span><span class="o">;</span>

<span class="nd">@JsonNaming</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">PropertyNamingStrategy</span><span class="o">.</span><span class="na">SnakeCaseStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/97f9d5b2-14ce-4015-a656-4d697fee1567/image.png" style="zoom:80%;" /></p>

<p>참고로 표기법 전략은 <code class="highlighter-rouge">SnakeCaseStrategy</code> 말고도 다양하다!</p>

<h4 id="전역적으로-설정하고-싶어">전역적으로 설정하고 싶어!</h4>

<p><strong>application.properties</strong> 에서 다음과 같이 애플리케이션 설정으로 둘 수도 있다.<br />
이러면 각각의 클래스에 어노테이션을 달아주지 않아도 모든 키 매핑에 대한 처리가 가능하다!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spring</span><span class="o">.</span><span class="na">jackson</span><span class="o">.</span><span class="na">property</span><span class="o">-</span><span class="n">naming</span><span class="o">-</span><span class="n">strategy</span><span class="o">=</span><span class="n">SNAKE_CASE</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 @Valid와 @Validated</title>
	  <link>//spring-validation</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-validation</guid>
	  <description><![CDATA[
	     <h2 id="valid와-validated">@Valid와 @Validated</h2>

<p>서비스 근로에서 장바구니 미션 API를 만들며 요청으로 들어온 DTO의 값을 검증하는 방법을 고민하다가,  Spring Validation을 사용해보게 되었다.<br />
이번에는 DTO의 필드에 제약을 걸어주고 컨트롤러에서 검증을 해주었는데, 새롭게 배운 내용이니 이를 정리해보려 한다.<br />
사실 올바르게 사용한 것인지는 확신일 없으나, 이런 것도 있구나 다뤄보면서 여러 시행착오를 겪었기에 좀 더 공부하면서 정리해야지 😋</p>

<h4 id="dependency-추가---gradle">Dependency 추가 - gradle</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-validation'
</code></pre></div></div>

<hr />

<h2 id="valid">@Valid</h2>

<p>이번에 우리가 사용한 예시를 보며 하나씩 정리하자.</p>

<h4 id="productcontroller">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validae</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
 		
  	<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>컨트롤러에서 @RequestBody를 통해 DTO에 매핑을 할 때 검증을 진행할 곳에 <code class="highlighter-rouge">@Valid</code> 를 붙여준다.<br />
해당 요청이 들어와 메서드가 실행될 시 유효성 검사를 진행한다.<br />
만약 검증에 실패할 경우 <code class="highlighter-rouge">MethodArgumentNotValidException</code>를 던진다.</p>

<h4 id="productdto">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
     
 		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>DTO에 사용된 어노테이션과 좀 더 찾아본 제약 조건 어노테이션을 정리해보면… ✍️</p>

<ul>
  <li><code class="highlighter-rouge">@NotNull</code> : 모든 데이터 타입에 대해 null을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@NotEmpty</code> : null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</li>
  <li><code class="highlighter-rouge">@NotBlack</code> : null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@Min(숫자)</code> / <code class="highlighter-rouge">@Max(숫자)</code> : 최소, 최대 값을 검증한다.</li>
</ul>

<p>또한 제약 조건 어노테이션에 속성들로 예외로 던져줄 <strong>message</strong> 등의 옵션을 설정할 수 있다.</p>

<h3 id="제약-조건-어노테이션">제약 조건 어노테이션</h3>

<table>
  <thead>
    <tr>
      <th>Anotation</th>
      <th>제약 조건</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>@NotNull</td>
      <td>모든 데이터 타입에 대해 null을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@NotEmpty</td>
      <td>null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</td>
    </tr>
    <tr>
      <td>@NotBlank</td>
      <td>null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@Null</td>
      <td>Null만 입력 가능</td>
    </tr>
    <tr>
      <td>@Size(min=,max=)</td>
      <td>문자열, 배열등의 크기 검증</td>
    </tr>
    <tr>
      <td>@Pattern(regex=)</td>
      <td>정규식 검증</td>
    </tr>
    <tr>
      <td>@Max(숫자)</td>
      <td>최대값 검증</td>
    </tr>
    <tr>
      <td>@Min(숫자)</td>
      <td>최소값 검증</td>
    </tr>
    <tr>
      <td>@Future</td>
      <td>현재 보다 미래인지 검증</td>
    </tr>
    <tr>
      <td>@Past</td>
      <td>현재 보다 과거인지 검증</td>
    </tr>
    <tr>
      <td>@Positive</td>
      <td>양수만 가능</td>
    </tr>
    <tr>
      <td>@PositiveOrZero</td>
      <td>양수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Negative</td>
      <td>음수만 가능</td>
    </tr>
    <tr>
      <td>@NegativeOrZero</td>
      <td>음수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Email</td>
      <td>이메일 형식만 가능</td>
    </tr>
    <tr>
      <td>@Digits(integer=, fraction = )</td>
      <td>대상 수가 지정된 정수와 소수 자리 수 보다 작은지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMax(value=)</td>
      <td>지정된 실수 이하인지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMin(value=)</td>
      <td>지정된 실수 이상인지 검증</td>
    </tr>
    <tr>
      <td>@AssertFalse</td>
      <td>false 인지 검증</td>
    </tr>
    <tr>
      <td>@AssertTrue</td>
      <td>true 인지 검증</td>
    </tr>
  </tbody>
</table>

<p>그런데 우리는 어떤 요청에서는 id값만 제약조건을 걸고, 어떤 요청에서는 모든 필드에 대한 제약조건을 걸고 싶었다.<br />
당연하게도(?) 제약조건에 대해 그룹핑을 할 수 있는 방법도 있었다!</p>

<hr />

<h2 id="validated">@Validated</h2>

<p><strong>제약조건에 대한 그룹을 만들어 적용</strong>시킬 수 있다.<br />
<strong>특정 Validation 그룹</strong>으로 검증하기 위해서는 Group 인터페이스를 생성하고 이 안에 그룹에 대한 인터페이스를 정의한다.</p>

<h4 id="request">Request</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Request</span> <span class="o">{</span>
    <span class="kd">interface</span> <span class="nc">id</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">interface</span> <span class="nc">allProperties</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이제 요청마다 <strong>id</strong>, or <strong>모든 필드</strong>에 대한 제약 조건을 검사하고 싶을 때를 나눠 그룹을 정의한다.</p>

<h4 id="productdto-1">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>속성 제약조건 어노테이션의 옵션 <strong>groups</strong>에 그룹을 지정해준다.</p>

<h4 id="productcontroller-1">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>
		
  	<span class="c1">// ...</span>
  
    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="cartitemcontroller">CartItemController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/carts"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CartItemController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CartItemController</span><span class="o">(</span><span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cartService</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">;</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addCartItem</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">,</span>
                                            <span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">.</span><span class="na">addCart</span><span class="o">(</span><span class="n">productDto</span><span class="o">.</span><span class="na">getProductId</span><span class="o">(),</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/{cartId}"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">buildAndExpand</span><span class="o">(</span><span class="n">newId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@RequestBody</code> 옆에 <code class="highlighter-rouge">@Validated</code>를 선언하고 괄호를 열어 원하는 그룹을 넣어준다.</p>

<hr />

<h2 id="컬렉션-valid-">컬렉션 @Valid ?</h2>

<h4 id="orderdetaildto">OrderDetailDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderDetailDto</span> <span class="o">{</span>

    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">cartId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderDetailDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>우리가 구현하다 문제가 된 부분은 바로 위와 같은 <code class="highlighter-rouge">OrderDetailDto</code> 의 컬렉션인 <code class="highlighter-rouge">List&lt;OrderDetailDto&gt; orderDetailRequestDtos</code>로 들어오는 값을 검증하고 싶었는데,  <br />
컬렉션에 속한 객체는 속성 제약 조건이 검증되지 않고 그냥 통과되어 버리는 것이었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/orders"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderController</span><span class="o">(</span><span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addOrder</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">,</span>
                                         <span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderDetailDto</span><span class="o">&gt;</span> <span class="n">orderDetailRequestDtos</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">.</span><span class="na">addOrder</span><span class="o">(</span><span class="n">orderDetailRequestDtos</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span>
                <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"/api/"</span> <span class="o">+</span> <span class="n">customerName</span> <span class="o">+</span> <span class="s">"/orders/"</span> <span class="o">+</span> <span class="n">orderId</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

   <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="왜">왜❓</h4>

<p>이유는<a href="https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service/35643761#35643761"><code class="highlighter-rouge">@Valid</code>는 JSR-303의 어노테이션이고 JSR-303은 JavaBeans에 적용되는데, List는 JavaBeans가 아니기 때문이라고 한다.</a><br />
우리는 Collection DTO를 감싸는 또다른 DTO 객체를 만들어야하나… 했으나,  클래스 단에 <code class="highlighter-rouge">@Validated</code> 을 붙여 해결할 수 있었다.</p>

<h3 id="예외">예외</h3>

<p>여기서 주의할 점이 있다. 바로 예외에 관한 부분인데,<br />
<strong><code class="highlighter-rouge">@Valid</code> 는 검증에 실패하면 <code class="highlighter-rouge">MethodArgumentNotValidException</code> 를 던지고, <br />
클래스 단에 붙은 <code class="highlighter-rouge">@Validated </code>는 검증에 실패하면 <code class="highlighter-rouge">ConstraintViolationException</code> 를 던진다.</strong></p>

<p>지금으로써는 각 예외를 잡아서 핸들링 해주었다.</p>

<hr />

<p>근로하면서 Spring Validation이라는 것을 처음써봐서 여러 시도들을 해보았고, 덕분에 이런것도 있구나를 깨달을 수 있었다.<br />
특히 컬렉션에 대한 검증에서 왜이러지를 고민하며 이유를 찾아갔었고 덕분에 정말 많이 배웠다.<br />
사실 장바구니 API 구현에서 살짝 Spring Validation을 다룬거라 이에 대해 깊게 깨우치진 않았지만, 굉장히 좋은 학습이었다.<br />
아마 이 글은 미션을 진행하면서 점차 살이 붙을 것 같다.<br />
일단 지금은 이번에 경험한 내용을 정리하는데 의의를 둔다!</p>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://namocom.tistory.com/m/920">[spring] JSR-303 과 @Valid 과 @Validated</a></li>
  <li><a href="https://meetup.toast.com/posts/223">Validation 어디까지 해봤니?</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 1. 웹 서버, 웹 애플리케이션 서버</title>
	  <link>//spring-mvc-1</link>
	  <author></author>
	  <pubDate>2021-04-27T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-1</guid>
	  <description><![CDATA[
	     <h2 id="웹-서버-웹-애플리케이션-서버">웹 서버, 웹 애플리케이션 서버</h2>

<h3 id="웹서버">웹서버</h3>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>정적 리소스 제공, 기타 부가기능</li>
  <li>정적 파일인 HTML, CSS, JS, 이미지, 영상</li>
  <li>ex) NGINX, 아파치</li>
</ul>

<h4 id="웹-애플리케이션-서버">웹 애플리케이션 서버</h4>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>웹 서버 기능 포함 + (정적 리소스 제공 가능)</li>
  <li>프로그램 코드를 실행해서 애플리케이션 로직 수행
    <ul>
      <li>동적 HTML. REST API</li>
      <li>JSP, 스프링 MVC, 서블릿</li>
      <li>톰캣 등..</li>
    </ul>
  </li>
</ul>

<h3 id="웹-서버-vs-웹-애플리케이션-서버">웹 서버 vs 웹 애플리케이션 서버</h3>

<ul>
  <li>웹 서버는 정적 데이터를 담당하고 애플리케이션 서버는 동적 데이터를 담당한다.</li>
  <li>사실 둘의 용어의 경계도 모호함
    <ul>
      <li>웹 서버도 프로그램을 실행하는 기능을 포함하기도 함</li>
      <li>웹 애플리케이션 서버도 웹 서버의 기능을 제공함</li>
    </ul>
  </li>
  <li>자바에서는 서블릿 컨테이너 기능을 제공하면 웹 애플리케이션 서버다.</li>
</ul>

<h3 id="웹-시스템-구성">웹 시스템 구성</h3>

<h4 id="was--db">WAS + DB</h4>

<p>WAS는 정적 리소스, 애플리케이션 로직 모두 제공 가능하기 때문에 WAS, DB만으로 웹 시스템 구성이 가능하지만, 이럴 경우 WAS가 너무 많은 역할을 담당하여 서버 과부하가 올 수 있다.</p>

<h4 id="web--was--db">WEB + WAS + DB</h4>

<p>정적 리소스만 제공하는 웹서버는 잘 죽지 않는다. WAS는 비즈니스 로직을 처리하다가 에러가 날 수 있는데 이를 웹 서버가 오류 화면을 보여준다. 웹 서버와 애플리케이션 서버가 분리되어서 가능했던 일!</p>

<hr />

<h2 id="서블릿">서블릿</h2>

<p>만약 웹 애플리케이션 서버를 싹 다 구현해야 한다면…<br />
나는 비즈니스 로직을 실행하고 싶은데, HTTP 메시지를 싹 다 읽어야한다.</p>

<p>여기서 서블릿을 지원하는 WAS를 사용하면 비즈니스 로직에만 집중할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"helloServlet"</span><span class="o">,</span> <span class="n">urlPattern</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
	<span class="c1">// 애플리케이션 로직</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>해당 URL이 호출되면 서블릿 코드가 실행된다.</li>
  <li>HTTP 요청과 응답 정보를 편리하게 사용할 수 있는 서블릿을 제공한다.</li>
  <li>개발자는 HTTP 스펙을 매우 편리하게 제공</li>
</ul>

<h3 id="http-요청-시-서블릿의-흐름">HTTP 요청 시 서블릿의 흐름</h3>

<ul>
  <li>WAS는 요청, 응답 객체를 새로 만들어서 서블릿 객체를 호출한다.</li>
  <li>개발자는 요청 객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용한다.</li>
  <li>개발자는 응답 객체에 HTTP 응답 정보를 편리하게 입력한다.</li>
  <li>WAS는 응답 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성한다.</li>
</ul>

<h3 id="서블릿-컨테이너">서블릿 컨테이너</h3>

<ul>
  <li>WAS 안에 존재한다.</li>
  <li>서블릿 컨테이너는 서블릿 생명 주기를 관리한다.</li>
  <li>서블릿 객체는 싱글톤으로 관리한다. (때문에 공유 변수 사용 주의)</li>
  <li>JSP도 서블릿으로 변환되어 사용</li>
  <li>최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용</li>
  <li>동시 요청을 위한 멀티 스레드 처리를 지원한다.</li>
</ul>

<hr />

<h2 id="동시-요청---멀티-스레드">동시 요청 - 멀티 스레드</h2>

<p>그런데 서블릿을 누가호출하나?</p>

<h3 id="스레드">스레드</h3>

<ul>
  <li>애플리케이션 코드를 실행하는 것</li>
  <li>자바 메인 메인 메서드를 실행하면 main이라는 이름의 스레드가 실행된다.</li>
  <li>스레드가 없으면 자바 애플리케이션 실행이 불가능하다.</li>
  <li>한번에 하나의 코드 라인만 수행한다.</li>
  <li>만약 동시처리가 필요하면 스레드를 추가로 생성한다.</li>
</ul>

<p>단일 요청에는 단일 스레드를 실행시킨다.<br />
하지만, 다중 요청에서 스레드가 요청을 처리하다가 서블릿에서 처리가 지연되고 있을 때, <br />
이때 추가 요청이 들어올 경우 오류가 발생한다.</p>

<h3 id="이를-해결하려면">이를 해결하려면?</h3>

<h4 id="요청마다-스레드를-생성한다">요청마다 스레드를 생성한다.</h4>

<h5 id="장점">장점</h5>

<ul>
  <li>동시 요청을 처리할 수 있다.</li>
  <li>리소스가 허용할 때까지 처리 가능</li>
  <li>하나의 스레드가 지연되어도 나머지 스레드는 정상 동작</li>
</ul>

<h5 id="단점">단점</h5>

<ul>
  <li>스레드 생성 비용은 비싸다.
    <ul>
      <li>요청이 올 때마다 스레드를 생성하면 응답이 늦어진다.</li>
    </ul>
  </li>
  <li>컨텍스트 스위칭 비용이 발생한다.</li>
  <li>스레드 생성에 제한이 없다.
    <ul>
      <li>요청이 너무 많으면 리소스 임계점을 넘어 서버가 죽을 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="스레드-풀">스레드 풀</h3>

<p>요청이 오면 스레드 풀에서 놀고 있는 스레드풀을 가져다가 쓴다. (톰캣은 최대 200개 기본 설정). <br />
스레드를 다 쓰면 스레드 풀에 반납한다.<br />
스레드 풀에 있는 스레드 개수보다 요청이 많이들어오면 스레드 대기 또는 거절을 한다.</p>

<h5 id="장점-1">장점</h5>

<ul>
  <li>미리 생성되어 있으므로, 스레드를 생성하고 종료하는 비용이 절약된다.</li>
  <li>응답 시간이 빠르다.</li>
  <li>생성 스레드 최대치가 있으니, 요청이 많이 들어와도 기존 요청은 안전하게 처리한다.</li>
</ul>

<h4 id="실무-팁">실무 팁</h4>

<ul>
  <li>WAS의 주요 튜닝 포인트는 최대 스레드 수이다.</li>
  <li>너무 낮게 설정하면?
    <ul>
      <li>리소스는 여유, 클라이언트는 금방 응답 지연</li>
    </ul>
  </li>
  <li>너무 높게 설정하면?
    <ul>
      <li>동시 요청이 많으면 이소스 임계점 초과로 서버 다운</li>
    </ul>
  </li>
  <li>장애 발생 시
    <ul>
      <li>클라우드면 서버를 늘리고 튜닝한다.</li>
    </ul>
  </li>
</ul>

<h4 id="적정-숫자">적정 숫자?</h4>

<p>애플리케이션 로직 복잡도, CPU, 메모리, IO 리소스 상황에 따라 모두 다르다.<br />
때문에 실제 서비스와 유사한 성능 테스트를 해보아야 한다.</p>

<h3 id="was는-멀티-스레드를-지원한다">WAS는 멀티 스레드를 지원한다.</h3>

<p>멀티 스레드에 대한 부분은 WAS가 처리한다.<br />
때문에 개발자는 멀티 스레드 관련 코드를 신경쓰지 않아도 된다. <br />
단, 멀티 스레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용해야한다.</p>

<hr />

<h2 id="html-http-api-csr-ssr">HTML, HTTP API, CSR, SSR</h2>

<h3 id="백엔드-개발자가-고민해야할-것">백엔드 개발자가 고민해야할 것….</h3>

<h4 id="정적-리소스">정적 리소스</h4>

<p>고정된 HTML, CSS, js 등을 제공한다.</p>

<h4 id="html-페이지">HTML 페이지</h4>

<p>브라우저의 요청이 들어오면 WAS가 템플릿 엔진으로 동적으로 HTML을 생성한다. <br />
웹 브라우저는 HTML을 해석한다.</p>

<h4 id="http-api">HTTP API</h4>

<p>HTML이 아닌 데이터를 전달한다.<br />
주로 JSON 형식을 사용하고, 다양한 시스템에서 호출한다.<br />
데이터만 주고 받고, UI 화면이 필요하면 클라이언트가 별도로 처리한다.</p>

<h3 id="csr-ssr">CSR, SSR</h3>

<h4 id="ssr---서버-사이드-렌더링">SSR - 서버 사이드 렌더링</h4>

<ul>
  <li>서버에서 최종 HTML을 생성해서 클라이언트에게 전달한다.</li>
  <li>주로 정적인 화면에서 사용</li>
  <li>관련 기술 : JSP, 타임리프 등</li>
  <li>자바스크립트를 사용해서 화면 일부를 동적으로 변경할 수 있다.</li>
</ul>

<h5 id="crs---클라이언트-사이드-렌더링">CRS - 클라이언트 사이드 렌더링</h5>

<ul>
  <li>HTML 결과를 자바스크립트를 사용해 웹 브라우저에서 HTML을 동적으로 생성한다.</li>
  <li>동적인 화면에서 사용하여 필요한 부분만 변경할 수 있다.</li>
  <li>ex) 구글 지도..</li>
  <li>관련 기술 : React, Vue.js 등</li>
  <li>HTML 요청 -&gt; 자바스크립트 요청(클라이언트 로직, HTML 렌더링 코드) -&gt; HTTP API 데이터 요청 -&gt; 웹 브라우저에서 JS로 HTML 결과 렌더링</li>
</ul>

<hr />

<h2 id="자바-백엔드-기술-역사">자바 백엔드 기술 역사</h2>

<h4 id="서블릿---1997">서블릿 - 1997</h4>

<p>HTML 생성이 어려움</p>

<h4 id="jsp---1999">JSP - 1999</h4>

<p>HTML 생성은 편하지만 비즈니스 로직까지 너무 많은 역할을 한다.</p>

<h4 id="서블릿-jsp-조합--mvc-패턴-사용">서블릿, JSP 조합 = MVC 패턴 사용</h4>

<p>Model, View, Controller로 역할을 나누어 개발</p>

<h4 id="수많은-mvc-프레임-워크">수많은 MVC 프레임 워크</h4>

<p>MVC 패턴 자동화, 복잡한 웹 기술을 더 편리하게 사용할 수 있는 다양한 기능<br />
ex) 스트럿츠, 스프링 MVC(과거 버젼)</p>

<h4 id="어노테이션-기반의-스프링-mvc">어노테이션 기반의 스프링 MVC</h4>

<p><code class="highlighter-rouge">@Controller</code> 등의 어노테이션 등장.</p>

<h4 id="스프링-부트의-등장">스프링 부트의 등장</h4>

<p>스프링 부트는 서버를 내장한다.<br />
과거는 서버에 WAS를 직접 설치하고, 소스는 War 파일을 만들어 설치한 WAS에 배포해야했다.<br />
스프링 부트는 빌드 결과(Jar)에 WAS 서버를 포함한다. -&gt; 빌드 배포 단순화</p>

<h4 id="최신-기술---스프링-웹-기술의-분화">최신 기술 - 스프링 웹 기술의 분화</h4>

<ul>
  <li>Web Servlet - Spring MVC</li>
  <li>Web Reactive - Spring WebFlux</li>
</ul>

<h5 id="spring-webflux">Spring WebFlux?</h5>

<ul>
  <li>완전한 비동기 논블로킹 처리</li>
  <li>최소 스레드로 최대 성능 - 스레드 컨텍스트 스위칭 비용 효율화</li>
  <li>함수형 스타일 개발 - 동시처리 코드 효율화</li>
  <li>서블릿 기술 사용하지 않음</li>
  <li>하지만, RDB 지원이 부족하다.</li>
  <li>하지만, 일반 MVC의 스레드 모델도 충분히 빠르다.</li>
</ul>

<h3 id="자바-뷰-템플릿-역사">자바 뷰 템플릿 역사</h3>

<h4 id="jsp">JSP</h4>

<p>속도가 느리고 기능이 부족하다.</p>

<h4 id="프리마커-velocity">프리마커, Velocity</h4>

<p>속도 문제 해결, 다양한 기능</p>

<h4 id="타임-리프">타임 리프</h4>

<p>HTML 모양을 유지하면서 뷰 템플릿 적용 가능 (HTML 태그에 적용하기 때문에)
스프링 MVC와 강력한 기능 통합</p>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 배포 인프라 강의 1 - Public Cloud, 통신 확인하기</title>
	  <link>//serve1</link>
	  <author></author>
	  <pubDate>2021-04-27T19:18:00+09:00</pubDate>
	  <guid>//serve1</guid>
	  <description><![CDATA[
	     <h2 id="public-cloud란">Public Cloud란?</h2>

<h4 id="cloud">Cloud</h4>

<p>클라우드는 인터넷을 은유적으로 표현하는 말. 어디에든 있고 어떤 형태로든 변할 수 있다. 정확히는 인터넷을 통해 원격으로 접근할 수 있는 모든 것을 의미한다. (메일, 드라이브 등)</p>

<h4 id="cloud-computing">Cloud Computing?</h4>

<p>서버, 데이터베이스, 네트워킹 등 컴퓨팅 리소스를 인터넷을 통해 관리하는 것</p>

<h3 id="클라우드를-사용하는-이유">클라우드를 사용하는 이유?</h3>

<h4 id="관심사의-분리">관심사의 분리</h4>

<p>서비스를 만들려고 할 때 서비스의 본질에 대해 집중을 하기 위해서 사용한다.<br />
우리의 서비스는 저장소에 있는 데이터를 서버에서 원하는 형태로 가공해 네트워크를 통해 사용자에게 전달한다.<br />
우리는 데이터, 서버, 네트워크를 어떻게 관리할지만 관심을 두었다.<br />
그렇다면 실제 서비스 할때를 생각해보자.</p>

<h4 id="서비스할-경우-고려할-점">서비스할 경우 고려할 점</h4>

<ul>
  <li>데이터를 어떻게 관리할 것인가</li>
  <li>서버를 어떻게 관리할 것인가</li>
  <li>네트워크를 어떻게 관리할 것인가</li>
</ul>

<p>이러한 고민들은 <strong>Cloud</strong> 제공 업체가 해준다.<br />
클라우드를 사용한다는 것은 단순히 컴퓨팅 리소스를 인터넷을 통해 관리하는 것만을 의미하지 않는다.<br />
관심사를 분리하여 우리가 집중할 대상에 더 집중하기 위함이다.</p>

<hr />

<h2 id="통신-확인하기">통신 확인하기</h2>

<ul>
  <li><strong>노드</strong> : IP를 가지고 통신할 수 있는 대상</li>
  <li>하나의 프로그램을 실행하면 PID를 할당해서 실행시킨다 = 프로그램이 메모리에 띄워져서 동작하는 상태</li>
</ul>

<h3 id="osi-7-계층">OSI 7 계층</h3>

<h4 id="1계층---physical-layer물리-계층">1계층 - Physical Layer(물리 계층)</h4>

<ul>
  <li>0과 1의 나열을 주고 받을 수 있게 해주는 모듈</li>
</ul>

<h4 id="2계층---data-link-layer데이터-링크-계층">2계층 - Data Link Layer(데이터 링크 계층)</h4>

<ul>
  <li>같은 네트워크에 있는 여러 대의 컴퓨터들이 데이터를 주고 받기 위해 필요한 모듈</li>
  <li>물리적 주소를 이용해 노드 간 연결</li>
  <li>Framing 작업이 여기에 속한다.</li>
  <li>대표 장비 : 브릿지, L2 스위치</li>
</ul>

<h4 id="3계층---network-layer네트워크-계층">3계층 - Network Layer(네트워크 계층)</h4>

<ul>
  <li>수많은 네트워크 연결로 이뤄진 inter-network 속에서 목적지 컴퓨터로 데이터를 전송하기 위해 IP 주소로 길을 찾고(routing)</li>
  <li>자신의 다음 라우터에게 데이터를 넘겨주는 것(forwording)</li>
  <li>논리적 주소로 최초 출발지부터 최종 목적지까지의 최적 경로 결정</li>
  <li>대표 장비 : 라우터, L3 스위치 등</li>
  <li>프로토콜 : IPv4</li>
</ul>

<h4 id="4계층---transport-layer전송-계층">4계층 - Transport Layer(전송 계층)</h4>

<ul>
  <li>포트 번호를 통해 서비스를 구분하고 데이터 전송을 담당</li>
  <li>대표 장비 : L4 스위치 등</li>
  <li>프로토콜 : TCP</li>
</ul>

<h4 id="5계층---session-layer세션-계층">5계층 - Session Layer(세션 계층)</h4>

<ul>
  <li>응용 프로그램 간 세션 수립, 유지, 종료</li>
</ul>

<h4 id="6계층---presentation-layer표현-계층">6계층 - Presentation Layer(표현 계층)</h4>

<ul>
  <li>데이터의 표현(확장자 연결, 압축, 암호화, 변환)</li>
</ul>

<h4 id="7계층---application-layer응용-계층">7계층 - Application Layer(응용 계층)</h4>

<ul>
  <li>사용자에게 인터페이스 제공, 원본 데이터 생성</li>
  <li>프로토콜 :  HTTP, SSH 등…</li>
</ul>

<h3 id="네트워크-체크">네트워크 체크</h3>

<h4 id="1-ping-체크">1. Ping 체크</h4>

<p>IP 정보만으로 서버에 요청이 가능한지 확인한다. <br />
ICMP란 프로토콜을 사용하는데, 이는 IP가 신뢰성을 보장하지 않아 에러에 대처할 수 없는 문제점에 대해 오류 정보 발견 및 보고를 담당한다.<br />
TCP가 아니라 Port 번호가 없다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ping [대상 IP]
</code></pre></div></div>

<ul>
  <li>RTT(Round Trip Time) : 한 패킷이 왕복한 시간을 의미. 네트워크 시간은 연결 시간, 요청 시간, 응답 시간 등으로 구성됩니다. RTT가 높을 경우 어느 구간에서 오래 걸리는지 확인해야한다.</li>
</ul>

<p><strong>🤔 IP 정보로 통신할 때, 실제 서버 위치를 아는 법?</strong></p>

<p><strong>ARP(Address Resolution Protocol)</strong> : 논리적 주소인 IP주소 정보를 이용하여 물리적 주소인 MAC 주소를 알아와 통신이 가능하게 도와주는 프로토콜로, ARP Request를 Braodcast로 요청하면 수신한 장비들 중 자신의 IP에 해당하는 장비가 응답을 한다. 응답받은 NIC 포트 정보와 IP, MAC 주소를 기반으로 이후 통신을 진행한다.</p>

<h4 id="2-port-체크">2. Port 체크</h4>

<p>서비스의 정상 구동 여부를 확인할 수 있다.<br />
포트가 띄워졌다는 것은 그 애플리케이션을 사용할 수 있다는 것이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ telnet [Target Server IP] [Target Service Port]
</code></pre></div></div>

<p>하나의 포트 번호를 오픈해두고도 많은 사용자와 연결할 수 있다.</p>

<h4 id="소켓">소켓</h4>

<p>소켓은 소프트웨어로 작성된 통신 접속점으로, 네트워크 응용프로그램은 소켓을 통해 통신망으로 데이터를 송수신한다.<br />
소켓은 응용 프로그램에서 TCP/IP를 이용하는 창구 역할을 한다.<br />
(포트번호는 TCP/IP가 지원하는 상위 계층의 프로세스를 구분하기 위한 번호이므로 하나의 컴퓨터내에 있는 응용 프로세스들은 반드시 서로 다른 포트번호를 사용하여야 한다.)</p>

<p>소켓을 이용한 프로그램에서 상대방과 IP 패킷을 주고 받기 위해서는 5가지 정보가 정해져야 한다.</p>

<ul>
  <li>통신에 사용할 프로토콜</li>
  <li>자신의 IP 주소</li>
  <li>자신의 포트번호</li>
  <li>상대방의 IP 주소</li>
  <li>상대방의 포트번호</li>
</ul>

<h4 id="3-http-response-체크">3. HTTP Response 체크</h4>

<p>상태 코드를 기반으로 상세하게 이상유무를 판단할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -I google.com
</code></pre></div></div>

<h4 id="4-패킷-분석">4. 패킷 분석</h4>

<p>tcpdump, <a href="https://www.wireshark.org/download.html">wireshark</a> 등의 도구를 사용하여 패킷을 모니터링할 수 있다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 REST API에 대하여</title>
	  <link>//restapi</link>
	  <author></author>
	  <pubDate>2021-04-21T19:18:00+09:00</pubDate>
	  <guid>//restapi</guid>
	  <description><![CDATA[
	     <h2 id="rest-api">REST API</h2>

<ul>
  <li>오늘날 사용 가능한 가장 일반적인 웹 서비스 유형 중 하나</li>
  <li>브라우저 앱을 포함한 다양한 클라이언트가 REST API를 통해 서버와 통신</li>
  <li>stateless 통신 및 캐시 가능한 데이터같은 특정 아키텍처 제약 조건을 준수하는 애플리케이션 프로그래밍 인터페이스</li>
  <li>프로토콜이나 표준이 아님</li>
  <li>여러 통신 프로토콜을 통해 액세스 할 수 있지만 일반적으로 HTTPS를 통해 호출됨</li>
</ul>

<h3 id="rest-api-구성">REST API 구성</h3>

<p>REST : Representational State Transfer라는 용어의 약자</p>

<ul>
  <li><strong>자원</strong> : URI</li>
  <li><strong>행위</strong> : HTTP METHOD</li>
  <li><strong>표현</strong></li>
</ul>

<h3 id="rest-의-특징">REST 의 특징</h3>

<ul>
  <li>Uniform Interface</li>
  <li>Stateless</li>
  <li>Caching</li>
  <li>Client-Server</li>
  <li>Hierarchical system</li>
  <li>Code on demand</li>
</ul>

<h3 id="rest-api-디자인-가이드">REST API 디자인 가이드</h3>

<p><strong>URI는 자원을 표현하는데 집중하고 행위에 대한 정의는 HTTP 메소드를 통해 나타낸다.</strong></p>

<ul>
  <li>URI는 정보의 자원을 표현해야 한다 : 리소스명은 동사보다 명사를 사용한다.</li>
  <li>자원에 대한 행위는 HTTP 메소드로 표현한다.</li>
</ul>

<p><strong>URI 설계 시 주의 사항</strong></p>

<ul>
  <li>슬래시 (/)는 계층 관계를 나타내는 데 사용한다.</li>
  <li>마지막 문자로 슬래시를 포함하지 않는다.</li>
  <li>긴 URL 경로의 가독성을 높이기 위해서 하이픈(-)을 사용한다.</li>
  <li>밑줄(_)은 URL에 사용하지 않는다.</li>
  <li>URL은 소문자를 사용한다.</li>
  <li>파일 확장자는 URI에 포함시키지 않는다.</li>
</ul>

<p><strong>리소스 간의 관계를 표현하는 방법</strong></p>

<ul>
  <li><code class="highlighter-rouge">/리소스명/리소스 ID/관계가 있는 다른 리소스명</code></li>
  <li>관계명이 복잡할 경우 서브 리소스에 명시적으로 표현한다. ex) <code class="highlighter-rouge">GET : /users/{userid}/likes/devices</code></li>
</ul>

<p><strong>Colllection과 Document</strong></p>

<ul>
  <li><strong>Colllection</strong> : 문서들의 집합, 객체들의 집합. 복수로 사용한다.</li>
  <li><strong>Document</strong> : 단순한 문서 혹은 한 객체</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/games/{id}/score
/games/{id}/load
/games/{id}/move
</code></pre></div></div>

<h3 id="http-응답-상태-코드">HTTP 응답 상태 코드</h3>

<p><strong>200</strong></p>

<ul>
  <li>200 : 클라이언트의 요청을 정상적으로 수행함</li>
  <li>201 : 클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨(POST를 통한 리소스 생성 작업 시)</li>
</ul>

<p><strong>400</strong></p>

<ul>
  <li>400 : 클라이언트의 요청이 부적절 할 경우 사용하는 응답 코드</li>
  <li>401 : 클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용하는 응답 코드</li>
  <li>403 : 유저 인증상태와 관계 없이 응답하고 싶지 않은 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드</li>
  <li>404 : 서버가 요청한 페이지(Resource)를 찾을 수 없을 경우 사용하는 응답 코드</li>
</ul>

<p><strong>ect</strong></p>

<ul>
  <li>301 : 클라이언트가 요청한 리소스에 대한 URI가 변경 되었을 때 사용하는 응답 코드</li>
  <li>500 : 서버에 문제가 있을 경우 사용하는 응답 코드</li>
</ul>

<h3 id="참고">참고</h3>

<p><a href="https://meetup.toast.com/posts/92">REST API 제대로 알고 사용하기 : NHN Cloud Meetup</a></p>

<hr />

<h3 id="-잘못된-데이터로-요청하여-db오류가-발생할-시-어떤-상태코드를-돌려주어야-하나">❓ 잘못된 데이터로 요청하여 DB오류가 발생할 시 어떤 상태코드를 돌려주어야 하나?</h3>

<p>서버에서 SQLException이 발생할 경우 이를 클라이언트에 알려야 하나,<br />
또는 어떤 상태코드를 주어야 하나에 대해 이야기해보았다.</p>

<p>일단 결론은 잘못된 데이터로 결과 값을 가져올 수 없는 경우, 서버에러가 아닌 때에 따라 적절한  상태코드를 돌려준다.<br />
<a href="https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design">웹 API 디자인</a>을 참고하였다.</p>

<h4 id="post---잘못된-데이터-추가-요청일-경우-400">POST - 잘못된 데이터 추가 요청일 경우 400</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/5568ef22-9fa1-44b5-a44f-124fb75714f0/image.png" style="zoom:50%;" /></p>

<h4 id="put---데이터-수정이-실패한-경우-409">PUT - 데이터 수정이 실패한 경우 409</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/92848e22-2348-41c9-acdc-95ab25ad6401/image.png" style="zoom: 67%;" /></p>

<p>서버에서 처리하고 상태코드를 보낼 때 정해진 약속을 생각해보고 적절한 상태코드를 보내어 클라이언트가 요청에 대한 결과를 정확히 알 수 있도록 하자!</p>

<hr />

<h2 id="rest-api-설계를위한-모범-사례">REST API 설계를위한 모범 사례</h2>

<blockquote>
  <p>2021-06-09 추가</p>
</blockquote>

<h3 id="json으로-accept와--respond">JSON으로 accept와  respond</h3>

<ul>
  <li>JSON은 데이터 전송을위한 표준</li>
  <li>JS의 Fetch API 등은 JSON을 인코딩 및 디코딩하는 내장 메서드가 있음</li>
  <li>JSON으로 응답 할 때 클라이언트가이를 해석하도록 하려면 <code class="highlighter-rouge">Content-Type: application/json</code> 를 응답 헤더로 설정해야함</li>
</ul>

<h3 id="동사대신-명사-사용">동사대신 명사 사용</h3>

<ul>
  <li>HTTP 요청 메서드에 이미 동사가 있기 때문</li>
  <li>동사가있는 것은 새로운 정보를 전달하지 않기 때문에 불필요하게 길어짐</li>
</ul>

<h3 id="논리적-중첩-사용">논리적 중첩 사용</h3>

<ul>
  <li>한 개체가 다른 개체를 포함 할 수있는 경우이를 반영</li>
  <li>여기서 데이터베이스와 관계없이 디자인하기
    <ul>
      <li>실제로 공격자에세 불필요한 정보를 제공하지 않도록 데이터베이스 구조를 미러링 하지 않는 것이 좋음</li>
    </ul>
  </li>
</ul>

<h3 id="표준-오류-코드-반환">표준 오류 코드 반환</h3>

<ul>
  <li>오류 코드는 관리자가 문제를 해결할 수있는 충분한 정보를 갖도록 메시지가 함께 있어야 함</li>
  <li>하지만 공격자가 이를 악용할 수 있음</li>
</ul>

<h4 id="일반적인-http-오류-상태코드">일반적인 HTTP 오류 상태코드</h4>

<ul>
  <li>400 : 클라이언트 측 입력이 유효성 검사에 실패</li>
  <li>401 : 사용자가 리소스에 액세스 할 수있는 권한이 없음</li>
  <li>403 : 사용자가 인증되었지만 리소스에 액세스 할 수 없음</li>
  <li>404 : 리소스를 찾을 수 없음</li>
  <li>500 : 일반 서버 오류. 명시적으로 던져서는 안됨</li>
  <li>503 : 서버 측에서 예기치 않은 일이 발생했음 (서버 과부하, 시스템의 일부 오류 등)</li>
</ul>

<h3 id="보안">보안</h3>

<ul>
  <li>SSL 인증서는 서버에로드하기가 그리 어렵지 않으며 비용이 무료이거나 매우 낮음</li>
  <li>때문에 SSL위에서 구동되는 HTTPS를 이용하자</li>
  <li>사용자들이 서로의 정보에 액세스 할 수 없도록 막아야 함</li>
</ul>

<h3 id="성능-향상을-위한-데이터-캐싱">성능 향상을 위한 데이터 캐싱</h3>

<ul>
  <li>사용자가 요청한 일부 데이터를 검색 할 때마다 데이터를 가져 오기 위해 데이터베이스를 조회하는 대신</li>
  <li>로컬 메모리 캐시에서 데이터를 반환하는 캐싱을 추가 할 수 있음</li>
  <li>덕분에 사용자가 데이터를 더 빨리 얻을 수 있음</li>
  <li>하지만 사용자가 얻는 데이터는 오래되었을 수 있음 (문제)</li>
  <li>Redis, 인메모리 캐싱 등을 사용할 수 있음</li>
  <li>요구사항이 변경되면 데이터가 캐싱되는 방식을 변경할 수 있음</li>
  <li>캐싱을 사용하는 경우 <code class="highlighter-rouge">Cache-Control</code>헤더 에도 정보를 포함해야함</li>
</ul>

<h3 id="api-버전-관리">API 버전 관리</h3>

<ul>
  <li>API에 변경사항이 생겨 이를 반영하는 경우 다른 버전의 API가 있어야 함</li>
  <li>v1 엔드 포인트는 변경을 원하지 않는 사람들을 위해 활성 상태를 유지</li>
  <li>v2는 업그레이드 할 준비가 된 사람들에게 서비스를 제공</li>
  <li>버전은 일반적으로 수행 <code class="highlighter-rouge">/v1/</code>, <code class="highlighter-rouge">/v2/</code>등 API 경로의 시작 부분에 추가</li>
</ul>

<h3 id="참고-1">참고</h3>

<ul>
  <li><a href="https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/">REST API 설계를위한 모범 사례</a></li>
</ul>

<hr />

<h3 id="-api-설계에-대한-정해진-규약">➕ API 설계에 대한 정해진 규약?</h3>

<ul>
  <li>API를 활용하는 사람들과 충분한 논의 후 결정하기</li>
  <li>많은 사람들의 공감</li>
  <li>RFC 문서나 많은 사람들 사용하는 API설계 활용</li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
