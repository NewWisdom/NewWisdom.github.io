<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📋 배포 1단계 퀴즈 답</title>
	  <link>//deploy-answer</link>
	  <author></author>
	  <pubDate>2021-05-01T19:18:00+09:00</pubDate>
	  <guid>//deploy-answer</guid>
	  <description><![CDATA[
	     <h2 id="브라우저에서-googlecom를-요청할-때-통신-과정이-어떻게-이루어질까요">브라우저에서 <a href="https://www.google.com/url?q=http://google.com&amp;sa=D&amp;source=editors&amp;ust=1619888368939000&amp;usg=AFQjCNG8-uuzqgCTbtG39f_utwyeum7dGw">google.com</a>를 요청할 때 통신 과정이 어떻게 이루어질까요?</h2>

<h4 id="1-주소창에--googlecom를-입력하고-enter를-누른다">1. 주소창에  google.com를 입력하고 Enter를 누른다.</h4>

<h4 id="2-웹-브라우저가-다음과-같은-구문으로-url을-해석한다">2. 웹 브라우저가 다음과 같은 구문으로 URL을 해석한다.</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]
</code></pre></div></div>

<ul>
  <li>scheme : 접근할 방법을 정의해 둔 프로토콜 이름</li>
  <li>프로토콜 구분자인 <code class="highlighter-rouge">:</code> 와, IP 혹은 도메인 네임 정보가 필요한 프로토콜이면 //</li>
  <li>프로코콜마다 특화된 정보</li>
</ul>

<h4 id="3-url이-문법에-맞으면-host-부분을-인코딩한다">3. URL이 문법에 맞으면 Host 부분을 인코딩한다.</h4>

<h4 id="4-hsts-http-strict-transport-sercurity-목록을-로드해서-확인한다">4. HSTS (HTTP Strict Transport Sercurity) 목록을 로드해서 확인한다.</h4>

<p>있으면 첫 요청을 HTTPS, 없으면 HTTP</p>

<h4 id="5-dns를-조회한다">5. DNS를 조회한다.</h4>

<p>1) 우선, 로컬의 DNS Cache를 확인한다.</p>

<p>2) /etc/hosts 파일에 정적으로 설정한 정보를 확인한다.</p>

<p>3) /etc/resolv.conf에 설정한 정보를 기반으로 DNS 서버에게 질의한다.</p>

<p>4) DNS 서버는 정보가 있으면 반환하고 없으면 본인의 상위 DNS에게 질의를 하여 정보를 알아온다.</p>

<p>5) 도메인에 해당하는 IP를 알게되면 DNS Cache에 추가한다.</p>

<h4 id="6-arpaddress-resolution-protocol로-대상의-ip와-mac-주소를-알아낸다">6. ARP(Address Resolution Protocol)로 대상의 IP와 MAC 주소를 알아낸다.</h4>

<p>실질적인 통신을 하기 위해서는 논리 주소인 IP주소를 물리 주소인 MAC 주소로 변환해야 한다. <br />
해당 네트워크 내에서 ARP를 브로드 캐스팅하고, 해당 IP주소를 가지고 있는 노드는 자신의 MAC 주소를 응답한다.</p>

<h4 id="7-대상과-tcp-통신을-통해-socket을-연다">7. 대상과 TCP 통신을 통해 Socket을 연다.</h4>

<p>1) 브라우저가 대상 서버의 IP 주소를 받으면 URL에서 해당 포트 번호를 가져와서, TCP Socket stream 요청</p>

<p>2) TCP segment가 만들어지는 Transport Layer로 전달. target port는 header에 추가되고 source port는 시스템에서 동적 포트 범위내에서 임의 지정</p>

<p>3) TCP segment를 Network Layer로 전달. segment header에 대상 컴퓨터의 IP주소와 현재 컴퓨터의 IP주소가 삽입된 packet 구성</p>

<p>4) packet이 DataLink Layer로 전달. 시스템의 MAC address와 gateway(local router)의 MAC주소를 포함하는 Frame header 추가 (gateway의 MAC address를 모르는경우 ARP를 이용해 찾아야 한다.)</p>

<p>5) packet이 ethernet, Wifi, Cellular data network 중 하나로 전송</p>

<p>6) packet local subnet router 도착, AS(Autonomous System)경계 router들을 통과</p>

<p>7) TCP 소켓 통신</p>

<h4 id="8-http-프로토콜로-요청하고-응답한다">8. HTTP 프로토콜로 요청하고 응답한다.</h4>

<p>1) 요청/응답을 처리하는 서버인 HTTPD가 요청을 수신하고, URL에 해당하는 서버에 구성된 가상 호스트가 있는지 확인한다.</p>

<p>2) 서버는 해당 HTTP 메서드 요청을 수락할 수 있는지 확인한다.</p>

<p>3) 서버는 클라이언트가 IP, 인증 등을 통해 이 메서드를 사용할 수 있는지 확인한다.</p>

<p>4) 서버가 요청에 해당하는 콘텐츠를 가져온다.</p>

<p>5) 서버는 핸들러에 따라 파일 확장자를 분석한다.</p>

<h4 id="9-웹-브라우저가-그린다">9. 웹 브라우저가 그린다.</h4>

<h3 id="참고-자료">참고 자료</h3>

<p><a href="https://owlgwang.tistory.com/1">[웹 브라우저에 URL을 입력하면 어떤 일이 일어날까?](https://owlgwang.tistory.com/1)</a></p>

<hr />

<h2 id="ddos-공격에는-어떻게-대응하면-좋을까요">DDoS 공격에는 어떻게 대응하면 좋을까요?</h2>

<h3 id="udp-flood-공격">UDP Flood 공격</h3>

<ul>
  <li>DDoS 공격 형태 중 가장 많이 사용되는 오래된 공격 형태</li>
  <li>정상적인 사용자가 서버를 사용할 수 없도록 서버의 리소스를 소비하기 위해, 공격자가 피해자 시스템에 TCP(SYN) 연결 요청을 연속해서 전송 할 때 발생</li>
  <li>서버가 SYN 연결 요 청 을 받 으 면 , 클라이언트가 연결을 확인하기 위해 보내는 응답신호(ACK)를 기다리는 위해 통신을 열린 상태로 유지하지만, SYN Flood는 응답 신호를 보내지 않으므로 설정된 연결 시간이 초과 될 때까지 서버의 리소스를 소비</li>
  <li>피해자 서버가 정상적인 사용자에 대한 연결이 불가능한 서비스 장애</li>
</ul>

<h4 id="대응-방안">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 TCPSYNflag를 찾는다. (TCPdump 또는 Wireshark등의 패킷 분석 Tool이용)</li>
  <li>방화벽 장비의 “SYN쿠키” 기능을 사용하여 SYNFlood의 영향을 완화 (트래픽이 서버에 전달되기 전에 방화벽이 클라이언트와 서버 간의 TCP연결을 확인)</li>
</ul>

<h3 id="syn-flood">SYN Flood</h3>

<ul>
  <li>SYN Flood 와 매우 유사</li>
  <li>공격자가 봇넷을 사용하여 공격 대상 서버로 상당히 크고 많은 양의 트래픽을 전송</li>
  <li>상대적으로 훨씬 빠르며 서버 리소스를 소모하지 않고, 서버의 네트워크 환경에서 사용 가능한 모든 대역폭을 소비비하여 정상적인 사용자에 대한 접근을 막는다.</li>
  <li>네트워크 포트 중 UDP 패킷(예: 50555 포트)을 수신하는 서버가 해당 포트를 오픈하고 수신 대기하는 응용 프로그램이 작동하기 때문</li>
  <li>공격하는 동안 크고 많은 수의 UDP 패킷이 전송되며 대부분의 서버에서 응답하기에 빠르게 모든 사용 가능한 공격 대상 대역폭을 잠식</li>
</ul>

<h4 id="대응-방안-1">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 많은 수의 원본 IP 주소에서 오는 불규칙한 네트워크 포트의 통신 요청을 통해 공격 UDP 패킷을 찾는다.</li>
  <li>방화벽과 같은 주변 네트워크 장치에 대한 보안 규칙을 정의하여 필요한 포트에서만 인바운드 트래픽을 허용</li>
</ul>

<h3 id="icmpflood">ICMPFlood</h3>

<ul>
  <li>공격자가 봇넷을 사용하여 사용 가능한 모든 대역폭을 소비하고 정상적인 사용자의 접근을 막기 위해 많은 수의 ICMP 패킷을 공격 대상 서버로 전송</li>
  <li>대량의 ICMP 트래픽을 공격 대상 네트워크의 사용 가능한 모든 대역폭을 잠식할 수 있는 충분한 ICMP 요청 및 응답 트래픽 발생이 가능해야 한다.</li>
</ul>

<h4 id="대응-방안-2">대응 방안</h4>

<ul>
  <li>많은 사용자로부터 요청되는 인바운드 ICMP트래픽을 네트워크 로그에서 조사</li>
  <li>라우터와 같은 네트워크 경계 장치에 ICMP 트래픽의 임계치를 설정</li>
</ul>

<h3 id="httpflood">HTTPFlood</h3>

<ul>
  <li>공격자가 공격 대상 웹사이트에 대한 지속적인 많은 양의 HTTP GET 요청을 통해 웹서버의 리소스를 소진하게 하여 정상적인 사용자가 이용할 수 없도록 한다.</li>
</ul>

<h4 id="대응-방안-3">대응 방안</h4>

<ul>
  <li>대상 포트가 80이고 TCP프로토콜을 사용하는 대량의 요청을 네트워크 로그에서 조사</li>
  <li>웹방화벽(WAF)을 사용하여 공격에 대한 피해를 최소화</li>
</ul>

<h3 id="반사-ddos-공격-형태---synack-반사-공격">반사 DDoS 공격 형태 - SYN+ACK 반사 공격</h3>

<ul>
  <li>공격자가 피해자의 IP를 도용한 후 반사체로 악용될 서버에 SYN 패킷을 보내고 해당 응답인 SYN/ACK 패킷을 피해자에게 전송하게 하는 공격</li>
  <li>피해자는 SYN/ACK패킷을 대량으로 전송 받게 되면 해당 패킷을 처리하기 위해 리소스를 소모</li>
</ul>

<h4 id="대응-방안-4">대응 방안</h4>

<ul>
  <li>네트워크 로그를 조사하고 TCPACK flag를 찾는다</li>
  <li>방화벽 및 프록시 서버와 같은 모든 주변 장치에서 목적지 IP 기반 SYN/ACK 패킷 임계치를 설정하여 차단</li>
</ul>

<h3 id="반사-ddos-공격-형태---ntp반사-및-증폭-공격">반사 DDoS 공격 형태 - NTP반사 및 증폭 공격</h3>

<ul>
  <li>공격자가 정상적인 NTP 서버의 트래픽을 사용하여 공격하는 형태</li>
  <li>공격자는 공격 대상의 IP 주소로 도용하고 NTP 서버가 많은 양의 응답 트래픽(고정된 패킷 크기)을 공격 대상 서버에게 보내도록 요청</li>
  <li>공격자는 다수의 인터넷에 공개된 NTP 서버에 monlist 요청을 하면 서버는 monlist 요청에 대한 응답을 일제히 공격 대상으로 전송하고 공격 대상은 네트워크 대역폭을 모두 소진하여 정상적인 사용자에 대한 서비스 장애가 발생</li>
</ul>

<h4 id="대응-방안-5">대응 방안</h4>

<ul>
  <li>출발지 중 UDP123포트와 특정 패킷 크기를 가진 트래픽을 네트워크 로그에서 조사</li>
  <li>NTP서버에 대한 무단 트래픽을 제한하는 방화벽 규칙을 적용</li>
</ul>

<h3 id="반사-ddos-공격-형태---dns반사-및-증폭-공격">반사 DDoS 공격 형태 - DNS반사 및 증폭 공격</h3>

<ul>
  <li>공격자가 DNS 시스템을 악용하여 많은 양의 트래픽을 전송하는 형태의 공격</li>
  <li>공격자가 피해자 IP 주소로 도용하여 다수의 공용 DNS 서버에 DNS 조회 요청을 전송하면 증폭된 응답은 공격 대상에게 전송되어 결국 사용 가능한 피해자 대역폭을 모두 소진하게 된다.</li>
</ul>

<h4 id="대응-방안-6">대응 방안</h4>

<ul>
  <li>DNS쿼리 요청이 없는 인바운드 DNS쿼리 응답을 네트워크 로그에서 조사</li>
</ul>

<h3 id="참고-자료-1">참고 자료</h3>

<ul>
  <li>중소기업 대상 DDoS 공격 대응 가이드</li>
</ul>

<hr />

<h3 id="현재-서버에서-몇개의-연결까지-가능한가요">현재 서버에서 몇개의 연결까지 가능한가요?</h3>

<p>현재 리눅스 서버의 소켓 개수 제한은 다음과 같다.</p>

<ul>
  <li>open files                      (-n) 1024</li>
</ul>

<hr />

<h3 id="생성한-ec2의-스토리지-용량을-재부팅-없이-늘리려면-어떻게-해야할까요">생성한 EC2의 스토리지 용량을 재부팅 없이, 늘리려면 어떻게 해야할까요?</h3>

<p><strong>1. EBS 볼륨 확장하기</strong></p>

<ul>
  <li>AWS console에 접속한다.</li>
  <li>EC2 서비스 &gt; 인스턴스에 접속한다.</li>
  <li>하드 디스크 볼륨을 늘리고 싶은 EC2를 선택하고, 하단에 루트 디바이스 선택</li>
</ul>

<p><strong>2. 볼륨 크기 조정 후 Linux 파일 시스템 확장하기</strong></p>

<ul>
  <li>
    <p>어떤 파티션의 크기를 조정해야 하는지 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsblk
</code></pre></div>    </div>
  </li>
  <li>
    <p>Linux 파티션 크기 조정</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo growpart /dev/xvdf 1  #디바이스 이름과 파티션 번호를 구분하는 공백을 추가해야합니다.
</code></pre></div>    </div>
  </li>
  <li>
    <p>파티션 크기 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ lsblk
</code></pre></div>    </div>
  </li>
  <li>
    <p>Linux 파일 시스템 확장</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo resize2fs /dev/xvdf1
</code></pre></div>    </div>
  </li>
  <li>
    <p>디스크 용량 확인</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ df -h
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="참고-자료-2">참고 자료</h3>

<ul>
  <li><a href="https://ithub.tistory.com/253">AWS - EC2 하드디스크 용량 늘리기</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 Spring Validation</title>
	  <link>//spring-validation</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-validation</guid>
	  <description><![CDATA[
	     <h2 id="valid와-validated">@Valid와 @Validated</h2>

<p>서비스 근로에서 장바구니 미션 API를 만들며 요청으로 들어온 DTO의 값을 검증하는 방법을 고민하다가,  Spring Validation을 사용해보게 되었다.<br />
이번에는 DTO의 필드에 제약을 걸어주고 컨트롤러에서 검증을 해주었는데, 새롭게 배운 내용이니 이를 정리해보려 한다.<br />
사실 올바르게 사용한 것인지는 확신일 없으나, 이런 것도 있구나 다뤄보면서 여러 시행착오를 겪었기에 좀 더 공부하면서 정리해야지 😋</p>

<h4 id="dependency-추가---gradle">Dependency 추가 - gradle</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-validation'
</code></pre></div></div>

<hr />

<h2 id="valid">@Valid</h2>

<p>이번에 우리가 사용한 예시를 보며 하나씩 정리하자.</p>

<h4 id="productcontroller">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validae</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
 		
  	<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>컨트롤러에서 @RequestBody를 통해 DTO에 매핑을 할 때 검증을 진행할 곳에 <code class="highlighter-rouge">@Valid</code> 를 붙여준다.<br />
해당 요청이 들어와 메서드가 실행될 시 유효성 검사를 진행한다.<br />
만약 검증에 실패할 경우 <code class="highlighter-rouge">MethodArgumentNotValidException</code>를 던진다.</p>

<h4 id="productdto">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
     
 		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>DTO에 사용된 어노테이션과 좀 더 찾아본 제약 조건 어노테이션을 정리해보면… ✍️</p>

<ul>
  <li><code class="highlighter-rouge">@NotNull</code> : 모든 데이터 타입에 대해 null을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@NotEmpty</code> : null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</li>
  <li><code class="highlighter-rouge">@NotBlack</code> : null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@Min(숫자)</code> / <code class="highlighter-rouge">@Max(숫자)</code> : 최소, 최대 값을 검증한다.</li>
</ul>

<p>또한 제약 조건 어노테이션에 속성들로 예외로 던져줄 <strong>message</strong> 등의 옵션을 설정할 수 있다.</p>

<h3 id="제약-조건-어노테이션">제약 조건 어노테이션</h3>

<table>
  <thead>
    <tr>
      <th>Anotation</th>
      <th>제약 조건</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>@NotNull</td>
      <td>모든 데이터 타입에 대해 null을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@NotEmpty</td>
      <td>null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</td>
    </tr>
    <tr>
      <td>@NotBlank</td>
      <td>null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@Null</td>
      <td>Null만 입력 가능</td>
    </tr>
    <tr>
      <td>@Size(min=,max=)</td>
      <td>문자열, 배열등의 크기 검증</td>
    </tr>
    <tr>
      <td>@Pattern(regex=)</td>
      <td>정규식 검증</td>
    </tr>
    <tr>
      <td>@Max(숫자)</td>
      <td>최대값 검증</td>
    </tr>
    <tr>
      <td>@Min(숫자)</td>
      <td>최소값 검증</td>
    </tr>
    <tr>
      <td>@Future</td>
      <td>현재 보다 미래인지 검증</td>
    </tr>
    <tr>
      <td>@Past</td>
      <td>현재 보다 과거인지 검증</td>
    </tr>
    <tr>
      <td>@Positive</td>
      <td>양수만 가능</td>
    </tr>
    <tr>
      <td>@PositiveOrZero</td>
      <td>양수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Negative</td>
      <td>음수만 가능</td>
    </tr>
    <tr>
      <td>@NegativeOrZero</td>
      <td>음수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Email</td>
      <td>이메일 형식만 가능</td>
    </tr>
    <tr>
      <td>@Digits(integer=, fraction = )</td>
      <td>대상 수가 지정된 정수와 소수 자리 수 보다 작은지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMax(value=)</td>
      <td>지정된 실수 이하인지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMin(value=)</td>
      <td>지정된 실수 이상인지 검증</td>
    </tr>
    <tr>
      <td>@AssertFalse</td>
      <td>false 인지 검증</td>
    </tr>
    <tr>
      <td>@AssertTrue</td>
      <td>true 인지 검증</td>
    </tr>
  </tbody>
</table>

<p>그런데 우리는 어떤 요청에서는 id값만 제약조건을 걸고, 어떤 요청에서는 모든 필드에 대한 제약조건을 걸고 싶었다.<br />
당연하게도(?) 제약조건에 대해 그룹핑을 할 수 있는 방법도 있었다!</p>

<hr />

<h2 id="validated">@Validated</h2>

<p><strong>제약조건에 대한 그룹을 만들어 적용</strong>시킬 수 있다.<br />
<strong>특정 Validation 그룹</strong>으로 검증하기 위해서는 Group 인터페이스를 생성하고 이 안에 그룹에 대한 인터페이스를 정의한다.</p>

<h4 id="request">Request</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Request</span> <span class="o">{</span>
    <span class="kd">interface</span> <span class="nc">id</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">interface</span> <span class="nc">allProperties</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이제 요청마다 <strong>id</strong>, or <strong>모든 필드</strong>에 대한 제약 조건을 검사하고 싶을 때를 나눠 그룹을 정의한다.</p>

<h4 id="productdto-1">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>속성 제약조건 어노테이션의 옵션 <strong>groups</strong>에 그룹을 지정해준다.</p>

<h4 id="productcontroller-1">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>
		
  	<span class="c1">// ...</span>
  
    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="cartitemcontroller">CartItemController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/carts"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CartItemController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CartItemController</span><span class="o">(</span><span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cartService</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">;</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addCartItem</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">,</span>
                                            <span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">.</span><span class="na">addCart</span><span class="o">(</span><span class="n">productDto</span><span class="o">.</span><span class="na">getProductId</span><span class="o">(),</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/{cartId}"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">buildAndExpand</span><span class="o">(</span><span class="n">newId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@RequestBody</code> 옆에 <code class="highlighter-rouge">@Validated</code>를 선언하고 괄호를 열어 원하는 그룹을 넣어준다.</p>

<hr />

<h2 id="컬렉션-valid-">컬렉션 @Valid ?</h2>

<h4 id="orderdetaildto">OrderDetailDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderDetailDto</span> <span class="o">{</span>

    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">cartId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderDetailDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>우리가 구현하다 문제가 된 부분은 바로 위와 같은 <code class="highlighter-rouge">OrderDetailDto</code> 의 컬렉션인 <code class="highlighter-rouge">List&lt;OrderDetailDto&gt; orderDetailRequestDtos</code>로 들어오는 값을 검증하고 싶었는데,  <br />
컬렉션에 속한 객체는 속성 제약 조건이 검증되지 않고 그냥 통과되어 버리는 것이었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/orders"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderController</span><span class="o">(</span><span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addOrder</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">,</span>
                                         <span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderDetailDto</span><span class="o">&gt;</span> <span class="n">orderDetailRequestDtos</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">.</span><span class="na">addOrder</span><span class="o">(</span><span class="n">orderDetailRequestDtos</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span>
                <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"/api/"</span> <span class="o">+</span> <span class="n">customerName</span> <span class="o">+</span> <span class="s">"/orders/"</span> <span class="o">+</span> <span class="n">orderId</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

   <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="왜">왜❓</h4>

<p>이유는<a href="https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service/35643761#35643761"><code class="highlighter-rouge">@Valid</code>는 JSR-303의 어노테이션이고 JSR-303은 JavaBeans에 적용되는데, List는 JavaBeans가 아니기 때문이라고 한다.</a><br />
우리는 Collection DTO를 감싸는 또다른 DTO 객체를 만들어야하나… 했으나,  클래스 단에 <code class="highlighter-rouge">@Validated</code> 을 붙여 해결할 수 있었다.</p>

<h3 id="예외">예외</h3>

<p>여기서 주의할 점이 있다. 바로 예외에 관한 부분인데,<br />
<strong><code class="highlighter-rouge">@Valid</code> 는 검증에 실패하면 <code class="highlighter-rouge">MethodArgumentNotValidException</code> 를 던지고, <br />
<code class="highlighter-rouge">@Validated </code>는 검증에 실패하면 <code class="highlighter-rouge">ConstraintViolationException</code> 를 던진다.</strong></p>

<p>지금으로써는 각 예외를 잡아서 핸들링 해주었다.</p>

<hr />

<p>근로하면서 Spring Validation이라는 것을 처음써봐서 여러 시도들을 해보았고, 덕분에 이런것도 있구나를 깨달을 수 있었다.<br />
특히 컬렉션에 대한 검증에서 왜이러지를 고민하며 이유를 찾아갔었고 덕분에 정말 많이 배웠다.<br />
사실 장바구니 API 구현에서 살짝 Spring Validation을 다룬거라 이에 대해 깊게 깨우치진 않았지만, 굉장히 좋은 학습이었다.<br />
아마 이 글은 미션을 진행하면서 점차 살이 붙을 것 같다.<br />
일단 지금은 이번에 경험한 내용을 정리하는데 의의를 둔다!</p>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://namocom.tistory.com/m/920">[spring] JSR-303 과 @Valid 과 @Validated</a></li>
  <li><a href="https://meetup.toast.com/posts/223">Validation 어디까지 해봤니?</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 @JsonProperty, @JsonNaming</title>
	  <link>//spring-json-property</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-json-property</guid>
	  <description><![CDATA[
	     <h4 id="이-글을-쓴-배경">이 글을 쓴 배경…</h4>

<p>클라이언트에서 HTTP Body에 Json을 실어 요청을 실어 보내고 이를 받는 DTO를 만들어 사용하고 있었다.<br />
하지만 API 명세로 클라이언트에서는 key 네이밍으로 스네이크 케이스를 사용하고,<br />
DTO 필드로는 스네이크 케이스를 사용하기 때문에 Jackson이 DTO에 제대로 매핑하지 못해 예외가 발생했다.</p>

<p>그래서 API 명세에서, 클라이언트가 key를 스네이크 케이스를 사용하여 보내주도록 바꾸려 하였으나,<br />
똑똑한 스프링은 이를 위한 어노테이션을 제공해주고 있었다.</p>

<h3 id="문제-상황-테스트">문제 상황 테스트</h3>

<h4 id="testdto">TestDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>스네이크 케이스</strong></li>
</ul>

<h4 id="test2dto">Test2Dto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2Dto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">test_id</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTest_id</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTest_id</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>카멜 케이스</strong></li>
</ul>

<h4 id="testcontroller">TestController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">TestDto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTestId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Test2Dto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTest_id</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 때 다음과 같은 테스트를 돌려본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">postTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
    <span class="c1">// given</span>
    <span class="n">Test2Dto</span> <span class="n">testDto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">);</span>
    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">().</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">testDto</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>

    <span class="c1">// then</span>
    <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
            <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.test_id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/66938519-c630-41fc-9fac-1899e6c1ab1d/image.png" style="zoom:80%;" /></p>

<p><strong>결과는 실패한다!</strong><br />
왜냐하면 클라이언트는 스네이크 케이스로 키 값을 보내고 응답에 대한 키 값도 <strong>스네이크 표기법</strong>이었는데,<br />
반환하는 DTO의 필드가 카멜 케이스이기 때문에 자동으로 키 값이 카멜 케이스로 잡히기 때문이다.</p>

<p>프론트에서는 스네이크 케이스가 컨벤션이고, 우리 자바에서는 카멜 케이스가 컨벤션인데…<br />
그럼 DTO의 필드를 스네이크로 바꿔야 하나? 혹은 요청의 키 값을 카멜로 바꿔야 하나?  🤷‍♀️</p>

<hr />

<h3 id="jsonproperty">@JsonProperty</h3>

<p>만능 스프링은 역시 이에 대한 어노테이션을 제공해준다.<br />
<code class="highlighter-rouge">@JsonProperty</code> 는 JSON 변환 시 key 이름을 우리가 원하는 대로 설정할 수 있게 해준다. <br />
이 어노테이션을 사용하기 위해서는 jackson 라이브러리를 사용하여야 하지만, 이미 스프링 내부에서는 jackson을 사용하고 있다.</p>

<p>사용하는 방법은 원하는 필드에 해당 어노테이션을 달고, 매핑할 key 이름을 옵션으로 준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">"test_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/8f93201e-e222-4c63-b5cf-16802205b7d5/image.png" style="zoom:80%;" /></p>

<p><strong>이렇게 되면 테스트 성공이다!</strong></p>

<p>그러면 필드 하나하나에 이렇게 매핑해주어야하나…?</p>

<hr />

<h3 id="jsonnaming">@JsonNaming</h3>

<p>다행히도 이런 중복되는 작업을 스프링 어노테이션으로 해결할 수 있다.<br />
클래스에 <code class="highlighter-rouge">@JsonNaming</code> 을 붙이면 모든 필드에 대한 표기법 매핑을 정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.PropertyNamingStrategy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.annotation.JsonNaming</span><span class="o">;</span>

<span class="nd">@JsonNaming</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">PropertyNamingStrategy</span><span class="o">.</span><span class="na">SnakeCaseStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/97f9d5b2-14ce-4015-a656-4d697fee1567/image.png" style="zoom:80%;" /></p>

<p>참고로 표기법 전략은 <code class="highlighter-rouge">SnakeCaseStrategy</code> 말고도 다양하다!</p>

<h4 id="전역적으로-설정하고-싶어">전역적으로 설정하고 싶어!</h4>

<p><strong>application.properties</strong> 에서 다음과 같이 애플리케이션 설정으로 둘 수도 있다.<br />
이러면 각각의 클래스에 어노테이션을 달아주지 않아도 모든 키 매핑에 대한 처리가 가능하다!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spring</span><span class="o">.</span><span class="na">jackson</span><span class="o">.</span><span class="na">property</span><span class="o">-</span><span class="n">naming</span><span class="o">-</span><span class="n">strategy</span><span class="o">=</span><span class="n">SNAKE_CASE</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC 강의 노트 -1</title>
	  <link>//spring-mvc-1</link>
	  <author></author>
	  <pubDate>2021-04-27T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-1</guid>
	  <description><![CDATA[
	     <h3 id="웹서버">웹서버</h3>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>정적 리소스 제공, 기타 부가기능</li>
  <li>정적 파일인 HTML, CSS, JS, 이미지, 영상</li>
  <li>ex) NGINX, 아파치</li>
</ul>

<h4 id="웹-애플리케이션-서버">웹 애플리케이션 서버</h4>

<ul>
  <li>HTTP 기반으로 동작</li>
  <li>웹 서버 기능 포함 + (정적 리소스 제공 가능)</li>
  <li>프로그램 코드를 실행해서 애플리케이션 로직 수행
    <ul>
      <li>동적 HTML. REST API</li>
      <li>JSP, 스프링 MVC, 서블릿</li>
      <li>톰캣 등..</li>
    </ul>
  </li>
</ul>

<h3 id="웹-서버-vs-웹-애플리케이션-서버">웹 서버 vs 웹 애플리케이션 서버</h3>

<ul>
  <li>웹 서버는 정적 데이터를 담당하고 애플리케이션 서버는 동적 데이터를 담당한다.</li>
  <li>사실 둘의 용어의 경계도 모호함
    <ul>
      <li>웹 서버도 프로그램을 실행하는 기능을 포함하기도 함</li>
      <li>웹 애플리케이션 서버도 웹 서버의 기능을 제공함</li>
    </ul>
  </li>
  <li>자바에서는 서블릿 컨테이너 기능을 제공하면 웹 애플리케이션 서버다.</li>
</ul>

<h3 id="웹-시스템-구성">웹 시스템 구성</h3>

<h4 id="was--db">WAS + DB</h4>

<p>WAS는 정적 리소스, 애플리케이션 로직 모두 제공 가능하기 때문에 WAS, DB만으로 웹 시스템 구성이 가능하지만, 이럴 경우 WAS가 너무 많은 역할을 담당하여 서버 과부하가 올 수 있다.</p>

<h4 id="web--was--db">WEB + WAS + DB</h4>

<p>정적 리소스만 제공하는 웹서버는 잘 죽지 않는다. WAS는 비즈니스 로직을 처리하다가 에러가 날 수 있는데 이를 웹 서버가 오류 화면을 보여준다. 웹 서버와 애플리케이션 서버가 분리되어서 가능했던 일!</p>

<hr />

<h2 id="서블릿">서블릿</h2>

<p>만약 웹 애플리케이션 서버를 싹 다 구현해야 한다면…<br />
나는 비즈니스 로직을 실행하고 싶은데, HTTP 메시지를 싹 다 읽어야한다.</p>

<p>여기서 서블릿을 지원하는 WAS를 사용하면 비즈니스 로직에만 집중할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"helloServlet"</span><span class="o">,</span> <span class="n">urlPattern</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
	<span class="c1">// 애플리케이션 로직</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>해당 URL이 호출되면 서블릿 코드가 실행된다.</li>
  <li>HTTP 요청과 응답 정보를 편리하게 사용할 수 있는 서블릿을 제공한다.</li>
  <li>개발자는 HTTP 스펙을 매우 편리하게 제공</li>
</ul>

<h3 id="http-요청-시-서블릿의-흐름">HTTP 요청 시 서블릿의 흐름</h3>

<ul>
  <li>WAS는 요청, 응답 객체를 새로 만들어서 서블릿 객체를 호출한다.</li>
  <li>개발자는 요청 객체에서 HTTP 요청 정보를 편리하게 꺼내서 사용한다.</li>
  <li>개발자는 응답 객체에 HTTP 응답 정보를 편리하게 입력한다.</li>
  <li>WAS는 응답 객체에 담겨있는 내용으로 HTTP 응답 정보를 생성한다.</li>
</ul>

<h3 id="서블릿-컨테이너">서블릿 컨테이너</h3>

<ul>
  <li>WAS 안에 존재한다.</li>
  <li>서블릿 컨테이너는 서블릿 생명 주기를 관리한다.</li>
  <li>서블릿 객체는 싱글톤으로 관리한다. (때문에 공유 변수 사용 주의)</li>
  <li>JSP도 서블릿으로 변환되어 사용</li>
  <li>최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용</li>
  <li>동시 요청을 위한 멀티 스레드 처리를 지원한다.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 배포 인프라 강의 1 - Public Cloud, 통신 확인하기</title>
	  <link>//serve1</link>
	  <author></author>
	  <pubDate>2021-04-27T19:18:00+09:00</pubDate>
	  <guid>//serve1</guid>
	  <description><![CDATA[
	     <h2 id="public-cloud란">Public Cloud란?</h2>

<h4 id="cloud">Cloud</h4>

<p>클라우드는 인터넷을 은유적으로 표현하는 말. 어디에든 있고 어떤 형태로든 변할 수 있다. 정확히는 인터넷을 통해 원격으로 접근할 수 있는 모든 것을 의미한다. (메일, 드라이브 등)</p>

<h4 id="cloud-computing">Cloud Computing?</h4>

<p>서버, 데이터베이스, 네트워킹 등 컴퓨팅 리소스를 인터넷을 통해 관리하는 것</p>

<h3 id="클라우드를-사용하는-이유">클라우드를 사용하는 이유?</h3>

<h4 id="관심사의-분리">관심사의 분리</h4>

<p>서비스를 만들려고 할 때 서비스의 본질에 대해 집중을 하기 위해서 사용한다.<br />
우리의 서비스는 저장소에 있는 데이터를 서버에서 원하는 형태로 가공해 네트워크를 통해 사용자에게 전달한다.<br />
우리는 데이터, 서버, 네트워크를 어떻게 관리할지만 관심을 두었다.<br />
그렇다면 실제 서비스 할때를 생각해보자.</p>

<h4 id="서비스할-경우-고려할-점">서비스할 경우 고려할 점</h4>

<ul>
  <li>데이터를 어떻게 관리할 것인가</li>
  <li>서버를 어떻게 관리할 것인가</li>
  <li>네트워크를 어떻게 관리할 것인가</li>
</ul>

<p>이러한 고민들은 <strong>Cloud</strong> 제공 업체가 해준다.<br />
클라우드를 사용한다는 것은 단순히 컴퓨팅 리소스를 인터넷을 통해 관리하는 것만을 의미하지 않는다.<br />
관심사를 분리하여 우리가 집중할 대상에 더 집중하기 위함이다.</p>

<hr />

<h2 id="통신-확인하기">통신 확인하기</h2>

<ul>
  <li><strong>노드</strong> : IP를 가지고 통신할 수 있는 대상</li>
  <li>하나의 프로그램을 실행하면 PID를 할당해서 실행시킨다 = 프로그램이 메모리에 띄워져서 동작하는 상태</li>
</ul>

<h3 id="osi-7-계층">OSI 7 계층</h3>

<h4 id="1계층---physical-layer물리-계층">1계층 - Physical Layer(물리 계층)</h4>

<ul>
  <li>0과 1의 나열을 주고 받을 수 있게 해주는 모듈</li>
</ul>

<h4 id="2계층---data-link-layer데이터-링크-계층">2계층 - Data Link Layer(데이터 링크 계층)</h4>

<ul>
  <li>같은 네트워크에 있는 여러 대의 컴퓨터들이 데이터를 주고 받기 위해 필요한 모듈</li>
  <li>물리적 주소를 이용해 노드 간 연결</li>
  <li>Framing 작업이 여기에 속한다.</li>
  <li>대표 장비 : 브릿지, L2 스위치</li>
</ul>

<h4 id="3계층---network-layer네트워크-계층">3계층 - Network Layer(네트워크 계층)</h4>

<ul>
  <li>수많은 네트워크 연결로 이뤄진 inter-network 속에서 목적지 컴퓨터로 데이터를 전송하기 위해 IP 주소로 길을 찾고(routing)</li>
  <li>자신의 다음 라우터에게 데이터를 넘겨주는 것(forwording)</li>
  <li>논리적 주소로 최초 출발지부터 최종 목적지까지의 최적 경로 결정</li>
  <li>대표 장비 : 라우터, L3 스위치 등</li>
  <li>프로토콜 : IPv4</li>
</ul>

<h4 id="4계층---transport-layer전송-계층">4계층 - Transport Layer(전송 계층)</h4>

<ul>
  <li>포트 번호를 통해 서비스를 구분하고 데이터 전송을 담당</li>
  <li>대표 장비 : L4 스위치 등</li>
  <li>프로토콜 : TCP</li>
</ul>

<h4 id="5계층---session-layer세션-계층">5계층 - Session Layer(세션 계층)</h4>

<ul>
  <li>응용 프로그램 간 세션 수립, 유지, 종료</li>
</ul>

<h4 id="6계층---presentation-layer표현-계층">6계층 - Presentation Layer(표현 계층)</h4>

<ul>
  <li>데이터의 표현(확장자 연결, 압축, 암호화, 변환)</li>
</ul>

<h4 id="7계층---application-layer응용-계층">7계층 - Application Layer(응용 계층)</h4>

<ul>
  <li>사용자에게 인터페이스 제공, 원본 데이터 생성</li>
  <li>프로토콜 :  HTTP, SSH 등…</li>
</ul>

<h3 id="네트워크-체크">네트워크 체크</h3>

<h4 id="1-ping-체크">1. Ping 체크</h4>

<p>IP 정보만으로 서버에 요청이 가능한지 확인한다. <br />
ICMP란 프로토콜을 사용하는데, 이는 IP가 신뢰성을 보장하지 않아 에러에 대처할 수 없는 문제점에 대해 오류 정보 발견 및 보고를 담당한다.<br />
TCP가 아니라 Port 번호가 없다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ping [대상 IP]
</code></pre></div></div>

<ul>
  <li>RTT(Round Trip Time) : 한 패킷이 왕복한 시간을 의미. 네트워크 시간은 연결 시간, 요청 시간, 응답 시간 등으로 구성됩니다. RTT가 높을 경우 어느 구간에서 오래 걸리는지 확인해야한다.</li>
</ul>

<p><strong>🤔 IP 정보로 통신할 때, 실제 서버 위치를 아는 법?</strong></p>

<p><strong>ARP(Address Resolution Protocol)</strong> : 논리적 주소인 IP주소 정보를 이용하여 물리적 주소인 MAC 주소를 알아와 통신이 가능하게 도와주는 프로토콜로, ARP Request를 Braodcast로 요청하면 수신한 장비들 중 자신의 IP에 해당하는 장비가 응답을 한다. 응답받은 NIC 포트 정보와 IP, MAC 주소를 기반으로 이후 통신을 진행한다.</p>

<h4 id="2-port-체크">2. Port 체크</h4>

<p>서비스의 정상 구동 여부를 확인할 수 있다.<br />
포트가 띄워졌다는 것은 그 애플리케이션을 사용할 수 있다는 것이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ telnet [Target Server IP] [Target Service Port]
</code></pre></div></div>

<p>하나의 포트 번호를 오픈해두고도 많은 사용자와 연결할 수 있다.</p>

<h4 id="소켓">소켓</h4>

<p>소켓은 소프트웨어로 작성된 통신 접속점으로, 네트워크 응용프로그램은 소켓을 통해 통신망으로 데이터를 송수신한다.<br />
소켓은 응용 프로그램에서 TCP/IP를 이용하는 창구 역할을 한다.<br />
(포트번호는 TCP/IP가 지원하는 상위 계층의 프로세스를 구분하기 위한 번호이므로 하나의 컴퓨터내에 있는 응용 프로세스들은 반드시 서로 다른 포트번호를 사용하여야 한다.)</p>

<p>소켓을 이용한 프로그램에서 상대방과 IP 패킷을 주고 받기 위해서는 5가지 정보가 정해져야 한다.</p>

<ul>
  <li>통신에 사용할 프로토콜</li>
  <li>자신의 IP 주소</li>
  <li>자신의 포트번호</li>
  <li>상대방의 IP 주소</li>
  <li>상대방의 포트번호</li>
</ul>

<h4 id="3-http-response-체크">3. HTTP Response 체크</h4>

<p>상태 코드를 기반으로 상세하게 이상유무를 판단할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -I google.com
</code></pre></div></div>

<h4 id="4-패킷-분석">4. 패킷 분석</h4>

<p>tcpdump, <a href="https://www.wireshark.org/download.html">wireshark</a> 등의 도구를 사용하여 패킷을 모니터링할 수 있다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 REST API에 대하여</title>
	  <link>//restapi</link>
	  <author></author>
	  <pubDate>2021-04-21T19:18:00+09:00</pubDate>
	  <guid>//restapi</guid>
	  <description><![CDATA[
	     <h2 id="rest-api-구성">REST API 구성</h2>

<p>REST : Representational State Transfer라는 용어의 약자</p>

<ul>
  <li><strong>자원</strong> : URI</li>
  <li><strong>행위</strong> : HTTP METHOD</li>
  <li><strong>표현</strong></li>
</ul>

<hr />

<h2 id="rest-의-특징">REST 의 특징</h2>

<ul>
  <li>Uniform Interface</li>
  <li>Stateless</li>
  <li>Caching</li>
  <li>Client-Server</li>
  <li>Hierarchical system</li>
  <li>Code on demand</li>
</ul>

<hr />

<h2 id="rest-api-디자인-가이드">REST API 디자인 가이드</h2>

<p><strong>URI는 자원을 표현하는데 집중하고 행위에 대한 정의는 HTTP 메소드를 통해 나타낸다.</strong></p>

<ul>
  <li>URI는 정보의 자원을 표현해야 한다 : 리소스명은 동사보다 명사를 사용한다.</li>
  <li>자원에 대한 행위는 HTTP 메소드로 표현한다.</li>
</ul>

<p><strong>URI 설계 시 주의 사항</strong></p>

<ul>
  <li>슬래시 (/)는 계층 관계를 나타내는 데 사용한다.</li>
  <li>마지막 문자로 슬래시를 포함하지 않는다.</li>
  <li>긴 URL 경로의 가독성을 높이기 위해서 하이픈(-)을 사용한다.</li>
  <li>밑줄(_)은 URL에 사용하지 않는다.</li>
  <li>URL은 소문자를 사용한다.</li>
  <li>파일 확장자는 URI에 포함시키지 않는다.</li>
</ul>

<p><strong>리소스 간의 관계를 표현하는 방법</strong></p>

<ul>
  <li><code class="highlighter-rouge">/리소스명/리소스 ID/관계가 있는 다른 리소스명</code></li>
  <li>관계명이 복잡할 경우 서브 리소스에 명시적으로 표현한다. ex) <code class="highlighter-rouge">GET : /users/{userid}/likes/devices</code></li>
</ul>

<p><strong>Colllection과 Document</strong></p>

<ul>
  <li><strong>Colllection</strong> : 문서들의 집합, 객체들의 집합. 복수로 사용한다.</li>
  <li><strong>Document</strong> : 단순한 문서 혹은 한 객체</li>
</ul>

<hr />

<h2 id="http-응답-상태-코드">HTTP 응답 상태 코드</h2>

<p><strong>200</strong></p>

<ul>
  <li>200 : 클라이언트의 요청을 정상적으로 수행함</li>
  <li>201 : 클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨(POST를 통한 리소스 생성 작업 시)</li>
</ul>

<p><strong>400</strong></p>

<ul>
  <li>400 : 클라이언트의 요청이 부적절 할 경우 사용하는 응답 코드</li>
  <li>401 : 클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용하는 응답 코드</li>
  <li>403 : 유저 인증상태와 관계 없이 응답하고 싶지 않은 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드</li>
  <li>404 : 서버가 요청한 페이지(Resource)를 찾을 수 없을 경우 사용하는 응답 코드</li>
</ul>

<p><strong>ect</strong></p>

<ul>
  <li>301 : 클라이언트가 요청한 리소스에 대한 URI가 변경 되었을 때 사용하는 응답 코드</li>
  <li>500 : 서버에 문제가 있을 경우 사용하는 응답 코드</li>
</ul>

<h3 id="-잘못된-데이터로-요청하여-db오류가-발생할-시-어떤-상태코드를-돌려주어야-하나">❓ 잘못된 데이터로 요청하여 DB오류가 발생할 시 어떤 상태코드를 돌려주어야 하나?</h3>

<p>한 크루가 서버에서 SQLException이 발생할 경우 이를 클라이언트에 알려야 하나,<br />
또는 어떤 상태코드를 주어야 하나에 대해 이야기해보았다.</p>

<p>일단 결론은 잘못된 데이터로 결과 값을 가져올 수 없는 경우, 서버에러가 아닌 때에 따라 적절한  상태코드를 돌려준다.<br />
<a href="https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design">웹 API 디자인</a>을 참고하였다.</p>

<h4 id="post---잘못된-데이터-추가-요청일-경우-400">POST - 잘못된 데이터 추가 요청일 경우 400</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/5568ef22-9fa1-44b5-a44f-124fb75714f0/image.png" style="zoom:50%;" /></p>

<h4 id="put---데이터-수정이-실패한-경우-409">PUT - 데이터 수정이 실패한 경우 409</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/92848e22-2348-41c9-acdc-95ab25ad6401/image.png" style="zoom: 67%;" /></p>

<p>서버에서 처리하고 상태코드를 보낼 때 정해진 약속을 생각해보고 적절한 상태코드를 보내어 클라이언트가 요청에 대한 결과를 정확히 알 수 있도록 하자!</p>

<hr />

<h3 id="api-설계에-대한-정해진-규약">API 설계에 대한 정해진 규약?</h3>

<ul>
  <li>API를 활용하는 사람들과 충분한 논의 후 결정하기</li>
  <li>많은 사람들의 공감</li>
  <li>RFC 문서나 많은 사람들 사용하는 API설계 활용</li>
</ul>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://meetup.toast.com/posts/92">REST API 제대로 알고 사용하기 : NHN Cloud Meetup</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring Core 막 적은 강의 노트</title>
	  <link>//spring-core-lecture</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//spring-core-lecture</guid>
	  <description><![CDATA[
	     <p>객체의 의존 관리는 스프링이 한다.<br />
스프링은 개발자를 대신해서 객체들을 생성하고 관리하는 일을 한다.</p>

<h3 id="chessservice에서-chessdao-의존하기">ChessService에서 ChessDao 의존하기</h3>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420104423745.png" alt="image-20210420104423745" /></p>

<p>변경에 취약하다</p>

<p>의존 관계를 개발자가 직접 관리하려면 복잡하다.<br />
스프링 컨테이너가 관리해준다.</p>

<h3 id="컨테이너">컨테이너</h3>

<p>담아놓는 용기<br />
스프링에서는 스프링이 활용할 객체들을 담아놓은 용기를 말한다.</p>

<h3 id="bean으로-등록하는-기준">Bean으로 등록하는 기준?</h3>

<p>프로그램 별로 공통적으로 쓸 수 있는 대상 
레이어에 대한 객체들을 재사용할 수 있는데 이들을 빈으로 관리한다.<br />
상태가 없는 객체를 빈으로 등록한다.  -&gt; 빈으로 등록 하려면 상태가 없어야 한다.</p>

<p>설정의 메타 데이터(Configuration Metadata)를 이용해 스프링 컨테이너에 담아놓는다.<br />
컨테이너에 담으면 빈으로 등록된다.</p>

<h3 id="스프링이-객체를-관리하게-하려면">스프링이 객체를 관리하게 하려면</h3>

<ul>
  <li>객체 관리 대상 알려주기</li>
  <li>객체들 간의 의존성 정의하기</li>
</ul>

<h3 id="컨테이너-설정-방법---빈-등록-방법">컨테이너 설정 방법 - 빈 등록 방법</h3>

<p>@ComponentScan : 등록할 빈을 스캔할 classpath를 지정 (@SpringBootApplication 내부에 속해있는 애너테이션)</p>

<p>@Component : ComponentScan 클래스 하위에 특정 애너테이션이 붙은 클래스를 스프링 빈으로 지정</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420110038067.png" alt="image-20210420110038067" /></p>

<h3 id="의존성-주입">의존성 주입</h3>

<h4 id="생성자-주입without-스프링-컨테이너">생성자 주입(without 스프링 컨테이너)</h4>

<h4 id="수정자-주입without-스프링-컨테이너">수정자 주입(without 스프링 컨테이너)</h4>

<p>필드를 통해 주입할 수도 있다.<br />
스프링에서는 XML, 어노테이션, 자바 클래스를 통해 의존성을 주입할 수 있다.</p>

<p>@Autowired를 붙여준다. 생성자 매개변수의 값이 필요하구나를 알 수 있다.</p>

<p>특정 컴포넌트 어노테이션을 붙인다고 해서 특정 의미가 부여되는 것은 아니고,</p>

<p>Repository는 도메인 객체의 생명주기를 관리하며 Public Operation을 제공합니다. 이에 Domain Layer에 해당합니다. 도메인 모델과 생애주기가 같기 때문이죠. 
실제 구현체인 SimpleJpaRepository는 Infrastructure Layer에 해당합니다. 
이렇게 추상에 의존하고 구체에 의존하지 않도록 구성함으로써(DIP) 유연성있는 시스템을 구성할 수 있습니다.
반면, DAO는 CRUD와 1:1로 매칭되어 Persistence Operation을 적극적으로 드러냅니다.
즉, repository는 도메인 모델의 일부로 보며 추상인 반면, dao는 추상이 필수는 아니라고 생각합니다.</p>

<blockquote>
  <p>http://egloos.zum.com/aeternum/v/1160846</p>
</blockquote>

<blockquote>
  <p>https://stackoverflow.com/questions/8550124/what-is-the-difference-between-dao-and-repository-patterns</p>
</blockquote>

<p>빈은 기본적으로 싱글턴 스코프</p>

<p>컨테이너는 개념적인 것 컨텍스트는 객체의 일원</p>

<p>갠적으로 어노테이션은 막붙이기 좋고(빠르게 개발하기)
xml에 명시하면 일률적으로 내가 어떻게 관리하고 있는지 눈에 들어와서 좋았습니다.</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420114253606.png" alt="image-20210420114253606" /></p>

<h3 id="서비스-레이어는-어떤-역할을-할까요">서비스 레이어는 어떤 역할을 할까요?</h3>

<p>도메인 로직들의 순서를 보장하면서, 서비스 트랜잭션 관리를 한다.<br />
객체들의 비지니스 플로우를 관리해준다.<br />
비지니스 로직은 도메인으로!</p>

<h3 id="pojo">Pojo</h3>

<p>스프링에서 스프링 빈으로 관리하고 싶은 객체<br />
스프링 설정이 가해지기 전 상태의 객체를 POJO라고 한다.</p>

<p>포조는 순수한 자바 객체를 의미</p>

<p>Java Bean :</p>

<p>자바빈은 포조라고 할 수 있지만 포조는 자바빈이라고 하긴 애매하다.</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420120440979.png" alt="image-20210420120440979" /></p>

<p>뷰 컨트롤러를 분리했다고 보면 됨 그런 차원에서 의미가 있따.</p>

<p>맞아유 config가 코드 양이 좀 더 짧은 거 같아서 더 좋은 거 같아여! 어차피 configuration은 대부분 만들어 놓으니 다른 클래스 안만들어도 되구!</p>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 스프링의 DI 방법 (생성자 주입 VS 필드 주입)</title>
	  <link>//responsebody</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//responsebody</guid>
	  <description><![CDATA[
	     <h2 id="스프링의-di-방법">스프링의 DI 방법</h2>

<h3 id="di">DI</h3>

<h4 id="강한-결합">강한 결합</h4>

<p>객체 내부에서 다른 객체를 생성할 경우, 강한 결합도를 가지고 있다고 말한다.<br />
A 클래스에서 B라는 객체를 직접 생성하다가, B 객체를 C 객체로 바꾸고 싶을 때 A 클래스도 수정해야하기 때문이다.</p>

<h4 id="느슨한-결합">느슨한 결합</h4>

<p>외부에서 생성된 객체를 인터페이스를 통해 넘겨받아 결합도를 낮춘 것을 느슨한 결합이라고 한다.<br />
런타임시에 의존 관계가 결정되기 때문에 유연한 구조를 가진다.</p>

<h3 id="1-생성자-주입constructor-injection">1. 생성자 주입(Constructor Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationConstructorService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StationConstructorService</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스프링 4.3 부터는 단일 생성자인 경우 생성자에 <code class="highlighter-rouge">@Authowired</code>를 붙이지 않아도 된다.</p>

<h3 id="2-필드-주입field-injection">2. 필드 주입(Field Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationFieldService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>필드에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="3-수정자-주입setter-injection">3. 수정자 주입(Setter Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationSetterService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStationRepository</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>setter를 통해 의존성을 주입하는 방법으로 setter에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="필드-주입대신-생성자-주입을-권고하는-이유">필드 주입대신 생성자 주입을 권고하는 이유</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/c301577d-d47d-4254-ae0c-0419ce315106/image.png" style="zoom:67%;" /></p>

<p>인텔리제이에서 필드 주입을 사용할 경우 생성자 주입으로 변경할 것을 권고한다.<br />
그 이유는 무엇일까?</p>

<h4 id="순환-참조를-방지할-수-있다">순환 참조를 방지할 수 있다.</h4>

<p>극단적인 예로 객체 A가 객체 B를 참조하고, 다시 객체 B가 객체 A를 참조한다고 하자.</p>

<p>먼저 <strong>필드 주입</strong>의 경우 순환 참조에서 어떤 문제를 일으키는지 보겠다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GameService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">PieceService</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PieceService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>테스트</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4bd9b5b9-a0a7-44e7-9931-3b9acebede2d/image.png" style="zoom:67%;" /></p>

<p>위와 같이 간단한 테스를 해보았을 때, 애플리케이션 구동은 잘 되지만 서로의 메소드를 계속해서 호출하고 있기 때문에 <code class="highlighter-rouge">StackOverflowError</code> 가 발생한다.<br />
어쨌든 순환 참조가 일어났음에도 스프링 컨테이너가 동작하는 애플리케이션 자체는 문제없이 구동된다.</p>

<p>그렇다면 생성자 주입의 경우는 어떠할까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GameServiceImpl</span><span class="o">(</span><span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pieceService</span> <span class="o">=</span> <span class="n">pieceService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PieceServiceImpl</span><span class="o">(</span><span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gameServiceImpl</span> <span class="o">=</span> <span class="n">gameServiceImpl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/cfb25981-3055-4aef-9b36-568e12ad4760/image.png" style="zoom:67%;" /></p>

<p>로그로 순환참조가 일어나고 있음을 보여주면서 컨테이너가 빈들을 등록하지도 못한채, 애플리케이션 구동 자체도 실패하였다.</p>

<p>여기서 이런 차이점을 보이는 이유는 필드 주입과 생성자 주입은 빈을 주입하는 순서에 차이가 있기 때문이다.</p>

<p><strong>필드 주입</strong>은 빈을 생성 후 어노테이션이 붙은 필드에 해당하는 빈을 찾아서 주입한다.<br />
빈 생성이 먼저 일어나고, 필드에 대한 주입을 수행하는 것이다.</p>

<p><strong>생성자 주입</strong>은 생성자로 객체를 생성하는 시점에 필요한 빈을 주입한다.<br />
먼저 빈을 생성하지 않고, 생성자의 인자에 사용되는 빈을 찾거나 빈 팩터리에서 만드는 순서이다.</p>

<p>때문에 객체 생성 시점에 빈을 주입하는 생성자 주입은 순환 참조에 대한 오류를 겪을 수 있다.<br />
순환된 참조 관계를 가지는 객체들이 생성되지 않은 시점에서 빈을 참조하기 때문이다.<br />
이렇게 보면 어찌됐든 애플리케이션을 구동 시키는 필드 주입이 더 좋다고 생각할 수 있다.</p>

<p>하지만 객체의 순환 참조가 일어난다는 것은 애초에 잘못된 설계라고 할 수 있다.<br />
때문에 <strong>오히려 생성자 주입을 사용하여 순환 참조가 되는 설계를 막을 수 있도록 하자.</strong></p>

<h3 id="테스트-코드-작성에-용이">테스트 코드 작성에 용이</h3>

<p>만약 필드 주입을 사용해 작성된 클래스라면, 스프링같은 DI 프레임 워크 위에서 동작하지 않는 단위 테스트에서 의존 관계를 가지는 객체를 생성해서 주입할 수 있는 방법이 없다.<br />
외부에 노출 된 정보가 없기 때문에 스프링 컨테이너가 생성해서 주입해주는 방식으로는 의존 관계를 가지고 있는 메소드를 단위 테스트 할 경우 <code class="highlighter-rouge">NullPointerException</code> 이 발생한다.<br />
하지만 생성자 주입 방식의 경우 테스트 코드를 작성할 때 원하는 구현체를 생성자에 넘겨주면 되기 때문에 테스트에 더 용이하다고 할 수 있다.</p>

<h3 id="immutable">Immutable</h3>

<p>필드 주입과 수정자 주입은 해당 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 없다.<br />
즉 가변 객체로만 사용이 가능한 것이다.</p>

<p>하지만 생성자 주입은 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 있다.<br />
이로 인해 가변 객체로 인해 발생할 수 있는 오류를 사전에 막는다.</p>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/">스프링 - 생성자 주입을 사용해야 하는 이유, 필드인젝션이 좋지 않은 이유</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 Spring에서 request 처리 과정</title>
	  <link>//request</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//request</guid>
	  <description><![CDATA[
	     <h2 id="spring에서-request-처리-과정">Spring에서 request 처리 과정</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2caaa9e-bde3-4b10-9e44-8a5a8629c200/image.png" style="zoom:50%;" /></p>

<ul>
  <li><strong>DispatcherServlet</strong> : 클라이언트의 요청을 전달 받아 요청에 맞는 컨트롤러가 반환한 결과값을 View에 전달하여 알맞은 응답 생성</li>
  <li><strong>HandlerMapping</strong> : 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정</li>
  <li><strong>Controller</strong> : 클라이언트의 요청을 처리한 뒤, 결과를 DispatcherServlet에 반환</li>
  <li><strong>ModelAndView</strong> : 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담음</li>
  <li><strong>ViewResolver</strong> : 컨트롤러의 처리 결과를 생성할 뷰를 결정</li>
  <li><strong>View</strong> : 컨트롤러의 처리 결과 화면을 생성, JSP 또는 템플릿 엔진을 뷰로 사용</li>
</ul>

<ol>
  <li>클라이언트가 서버에 요청을 하면 <strong>DispatcherServlet</strong>이 요청을 가로챈다.</li>
  <li>요청을 가로챈 <strong>DispatcherServlet</strong>은 HandlerMapping에게 어떤 컨트롤러에게 요청을 위임하면 좋을지 물어본다. <br />
(HandlerMapping은 <code class="highlighter-rouge">@Controller</code>로 등록한 것들을 스캔해서 찾아 놓았다.)</li>
  <li>요청에 매핑된 <strong>Controller</strong>가 있다면 @RequestMapping을 통하여 요청을 처리할 메서드에 도달한다.  <br />
(이는 HandlerAdapter가 책임진다.)</li>
  <li><strong>Controller</strong>에서는 해당 요청을 처리할 Service에게 비즈니스 로직을 위임한다.</li>
  <li><strong>Service</strong>에서는 DB 접근이 필요할 경우 DB 처리를 DAO에게 위임한다.</li>
  <li><strong>DAO</strong>는 데이터 정보를 받아 Service에게 돌려준다.<br />
(결과로 받은 Entity 객체를 가지고 Response에 필요한 <strong>DTO</strong> 객체로 변환한다.)</li>
  <li>모든 비즈니스 로직을 끝낸 <strong>Service</strong>가 결과물을 <strong>Controller</strong>에 넘긴다.</li>
  <li>결과물을 받은 <strong>Controller</strong>는 필요에 따라 Model 객체에 결과물을 넣거나, View 정보를 담아 <strong>DispatcherServlet</strong>에게 보낸다.</li>
  <li><strong>DispatcherServlet</strong>은 <strong>ViewResolver</strong>에게 받은 뷰에 대한 정보를 넘긴다.</li>
  <li><strong>ViewResolver</strong>는 해당 View를 찾아 <strong>DispatcherServlet</strong>에게 알려준다.<br />
(serffix, prefix를 붙여주는 것도 ViewResolver에서 수행한다.)</li>
  <li><strong>DispatcherServlet</strong>은 응답할 View에게 Render를 지시하고 <strong>View</strong>는 응답 로직을 처리한다.</li>
  <li><strong>DispatcherServlet</strong>이 클라이언트에게 렌더링된 View를 응답한다.</li>
</ol>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://jeong-pro.tistory.com/96">Spring MVC 구조의 처리 과정을 설명해보시오. (MVC process)</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 통합 테스트 VS 단위 테스트</title>
	  <link>//unit-test-vs</link>
	  <author></author>
	  <pubDate>2021-04-16T19:18:00+09:00</pubDate>
	  <guid>//unit-test-vs</guid>
	  <description><![CDATA[
	     <h2 id="통합-테스트">통합 테스트</h2>

<p>실제 운영 환경에서 사용될 클래스들을 통합하여 테스트한다.<br />
기능 검증이 아닌 스프링 프레임워크에서 전체적으로 플로우가 제대로 동작하는지 검증하기 위해 사용한다.</p>

<h4 id="장점">장점</h4>

<ul>
  <li>스프링 부트 컨테이너를 띄워 테스트하기 때문에 운영환경과 가장 유사한 테스트가 가능하다.</li>
  <li>전체적인 Flow를 쉽게 테스트 할 수 있다.</li>
</ul>

<h4 id="단점">단점</h4>

<ul>
  <li>애플리케이션의 설정, 모든 Bean을 로드하기 때문에 시간이 오래걸리고 무겁다.</li>
  <li>테스트 단위가 커 디버깅이 어렵다.</li>
</ul>

<h3 id="springboottest"><strong>@SpringBootTest</strong></h3>

<ul>
  <li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@Transactional</span>
<span class="kd">class</span> <span class="nc">ChessServiceImplTest</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="springboottest-의-파라미터들">@SpringBootTest 의 파라미터들</h4>

<ul>
  <li><strong>value</strong>: 테스트가 실행되기 전에 적용할 프로퍼티 주입.(기존의 프로퍼티 오버라이드)</li>
  <li><strong>properties</strong> : 테스트가 실행되기 전에 {key=value} 형식으로 프로퍼티 추가.</li>
  <li><strong>classes</strong> : ApplicationContext에 로드할 클래스 지정. (지정하지 않으면 @SpringBootConfiguration을 찾아서 로드)</li>
  <li><strong>webEnvironment</strong> : 어플리케이션이 실행될 때의 웹 환경을 설정. (기본값은 Mock 서블릿을 로드하여 구동)</li>
</ul>

<p><strong>➕ webEnvironment</strong></p>

<ul>
  <li><strong>MOCK</strong> : <code class="highlighter-rouge">ServletContainer</code>를 테스트용으로 띄우지않고 서블릿을 mocking 한 것이 동작한다. (내장 톰캣이 구동되지 않는다.) <br />
MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스테 사용을 용이하게 해주는 라이브러리</li>
  <li><strong>RANDOM_PORT</strong> : 임의의 Port Listener. EmbeddedWebApplicationContext를 로드하며 실제 서블릿 환경을 구성</li>
</ul>

<h4 id="activeprofiles">@ActiveProfiles</h4>

<p>원하는 프로파일 환경 값 설정이 가능하다. (프로파일 전략)</p>

<h4 id="transactional">@Transactional</h4>

<p>테스트 완료 후 자동으로 Rollback 처리가 된다. <br />
하지만 <code class="highlighter-rouge">WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>를 사용하면 실제 테스트 서버는 별도의 스레드에서 테스트를 수행하기 떄문에 트랜잭션이 롤백되지 않는다. (왜?)</p>

<hr />

<h2 id="단위-테스트">단위 테스트</h2>

<h4 id="장점-1">장점</h4>

<ul>
  <li>WebApplication 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르다.</li>
  <li>통합 테스트를 진행하기 어려운 테스트를 진행 가능하다.</li>
</ul>

<h4 id="단점-1">단점</h4>

<ul>
  <li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 수 있다.</li>
</ul>

<h3 id="webmvctest">@WebMvcTest</h3>

<ul>
  <li>MVC를 위한 테스트로, 웹 상에서 요청과 응답에 대한 테스트.</li>
  <li>MVC 관련된 설정인 <code class="highlighter-rouge">@Controller, @ControllerAdvice, @JsonCompoent와 Filter, WebMvcConfiguer, HandlerMetohdAgumentResolver</code>만 빈으로 등록된다. (디스패쳐 서블릿에서 사용되는 아이들만 주입받는다.)</li>
  <li>때문에 Service, Repository 와 같은 웹 계층 아래 빈들은 등록되지 않아 의존성도 끊긴다.</li>
  <li>테스트에 사용하는 의존성이 있다면 @MockBean으로 만들어 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="n">ChessController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ChessControllerTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="n">ChessService</span> <span class="n">chessService</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 리스트 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getGames</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGameManager</span><span class="o">&gt;</span> <span class="n">chessGameManagers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>
        <span class="n">chessGameManagers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findRunningGames</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGameManagerBundle</span><span class="o">(</span><span class="n">chessGameManagers</span><span class="o">));</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/games"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.runningGames."</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"새로운 게임 시작 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">gameStart</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">start</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/start"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 점수 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getScore</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameStatistics</span> <span class="n">chessGameStatistics</span> <span class="o">=</span> <span class="n">ChessGameStatistics</span><span class="o">.</span><span class="na">createNotStartGameResult</span><span class="o">();</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">getStatistics</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameStatistics</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/score"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.matchResult"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"무승부"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.colorsScore.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"해당 게임 로딩 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">loadGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/load"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">movePiece</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="n">MoveRequestDto</span><span class="o">(</span><span class="s">"a2"</span><span class="o">,</span> <span class="s">"a3"</span><span class="o">));</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">isEnd</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">nextColor</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
                <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/move"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.end"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.nextColor"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"BLACK"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">given - willReturn</code> : 특정행위에 대한 반환 값을 지정하여 실제 객체처럼 동작하게 한다.</li>
</ul>

<h3 id="jdbctest">@JdbcTest</h3>

<ul>
  <li>JDBC 기반 구성 요소에만 초점을 맞춘 JDBC 테스트 어노테이션</li>
  <li>테스트를 위한 <code class="highlighter-rouge">JdbcTemplate</code>이 생성된다.</li>
  <li>기본적으로 트랜잭션이 이루어진다.</li>
  <li>in-memory database가 설정된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JdbcTest</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateChessDaoTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">DEFAULT_CHESS_GAME_ID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">ChessGame</span> <span class="n">chessGame</span><span class="o">;</span>
    <span class="n">ChessGameManager</span> <span class="n">sampleGame</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplateChessDao</span> <span class="n">jdbcTemplateChessDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">JdbcTemplateChessDaoTest</span><span class="o">(</span><span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">,</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"dataSource"</span><span class="o">)</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplateChessDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplateChessDao</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@BeforeEach</span>
    <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">"RKBQKBKRPPPPPPPP................................pppppppprkbqkbkr"</span><span class="o">;</span> <span class="c1">// move a2 a3 한 번 진행</span>
        <span class="n">chessGame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">,</span> <span class="n">WHITE</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">sample</span><span class="o">);</span>
        <span class="n">sampleGame</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임을 저장한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">newId</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"id로 체스 게임을 찾는다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">findById</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">isPresent</span><span class="o">()).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임 정보를 업데이트한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">sampleGame</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a2"</span><span class="o">),</span> <span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>

        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">sampleGame</span><span class="o">));</span>

        <span class="n">ChessGame</span> <span class="n">expectedChessGame</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">ChessGameManager</span> <span class="n">expectedChessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">expectedChessGame</span><span class="o">);</span>
        <span class="n">Square</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">expectedChessGameManager</span><span class="o">.</span><span class="na">getBoard</span><span class="o">().</span><span class="na">findByPosition</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">Pawn</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getColor</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">WHITE</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findAllOnRunning</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGame</span><span class="o">&gt;</span> <span class="n">allOnRunning</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findAllOnRunning</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">allOnRunning</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//when</span>
        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>

        <span class="c1">//then</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://goddaehee.tistory.com/212?category=367461">[스프링부트 (10)] SpringBoot Test(3) - 단위 테스트(@WebMvcTest, @DataJpaTest, @RestClientTest 등)</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
