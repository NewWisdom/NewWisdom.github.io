<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📚 atdd-subway-fare 미션 정리</title>
	  <link>//atdd-subway-fare-note</link>
	  <author></author>
	  <pubDate>2021-06-16T10:01:01+09:00</pubDate>
	  <guid>//atdd-subway-fare-note</guid>
	  <description><![CDATA[
	     <h2 id="요금-정책">요금 정책</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/cd715abe-edce-405a-811a-2b9cff62398b/image.png" style="zoom:33%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/9b90163c-02c0-4f7a-8801-0c1d74a5e47e/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>로그인 사용자와 비로그인 사용자를 구별하여 요금 정책을 적용</li>
  <li>PathController에서는 토큰이 없어도 예외가 아니었고</li>
  <li>MemberController에서는 토큰이 없으면 예외였기에 Resolver에서는 각각에 맞는 처리를 해주어야 했음</li>
  <li>맨 처음 페어랑 기능만 돌아가게 구현했을 때는 기존에 있는 로그인된 사용자에 대한 인가 과정을 거치는 Resolver를 재사용하도록 구현</li>
  <li>이러기 위해서는 이 각각에 맞는 처리를 일간 Controller로 옮겨야 했음</li>
</ul>

<h4 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="n">LoginMember</span> <span class="n">member</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membercontroller에서-loginmember에-대한-처리">MemberController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">unAuthorizedThrowException</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 없으면 (존재하지 않는 사용자이면) 예외</li>
</ul>

<h4 id="pathcontroller에서-loginmember에-대한-처리">PathController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">LoginMember</span> <span class="nf">unLoginMemberWrapper</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">loginMember</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 존재하지 않으면 age를 <code class="highlighter-rouge">-1</code> 로 wrap</li>
</ul>

<h5 id="그런데-이렇게-구현하고-생각한-문제점이">그런데 이렇게 구현하고 생각한 문제점이…</h5>

<ul>
  <li>Controller에서 이미 리졸빙된 LoginMember에 대한 처리를 또 건드리고 있다는 느낌</li>
  <li>Controller에서 LoginMember에 대한 비즈니스 로직을 알고 있는 느낌이라 개선이 필요하다고 느낌</li>
  <li>age를 -1로 감싸서 이 경우 비로그인자로 가정하는 로직이 괜찮은지 의문을 품고 있었음</li>
</ul>

<h4 id="페어의-리뷰어에게-온-피드백">페어의 리뷰어에게 온 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/8c7d30b2-c0f7-45af-b31f-dfd6a6ef247d/image.png" style="zoom:50%;" /></p>

<ul>
  <li>일단 <code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code> 와 <code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 두개로 분리하였음</li>
  <li><code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 에서는 요금 정책에 필요한 값인 <code class="highlighter-rouge">age</code> 만 반환하도록 리팩토링</li>
</ul>

<h4 id="ageauthenticationprincipalargumentresolver">AgeAuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AgeAuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AgeAuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AgeAuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
        <span class="n">LoginMember</span> <span class="n">memberByToken</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberByToken</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">Integer</code> 형인 age를 반환하도록….
    <ul>
      <li>반환타입을 명시적으로 적어줄걸 그랬네</li>
    </ul>
  </li>
</ul>

<h4 id="pathservice의-findpath">PathService의 findPath()</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="n">Long</span> <span class="n">source</span><span class="o">,</span> <span class="n">Long</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineService</span><span class="o">.</span><span class="na">findLines</span><span class="o">();</span>
        <span class="n">Station</span> <span class="n">sourceStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
        <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">SubwayPath</span> <span class="n">subwayPath</span> <span class="o">=</span> <span class="n">pathFinder</span><span class="o">.</span><span class="na">findPath</span><span class="o">(</span><span class="n">lines</span><span class="o">,</span> <span class="n">sourceStation</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">calculateDistance</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">lineFare</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">getMaxLineFare</span><span class="o">();</span>
        <span class="n">SubwayPathFare</span> <span class="n">subwayPathFare</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayPathFare</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">distance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">PathResponseAssembler</span><span class="o">.</span><span class="na">assemble</span><span class="o">(</span><span class="n">subwayPath</span><span class="o">,</span> <span class="n">subwayPathFare</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPathException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="subwaypathfare">SubwayPathFare</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayPathFare</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayPathFare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">wrapAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lineFare</span> <span class="o">=</span> <span class="n">lineFare</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">wrapAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFare</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">fareByDistance</span> <span class="o">=</span> <span class="n">FareCalculatorByDistance</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">distance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">FareAdjusterByAge</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">fareByDistance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요금 정책을 해당 도메인에서 Enum인 <code class="highlighter-rouge">FareCalculatorByDistance</code> 와 <code class="highlighter-rouge">FareAdjusterByAge</code> 를 통해 계산하고 있었음</li>
  <li><code class="highlighter-rouge">wrapAge()</code> 를 통해 null 값으로 age가 들어오면 <code class="highlighter-rouge">FareAdjusterByAge.of()</code>에서 스트림을 돌리는데, 이에 예외가 발생하지 않도록 -1로 포장</li>
</ul>

<h5 id="참고---fareadjusterbyageof">참고 - FareAdjusterByAge.of()</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">of</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fare</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">ageRange</span> <span class="o">-&gt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&amp;&amp;</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">maxExclusive</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">calculator</span> <span class="o">-&gt;</span> <span class="n">calculator</span><span class="o">.</span><span class="na">adjuster</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">))</span>
            <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
            <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="farecalculatorbydistance---거리별-요금-정책">FareCalculatorByDistance - 거리별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareCalculatorByDistance</span> <span class="o">{</span>
    <span class="n">BASE</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">distance</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span><span class="o">),</span>
    <span class="n">FIRST_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">5</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">),</span>
    <span class="n">SECOND_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="mi">800</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">8</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">);</span>


    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">;</span>

    <span class="n">FareCalculatorByDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">minExclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">,</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minExclusive</span> <span class="o">=</span> <span class="n">minExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxInclusive</span> <span class="o">=</span> <span class="n">maxInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="fareadjusterbyage---나이별-요금-정책">FareAdjusterByAge - 나이별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareAdjusterByAge</span> <span class="o">{</span>
    <span class="n">PRE_SCHOOLED</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="mi">0</span><span class="o">)),</span>
    <span class="n">SCHOOL_AGED</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_RATE</span><span class="o">)),</span>
    <span class="n">ADOLESCENT</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_RATE</span><span class="o">));</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">;</span>

    <span class="n">FareAdjusterByAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">minInclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">=</span> <span class="n">minInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxExclusive</span> <span class="o">=</span> <span class="n">maxExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">adjuster</span> <span class="o">=</span> <span class="n">adjuster</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getIntegerBinaryOperator</span><span class="o">(</span><span class="kt">double</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(((</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-</span> <span class="mi">350</span><span class="o">)</span> <span class="o">*</span> <span class="n">rate</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="리뷰어에게-받은-피드백">리뷰어에게 받은 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a9f5ac3d-548f-4f90-ad43-e3af67abc64a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>리뷰어의 의도는 Member를 나타내는 도메인에서 age를 nullable하게 두고 이를 처리하는 것이 더 명확할 것 같다하심</li>
</ul>

<h3 id="아쉬운-점">아쉬운 점</h3>

<h4 id="나이별-요금정책을-적용할-때-member-도메인을-사용해볼걸">나이별 요금정책을 적용할 때 Member 도메인을 사용해볼걸!</h4>

<p>현재 경로 조회를 할 때는 member 도메인이 넘어오지 않고 age 값만 넘어오도록 구현했었다.<br />
그런데 Age는 Member에 종속되는 필드인데 이를 빼서 독립적으로 처리하고 있는게 지금보니 마음에 들지 않는다.<br />
만약 Member의 다른 필드들도 요금정책에 영행을 주게 된다면 유지보수가 어려운 코드가 된다.<br />
크루들이랑 이야기를 해보니 한 리졸버에서 Member를 반환해주는데, 이 반환 도메인을 한 인터페이스(예를 들면 Member)를 만들고 이를 구현한 <code class="highlighter-rouge">Guest</code>, <code class="highlighter-rouge">LoginMember</code> 로 로그인, 비로그인 사용자를 구별하여 로직을 수행하는 방법도 있다고 한다.</p>

<p>이러면 리졸버를 나눌 필요도 없고 Member가 age를 가지고 나이에 관한 요금 정책을 수행할 때 해당 도메인에게 물어서 처리할 수 있을 것 같다.</p>

<h4 id="enum에-predicate를-가직-할걸">Enum에 Predicate를 가직 할걸!</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a53fbb31-926c-4123-813c-72f4d7fda9ca/image.png" style="zoom: 50%;" /></p>

<p>또한 각각 요금 정책을 Enum으로 구현하였는데, 여기서 상수를 쓰니 가독성이 매우 떨어지는 느낌이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d4bfdf8-ddba-44dc-83be-af5f15860ae8/image.png" style="zoom:33%;" /></p>

<p>상수를 쓴 이유는 위의 피드백으로 매직 넘버에 의미를 부여하고 싶었으나… <br />
이렇게 하니 오히려 가독성을 헤치는 느낌이었고 마지막 리뷰대로 Enum 안에 범위를 판단하는 <code class="highlighter-rouge">Predicate</code> 를 가지도록 할걸 그랬다.</p>

<h2 id="프론트엔드와의-협업">프론트엔드와의 협업</h2>

<ul>
  <li>백엔드 4, 프론트엔드 2명 정도씩 팀을 이루어 협업하는 미션이었음</li>
  <li><a href="https://www.notion.so/4b3b784386a246babcdef0bda179babb">해당 문서</a> 에 있는 프론트엔드 요구사항을 뼈대코드에 반영해 나감</li>
</ul>

<h2 id="api-문서화">API 문서화</h2>

<ul>
  <li>Spring Rest Docs를 통해 API 문서화 작업을 진행</li>
  <li>기존에 있는 RestAssured 테스트를 이용해 API를 만들수도 있는데, 페어랑 같이 시도하다가 계속 오류나서….</li>
  <li>결국 MockMvc로 테스트 코드 다시짜서 API 문서를 만들었음</li>
  <li>다른 크루가 RestAssured로 문서를 만들었던데 그거 보고 시도해봐야지…</li>
  <li>또 리뷰어가 제시한 방향으로 API 문서 만드는 테스트 코드를 조금 수정했더니 더 좋은 문서를 만들 수 있었음</li>
</ul>

<h4 id="controllertest">ControllerTest</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@AutoConfigureRestDocs</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationRequestPreprocessor</span> <span class="nf">getDocumentRequest</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessRequest</span><span class="o">(</span>
                <span class="n">modifyUris</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="s">"https"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">host</span><span class="o">(</span><span class="s">"newwisdom-subway.p-e.kr"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">removePort</span><span class="o">(),</span>
                <span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationResponsePreprocessor</span> <span class="nf">getDocumentResponse</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessResponse</span><span class="o">(</span><span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>API 문서 만드는데 필요한 MockMvc 테스트들은 위 클래스를 상속받고 있음</li>
  <li>리뷰어의 제안을 통해 <code class="highlighter-rouge">getDocumentRequest()</code>와 <code class="highlighter-rouge">getDocumentResponse()</code> 을 추가</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/d4396804-6e9e-4046-a749-99c2cbe085db/image.png" style="zoom: 50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/edaba672-3c4a-481f-984e-e08fa2ba6f20/image.png" style="zoom:50%;" /></p>

<h2 id="테스트-코드의-가독성">테스트 코드의 가독성</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/ab0ebe3f-3560-4b80-a470-781c1731354f/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/24757641-e6c6-4a74-b84a-7a014edfc99c/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이번 리뷰어가 테스트 코드에서 가독성을 지키지 못한 부분들을 많이 피드백 해주었음</li>
  <li>테스트 코드도 하나의 문서이며 유지보수 대상이기 때문에 가독성을 고려해야 한다는 것을 느꼈음</li>
  <li>서로 다른 테스트에서 공통으로 쓰이는 메서드들은 상위 클래스인 AcceptanceTest로 끌어 올림</li>
  <li>테스트에 쓰이는 변수명들도 맥락을 파악하기 쉽도록 변경</li>
  <li>상수처리도 신경씀</li>
</ul>

<h2 id="예외-처리">예외 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2518ddc4-c4ce-4a7a-8ee1-49becedb7936/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>“일단 프론트의 요구사항 다 반영하도록 구현해보자!”로 잡고 했더니 무수한 커스텀 예외가 만들어졌다…^ㅠ^</li>
  <li>이를 개선할 방법을 찾다가… 크루들한테 들은 <a href="https://cheese10yun.github.io/spring-guide-exception/">Spring Guide - Exception 전략</a> 을 적용해보기로~</li>
  <li>RuntimeException을 상속받는 BuisnessException을 만들고 필드에 상태코드와 ErrorMessage(DTO)를 가지도록 구현</li>
  <li>이를 상속하는 상태코드 400인 BusinessException과 상태코드 401인 AuthorizationException을 만듦</li>
  <li>또 이를 상속받는 각각의 클라이언트의 요구사항에 맞는 커스텀 예외 만듦</li>
  <li>
    <p>ControllerAdvice에서는 다음과 같이 BuisnessException을 잡고 이 예외에서 상태코드와 예외 메시지를 꺼내도록 구현</p>
  </li>
  <li>이렇게 되면 어드바이스에서 수많은 커스텀 예외들을 BuisnessException 하나만 잡고 처리할 수 있음</li>
  <li>상태코드에 따른 클래스를 두어 이가 변경되어도 유지보수가 쉬움</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">BusinessException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorMessage</span><span class="o">&gt;</span> <span class="nf">handleRuntimeException</span><span class="o">(</span><span class="n">BusinessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHttpStatus</span><span class="o">()).</span><span class="na">body</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="businessexception">BusinessException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">httpStatus</span><span class="o">,</span> <span class="k">new</span> <span class="n">ErrorMessage</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">httpStatus</span> <span class="o">=</span> <span class="n">httpStatus</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorMessage</span> <span class="o">=</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">HttpStatus</span> <span class="nf">getHttpStatus</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ErrorMessage</span> <span class="nf">getErrorMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="authorizationexception">AuthorizationException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>401 상태코드</li>
</ul>

<h4 id="badrequestexception">BadRequestException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BadRequestException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">BadRequestException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>400 상태코드</li>
</ul>

<h2 id="배포-스크립트">배포 스크립트</h2>

<ul>
  <li>실제 API 사용이 가능하도록 EC2에 배포하여야 했음</li>
  <li>프로젝트가 업데이트되면 프로세스를 재시동해야했음</li>
  <li>이러면 여러가지 명령어를 실행해야 함….</li>
  <li>이를 스크립트로 만들어 한번에 처리하도록 구현!</li>
</ul>

<h4 id="deploy-prodsh">deploy-prod.sh</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c">#!/bin/bash in the top of your scripts then you are telling your system to use bash as a default shell.</span>

<span class="nv">REPOSITORY</span><span class="o">=</span>/home/ubuntu/ <span class="c"># 경로 설정</span>
<span class="nv">PROJECT_NAME</span><span class="o">=</span>atdd-subway-fare

<span class="nb">cd</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/ <span class="c"># 경로로 접근</span>

<span class="nb">echo</span> <span class="s2">"&gt; git reset --hard"</span> 

git reset <span class="nt">--hard</span> <span class="c"># 깃허브 초기화</span>

<span class="nb">echo</span> <span class="s2">"&gt; git pull origin step1"</span>

git pull origin step1 <span class="c"># pull 땡겨오기</span>

<span class="nb">echo</span> <span class="s2">"&gt; 프로젝트 Build 시작"</span>

./gradlew clean build <span class="c"># 빌드</span>

<span class="nb">echo</span> <span class="s2">"&gt; Build 파일 경로 복사"</span>

<span class="nv">JAR_LOCATION</span><span class="o">=</span><span class="k">$(</span>find ./<span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*jar"</span> | <span class="nb">grep </span>atdd-subway-fare<span class="k">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 pid 확인"</span>

<span class="nv">CURRENT_PID</span><span class="o">=</span><span class="k">$(</span>pgrep <span class="nt">-f</span> <span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="o">[</span><span class="nt">-A-z0-9</span>.]<span class="k">*</span>.jar<span class="nv">$)</span> <span class="c"># 실행시켜져있는 jar pid 받기 </span>


<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$CURRENT_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># -z 플래그는 null인것을 체크함, PID가 null인 경우 if절 안으로 들어감</span>
    <span class="nb">echo</span> <span class="s2">"&gt; 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 종료(pid : </span><span class="nv">$CURRENT_PID</span><span class="s2">)"</span>
    <span class="nb">echo</span> <span class="s2">"&gt; kill -15 </span><span class="nv">$CURRENT_PID</span><span class="s2">"</span>
    <span class="nb">kill</span> <span class="nt">-15</span> <span class="nv">$CURRENT_PID</span>
    sleep 5
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"&gt; 새 애플리케이션 배포"</span>
<span class="nb">echo</span> <span class="s2">"&gt; JAR Location: </span><span class="nv">$JAR_LOCATION</span><span class="s2">"</span> 해당 jar파일 실행

<span class="c">#nohup java -jar 실행</span>
nohup java <span class="nt">-jar</span> <span class="nt">-Dspring</span>.profiles.active<span class="o">=</span>prod <span class="k">${</span><span class="nv">JAR_LOCATION</span><span class="k">}</span> 1&gt; log-prod.md 2&gt;&amp;1  &amp;
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-path 미션 정리</title>
	  <link>//atdd-subway-path-note</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-path-note</guid>
	  <description><![CDATA[
	     <h2 id="step1-2">STEP1, 2</h2>

<h3 id="jwttokenprovider">JwtTokenProvider</h3>

<ul>
  <li>jwt 토큰 생성, 토큰 검증, 토큰에서 인증 정보 추출하는 유틸 클래스</li>
</ul>

<h3 id="authorizationextractor">AuthorizationExtractor</h3>

<ul>
  <li>HTTP의 <code class="highlighter-rouge">Authorization</code> Header에서 Bearer 타입인 경우 Access Token을 추출하는 유틸 클래스</li>
</ul>

<h3 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalConfig</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="n">List</span> <span class="n">argumentResolvers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">argumentResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createAuthenticationPrincipalArgumentResolver</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">createAuthenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>AuthenticationPrincipalArgumentResolver는 빈 등록이 되어있지 않음</li>
  <li>해당 리졸버를 활용할 수 있도록 등록해주는 java config</li>
  <li><code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code>를 만들고 등록</li>
</ul>

<h3 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// resolveArgument 메서드가 동작하는 조건을 정의하는 메서드</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 파라미터 중 @AuthenticationPrincipal이 붙은 경우 동작하게 설정</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// supportsParameter가 true인 경우 동작</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Member</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>컨트롤러 메서드에서 특정 조건에 맞는 파라미터가 있을 때 원하는 값을 바인딩해주는 인터페이스</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">resolveArgument</code> 에서 <code class="highlighter-rouge">Member</code> 도메인 자체를 반환했었음</p>
  </li>
</ul>

<h4 id="관련-정리">관련 정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/13">Spring MVC Config 학습 테스트</a></li>
</ul>

<h3 id="authinterceptor">AuthInterceptor</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthInterceptor</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">authService</span><span class="o">.</span><span class="na">validateToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>인증 / 인가에 대한 토큰 검증을 담당</p>
  </li>
  <li>
    <p>토큰이 유효하면 true를 반환하도록</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">AuthorizationExtractor.extract()</code> 가 리졸버랑 중복이 되는데?</p>

    <ul>
      <li>어쩔 수 없음. 이 둘은 서로 모르는 관계로 독립적이니</li>
      <li>변경의 영향도 최소화를 위해 JwtProvider가 아닌 JwtProvider를 포함한 AuthService를 가지도록</li>
    </ul>
  </li>
</ul>

<h2 id="step3">STEP3</h2>

<h4 id="graph---그래프-역할을-하는-도메인">Graph - 그래프 역할을 하는 도메인</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Graph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nf">Graph</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initPath</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Section</span> <span class="n">section</span> <span class="o">:</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">initEdge</span><span class="o">(</span><span class="n">section</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initEdge</span><span class="o">(</span><span class="n">Section</span> <span class="n">section</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">());</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">());</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">setEdgeWeight</span><span class="o">(</span><span class="n">graph</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">(),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">()),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addVertex</span><span class="o">(</span><span class="n">Station</span> <span class="n">station</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">graph</span><span class="o">.</span><span class="na">containsVertex</span><span class="o">(</span><span class="n">station</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">addVertex</span><span class="o">(</span><span class="n">station</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">shortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">dijkstraShortestPath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">graph</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">(),</span> <span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="path---사실상-dto-느낌">Path - 사실상 DTO 느낌…</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Path</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Path</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">,</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stations</span> <span class="o">=</span> <span class="n">stations</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">stations</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stations</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">distance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="처음-구현한-로직---모든-line을-불러와-최단-거리-조회">처음 구현한 로직 - 모든 Line을 불러와 최단 거리 조회</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">lines</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/452f11f4-a8e7-4365-a71c-9c2be5f6435a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>사실 처음에는 sections만 가져와서 그래프를 그렸으나, 이렇게 되면 해당 역의 이름들을 가져올 수 없었음</li>
  <li>기존 코드를 사용하려고 일단 LineDao를 이용했었는데, 재연링의 리뷰대로 모든 Line을 조회하기 보다 필요한 Sections만 조회하도록 리팩토링</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/88d775c4-942a-4437-8f62-a7b0215a96a1/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이 부분은 DM으로 이야기를 나눴는데,</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PathService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PathService</span><span class="o">(</span><span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">,</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sectionDao</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationDao</span> <span class="o">=</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">path</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="cors-이슈-해결-법">CORS 이슈 해결 법</h2>

<ul>
  <li>나같은 경우는 front쪽에 프록시 서버를 두어 해당 이슈가 발생하지 않도록 하였음</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/54">내가 CORS 이슈를 해결한 방법 - Proxy </a></li>
</ul>

<h2 id="cookie-vs-localstorage">Cookie vs LocalStorage</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4d9503c2-642a-4ed5-9531-acfc39e6f29b/image.png" style="zoom:50%;" /></p>

<ul>
  <li><a href="https://woowacourse.github.io/javable/post/2020-08-31-where_to_store_token/">토큰을 어디에 저장할까?</a> 글을 보고 토큰을 쿠키에 저장</li>
  <li>재연링의 리뷰로 쿠키를 사용했을 때의 문제점을 알아봄</li>
  <li>XSS 공격을 막을 수 있는 HTTP-Only 쿠키를 고려</li>
  <li>하지만 이는 JS에서 꺼내 쓸 수 없어 헤더에 토큰을 실어 보낼 수 없는 이슈</li>
  <li>(미션 요구사항과 OAuth 표준 등을 고려해) 재연링과 나눈 DM 내용과 같이 다음과 같은 문제들로 쿠키 대신 LocalStorage에 토큰을 저장하도록 변경</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 웹 이외의 클라이언트까지 고려하는 것이 좋다고 생각
* OAuth 표준을 지키기 위함
* 사실 HttpOnly를 통해 보호하여도, 하이재킹 등 많은 보안적 위험이 존재하기 때문에 악의적인 의도를 가진 사람이 불편해질 뿐 보안적으로 완벽하게 처리되지 않음
* MDN에서도 HTML5 이후부터 Cookie를 저장소와 같은 용도로 사용하지 않을 것을 권장
</code></pre></div></div>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/21">XSS, CSRF</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/22">SameSite Cookie</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/33">Cookie VS Local Storage</a></li>
</ul>

<h2 id="front">Front</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a00c23b4-79f3-46f2-891d-863f25e8a418/image.png" style="zoom:50%;" /></p>

<ul>
  <li><code class="highlighter-rouge">vue.config</code>를 통해 중복되는 URL에 대한 설정</li>
  <li>중복되는 fetch는 모듈로 따로 만들어서(fetch.js) 사용하도록 변경</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/4b5e5a10-0ebf-4d5b-8750-b6a5ccf92652/image.png" style="zoom:50%;" /></p>

<h2 id="argumentresolver와-authinterceptor">ArgumentResolver와 AuthInterceptor</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/336584ce-5eaf-45d6-ab2f-c4066eb03ab1/image.png" style="zoom:50%;" /></p>

<h4 id="argumentresolver">ArgumentResolver</h4>
<blockquote>
  <p>Strategy interface for resolving method parameters into argument values in the context of a given request.</p>
  <ul>
    <li>매개변수의 리졸빙</li>
    <li>컨트롤러에서 파라미터를 바인딩 해주는 역할
      <h4 id="authinterceptor-1">AuthInterceptor</h4>
      <p>Workflow interface that allows for customized handler execution chains. Applications can register any number of existing or custom interceptors for certain groups of handlers, to add common preprocessing behavior without needing to modify each handler implementation.
A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers the execution of the handler itself. This mechanism can be used for a large field of preprocessing aspects, e.g. for authorization checks, or common handler behavior like locale or theme changes. Its main purpose is to allow for factoring out repetitive handler code.</p>
    </li>
    <li>권한 확인 또는 로케일 또는 테마 변경과 같은 일반적인 핸들러 동작과 같은 전처리 측면의 넓은 분야에 사용</li>
    <li>인증 / 인가에 대한 검사</li>
    <li>주요 목적은 반복적 인 핸들러 코드를 제거하는 것</li>
    <li>Spring doc에서 공식적으로 authorization checks를 하는 애라고 지정해준 존재</li>
    <li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html">공식문서</a></li>
  </ul>
</blockquote>

<p><strong>인터셉터와 리졸버는 서로를 모르는 관계이고 독립적으로 가야함</strong></p>
<h4 id="참고할-글">참고할 글</h4>
<ul>
  <li><a href="https://velog.io/@sa833591/Spring-Filter-Interceptor-AOP-%EC%B0%A8%EC%9D%B4-yvmv4k96">Filter, Interceptor, AOP 차이
</a></li>
</ul>

<h4 id="정리-2">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/28">HandlerInterceptor</a></li>
</ul>

<h2 id="다시-구현한다면">다시 구현한다면?</h2>

<h4 id="argumentresolver-에서-dto인-loginmember를-반환하게-할걸">ArgumentResolver 에서 DTO인 LoginMember를 반환하게 할걸!</h4>

<ul>
  <li>도메인을 반환하면 뷰와 컨트롤러에 노출시키고 도메인을 조작할 가능성이 있음</li>
  <li>또 불필요한 pw 필드도 가지게 됨</li>
</ul>

<h4 id="비번-암호화와-member-객체에서-비번을-확인하게-할걸">비번 암호화와 member 객체에서 비번을 확인하게 할걸!</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmailAndPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>비번을 암호화 할 때는 Spring Security의 <code class="highlighter-rouge">BCryptPasswordEncoder()</code> 를 사용</li>
  <li>회원가입할 때 입력한 비번을 인코딩하여 저장</li>
  <li>그런데 만약 여기서 로그인할 때 입력한 비번을 <code class="highlighter-rouge">encoder.encode()</code> 하여 조회하면 실패</li>
  <li>왜냐면 동일한 원문이어도 각기 다른 인코딩된 값을 내뱉기 때문</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PasswordEncoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
<span class="n">String</span> <span class="err">원문</span> <span class="o">=</span> <span class="s">"qwe123"</span><span class="o">;</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="n">_2</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>

<span class="n">encorder</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="err">원문</span><span class="o">,</span> <span class="err">암호화된</span> <span class="err">원문</span><span class="o">);</span> <span class="c1">// true</span>
<span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//false</span>
</code></pre></div></div>

<ul>
  <li>때문에 쿼리로 Member를 받아오고 이 객체에서 <code class="highlighter-rouge">encorder.matches()</code>를 이용해 비번을 확인하자</li>
</ul>

<h4 id="최단거리-찾는-로직을-전략-패턴으로-구현할걸">최단거리 찾는 로직을 전략 패턴으로 구현할걸!</h4>

<ul>
  <li>도메인에 외부 라이브러리를 가지고 있는 것이 옳은가?</li>
  <li>만약 알고리즘이 변경되면 도메인에도 영향이 감</li>
  <li>전략패턴으로 Dijkstra 알고리즘을 주입하자</li>
</ul>

<hr />

<h2 id="2021-06-16-위-사항들을-반영하여-다시-구현">2021-06-16 위 사항들을 반영하여 다시 구현</h2>

<h3 id="argumentresolver에서-dto인-loginmember-반환하도록-리팩토링">ArgumentResolver에서 DTO인 LoginMember 반환하도록 리팩토링</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">LoginMember</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findLoginMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="loginmember">LoginMember</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginMember</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>로직에 필요한 정보만 담고 있는 DTO 생성</p>
  </li>
  <li>아 참고로 Interceptor에서는 토큰 검증만 하도록 함
    <ul>
      <li>차피 이미 로그인으로 아이디 비번을 검증했잖아?</li>
    </ul>
  </li>
  <li>리졸버에서는 토큰을 통해 진짜 매개변수 리졸빙만 담당</li>
</ul>

<h3 id="member-객체에서-비번을-확인하도록">member 객체에서 비번을 확인하도록</h3>

<h4 id="authservice">AuthService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">isInvalidPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()))</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">Member</span> <span class="nf">findMember</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>추후 단방향 비번 암호화를 위해 객체에서 비번을 비교하도록 변경</li>
</ul>

<h3 id="최단거리-찾는-로직을-전략-패턴으로">최단거리 찾는 로직을 전략 패턴으로</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/923976a2-131b-45c4-8911-c8a0b3da1e0c/image.png" style="zoom:33%;" /></p>

<ul>
  <li>최단 경로 찾기 전략을 인터페이스로, 이를 다익스트라로 구현한 클래스를 만듦</li>
  <li>알고리즘을 코드의 영향없이 변경할 수 있도록</li>
</ul>

<h4 id="subwaygraph">SubwayGraph</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayGraph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayGraph</span><span class="o">(</span><span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">;</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>
   <span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>그래프 도메인</li>
</ul>

<h4 id="shortestpathstrategy-인터페이스">ShortestPathStrategy 인터페이스</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>

    <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>전략마다 <code class="highlighter-rouge">getVertexList()</code> 와 <code class="highlighter-rouge">getPathWeight()</code> 를 계산하도록 명세</li>
</ul>

<h4 id="dijkstrashortestpathstrategy">DijkstraShortestPathStrategy</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DijkstraShortestPathStrategy</span> <span class="kd">implements</span> <span class="n">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathAlgorithm</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">shortestPathAlgorithm</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">SubwayGraph</span> <span class="n">subwayGraph</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathAlgorithm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">subwayGraph</span><span class="o">.</span><span class="na">getGraph</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>SubwayGraph를 받아서 최단 경로를 구할 수 있음</li>
</ul>

<h4 id="shortestpathfinder">ShortestPathFinder</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShortestPathFinder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ShortestPathFinder</span><span class="o">(</span><span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathStrategy</span> <span class="o">=</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">findShortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getVertexList</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>최단 경로를 찾는 역할</li>
  <li>전략을 주입받아 최단 경로를 구하고 싶어 도메인을 분리하였음…</li>
</ul>

<h4 id="변경된-pathservice">변경된 PathService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
    <span class="n">SubwayGraph</span> <span class="n">subwayGraph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayGraph</span><span class="o">(</span><span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;&gt;(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">sections</span><span class="o">);</span>
    <span class="n">ShortestPathFinder</span> <span class="n">shortestPathFinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShortestPathFinder</span><span class="o">(</span><span class="k">new</span> <span class="n">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">subwayGraph</span><span class="o">));</span>
    <span class="n">Path</span> <span class="n">shortestPath</span> <span class="o">=</span> <span class="n">shortestPathFinder</span><span class="o">.</span><span class="na">findShortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">shortestPath</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">shortestPath</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="반영된-코드는-여기에-"><a href="https://github.com/NewWisdom/atdd-subway-path/tree/step5">반영된 코드는 여기에 👻</a></h4>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-map 미션 정리</title>
	  <link>//atdd-subway-map</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-map</guid>
	  <description><![CDATA[
	     <h2 id="중복되는-테스트-메서드">중복되는 테스트 메서드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/73cdc1c4-063d-4a4e-af29-6520fecb721e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>중복되는 테스트 메서드는 추출하자</li>
  <li>테스트코드도 유지보수의 대상이며 하나의 문서이기 때문에 가독성을 고려하자</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ExtractableResponse</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">addSection</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">RestAssured</span><span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
    <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
    <span class="o">.</span><span class="na">when</span><span class="o">()</span>
    <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/lines/{id}/sections"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">)</span>
    <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="예외-처리는-dao에서">예외 처리는 DAO에서</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/004aa497-1875-4a85-ba7d-2ab1c0f4f40e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DAO에서 예외를 체크해주고 있었음</li>
  <li>DAO는 말그대로 DB에 어세스하는 역할만 할 뿐</li>
  <li>이 결과에 대한 예외는 서비스가 알아서 하도록 하자</li>
</ul>

<h2 id="valid와-validated로-dto-검증">@Valid와 @Validated로 DTO 검증</h2>

<ul>
  <li><code class="highlighter-rouge">@Valid</code> 를 통해 DTO에서 요청에 대한 검증을 하게 해줌</li>
  <li>Validation을 group화 할 수 있는 점을 이용해서 각기 요청마다 group을 지어 한 DTO를 사용해도 각각 요청에 맞는 검증을 진행</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/30">@Valid / @Validation으로 요청값 검증</a></li>
</ul>

<h2 id="valid로-잡은-예외-메시지-처리">Valid로 잡은 예외 메시지 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2ca1114f-98c3-4ce6-b968-0212fcbbc658/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>Valid 어노테이션으로 잡은 MethodArgumentNotValidException의 메시지를 제대로 출력하고 있지 않았음</li>
  <li>게이츠가 제안해준 방법을 적용하니 BindingResult에 있는 예외 메시지들을 추출하여 던져줄 수 있었음</li>
</ul>

<h2 id="service-레이어에서-도메인이-아닌-dto를-반환하자">Service 레이어에서 도메인이 아닌 DTO를 반환하자</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2e62828-da05-401f-bad8-e1e86f9b7c9a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Controller에서 도메인을 가져다 써서 화면에 필요한 데이터를 표현하기 위해 도메인 자체나 도메인의 getter를 노출시키고 있었음</li>
  <li>도메인의 정보를 외부(view)에 노출하는 경우, interface인 DTO를 통해 서비스 레이어에서 반환하도록 리팩토링</li>
  <li><a href="https://github.com/HomoEfficio/dev-tips/blob/master/DTO-DomainObject-Converter.md">참고</a></li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/26">Service Layer에서 도메인 객체가 아닌 DTO를 반환해야하는 이유? (feat.Open Session In View) </a></li>
</ul>

<h2 id="restassured에-대해">RestAssured에 대해</h2>

<ul>
  <li>전 단계까지는 MockMVC 등으로 컨트롤러단을 단위테스트로 진행했음</li>
  <li>E2E 테스트를 한다는 것은 말 그대로 끝부터 끝까지,요청부터 내가 원하는 응답을 테스트 하는 것인데 <br />
이렇게되면 단위 테스트를 하는 이유가 있을까라는 고민을 했음</li>
  <li>고민한 결과 “단위 테스트는 구현 단계에서 내가 구현한 레이어(단위)가 정상 동작하는지를 테스트하기 위해,
이후 모든 단위들이 조합되었을 때 통합테스트를 통해 애플리케이셔이 원하는 기능을 잘 수행하는지 테스트한다”
이렇게 결론을 내림</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/191d92fe-c4e1-4595-b67f-ee1d37e1d9a6/image.png" style="zoom:33%;" /></p>

<h2 id="구간-추가-로직">구간 추가 로직</h2>

<ul>
  <li>구간을 추가할 때 상행역, 하행역이 존재하는지 또 이를 찾고 수정해주기 위한 많은 로직을 작성해야했음</li>
  <li>그런데 사실 비슷한 로직인데 상행인지 하행인지 대상만 달랐음</li>
  <li>아래와 같이 일단 구현을 목적으로 했을 때는 엄청난 분기가 생겨버림</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이는 상행구간 찾기, 하행구간 찾기를 전략패턴을 이용해 리팩토 해버렸음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LineService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LineRepository</span> <span class="n">lineRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">;</span>
<span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>일단 LineService가 구간을 찾는 전략을 가지고 있음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">,</span> <span class="n">findSectionStrategies</span><span class="o">);</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">updateToAdd</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">));</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>대상 구간을 찾을 때 전략들을 주입하고</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">Section</span> <span class="nf">findSectionWithStation</span><span class="o">(</span><span class="n">Station</span> <span class="n">targetStation</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">findSectionStrategies</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">findSectionStrategy</span> <span class="o">-&gt;</span> <span class="n">findSectionStrategy</span><span class="o">.</span><span class="na">findSection</span><span class="o">(</span><span class="n">sections</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">))</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">isPresent</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">get</span><span class="o">)</span>
    <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
    <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">EMPTY</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Sections에서 다음과 같이 해당 구간을 찾음</li>
</ul>

<h2 id="pr-링크">PR 링크</h2>

<ul>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/86">STEP1</a></li>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/162">STEP2</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📚 jwp-chess 미션 정리</title>
	  <link>//jwp-chess-note</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//jwp-chess-note</guid>
	  <description><![CDATA[
	     <h2 id="controlleradvice">@ControllerAdvice</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9838b28-b9fd-4cd3-9f8f-f19229e5da70/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>전역 예외를 처리하는데 사용</li>
</ul>

<h4 id="정리">정리</h4>

<p><a href="https://github.com/NewWisdom/TIL/issues/1">@ControllerAdvice, @RestControllerAdvice</a></p>

<h2 id="rest-api">REST API</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/b7428bd8-737e-489a-a59d-d3e8a1adcfd2/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3dbc03af-5e1c-4be6-a1e0-7332517831ec/image.png" style="zoom:50%;" /></p>

<ul>
  <li>REST API 설계 방법을 찾아보고 고민하여 반영</li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/2">REST API 디자인</a></li>
</ul>

<h2 id="profile">Profile</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4fdbb04e-3c16-4a59-954f-b0020d245842/image.png" style="zoom:50%;" /></p>

<ul>
  <li>실제 애플리케이션에서 사용하는 DB는 Mysql 그대로 냅두고</li>
  <li>테스트에서는 h2를 사용하여 h2 의 장점을 극대화해서 사용하도록 리팩또</li>
  <li>테스트 DB를 따로 설정하기 위해 열심히 찾아보다가 application-properties를 활용하는 방안 학습</li>
  <li>처음에는 application-{환경}-properties로 각각 파일을 만들어주었음</li>
  <li>아래와 같은 리뷰를 받고 test.resource에 application-properties를 만들어줌</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5dc4b405-47bc-4422-83f8-eedaa3b7732e/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4aa931db-0a73-4ada-9ba2-2bb0e3b3ea3b/image.png" style="zoom:33%;" /></p>

<h4 id="정리-2">정리</h4>

<ul>
  <li>Profile에 대해 추가적으로 학습하고 정리</li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/47">Profile</a></li>
</ul>

<h2 id="테스트에-관하여">테스트에 관하여</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/03a3dc16-07b5-48d0-bf51-fbea7bacc9f6/image.png" style="zoom:50%;" /></p>

<ul>
  <li>지난 레벨 체스 코드 옮겨오면서 테스트 코드는 빼고 옮겨왔었음 🥲</li>
  <li>데이브의 권유대로 각 레이어별 테스트 코드 작성</li>
  <li>처음에는 단순히 <code class="highlighter-rouge">@SpringBootTest</code> (통합테스트)로 진행하려 했음</li>
  <li>찾아보니 각 레이어를 단위 테스트로도 구현할 수 있음을 깨달음</li>
  <li><code class="highlighter-rouge">@WebMvcTest, @jdbcTest</code>을 통해 Controller와 Repository 레이어에 대한 단위 테스트를 구현</li>
</ul>

<h4 id="정리-3">정리</h4>

<ul>
  <li><a href="https://newwisdom.github.io/unit-test-vs">통합 테스트 VS 단위 테스트</a></li>
</ul>

<h2 id="학습하라고-던져주신-키워드">학습하라고 던져주신 키워드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9147f41d-e48f-479d-8573-2f23fcbff416/image.png" style="zoom:50%;" /></p>

<h4 id="정리-4">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/3#issue-862548280">@Responsebody는 어떤 역할을 해줄까?</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/4#issue-862590487">@Componentscan</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/5#issue-862591289">스프링의 DI 방법</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/6">Spring에서 request 처리 과정</a></li>
</ul>

<h2 id="이번-미션에서-이런-키워드들을-학습했음-">이번 미션에서 이런 키워드들을 학습했음 👻</h2>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues?q=is%3Aissue+is%3Aopen+label%3Ajwp-chess">내 깃헙 issue에 등록했지롱</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 스프링 부트 Profile로 다른 환경 구성</title>
	  <link>//profile</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//profile</guid>
	  <description><![CDATA[
	     <h2 id="profile">Profile?</h2>

<ul>
  <li>애플리케이션 일부 configuration을 분리하고 싶을 때 사용</li>
  <li>애플리케이션 일부 configuration을 특정 환경에서만 가능하게 하고 싶을 때 사용</li>
  <li>개발 환경에 따라 설정값을 달르게 로딩할 때</li>
</ul>

<h2 id="profile-1">@Profile</h2>

<ul>
  <li><code class="highlighter-rouge">@Component, @Configuration, @ConfigurationProperties</code>을 <code class="highlighter-rouge">@Profile</code>와 함께 선언</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"production"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductionConfiguration</span> <span class="o">{</span>

    <span class="c1">// ...</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>어플리케이션 실행시 <code class="highlighter-rouge">spring.profiles.active</code> 프로퍼티로 프로파일을 지정하면 해당 프로파일이 적용된 빈만 등록됨</li>
</ul>

<p><strong>application-properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev,hsqldb
</code></pre></div></div>

<h4 id="example">Example</h4>

<ol>
  <li>application-properties에 다음과 같이 정의
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=prod
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">@Profile</code> 어노테이션과 함께 <code class="highlighter-rouge">@Configuration</code> 등록</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311111-0f322800-c93f-11eb-9455-436a99434869.png" alt="image" style="zoom:50%;" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121311125-13f6dc00-c93f-11eb-8a93-3923630d84fa.png" alt="image" style="zoom:50%;" /></p>

<ol>
  <li>어플리케이션 실행시 active한 prod에 등록된 hello 빈이 출력됨</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311276-3a1c7c00-c93f-11eb-9698-9abf9172184f.png" alt="image" /></p>

<h3 id="profile과-activeprofiles">@Profile과 @ActiveProfiles</h3>
<ul>
  <li>서로 다른 환경에서 서로 다른 profile을 활성화하여 필요한 빈만 등록하도록 하는 어노테이션</li>
  <li><code class="highlighter-rouge">@Profile</code>은 SpringBootApplication을 실행할 때 사용</li>
  <li><code class="highlighter-rouge">@ActiveProfiles</code>은 테스트 환경에서 사용</li>
</ul>

<h2 id="applicationproperties">application.properties</h2>

<ul>
  <li>application-{profile}.properties 형식으로 파일 생성</li>
  <li>이는 <code class="highlighter-rouge">@ConfigurationProperties</code>로 간주되고 로드됨
    <ul>
      <li>*.properties , *.yml 파일에 있는 property를 자바 클래스에 값을 가져와서(바인딩) 사용할 수 있게 해주는 어노테이션</li>
    </ul>
  </li>
  <li>application-{profile}.properties은 application.properties 보다 우선순위가 높게됨</li>
  <li>빌드할 때 다음과 같은 명령어와 함께 특정 환경설정을 적용할 수 있음
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=production
</code></pre></div>    </div>
  </li>
  <li>properties 파일에 <code class="highlighter-rouge">spring.profiles.include</code>를 통해 추가할 프로파일을 설정할 수 있음</li>
</ul>

<h4 id="example-1">Example</h4>

<p><strong>application-properties</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev
profile-common.name = default_name_mazzi
defaultonly.name = defualt_name
</code></pre></div></div>
<p><strong>application-prod.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = test_name_mazzi
testonly.name = test_name
</code></pre></div></div>
<p><strong>application-dev.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = dev_name_mazzi
devonly.name = dev_name
</code></pre></div></div>
<p><strong>AppRunner</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="n">ApplicationRunner</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"spring.profiles.active : "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">getOptionValues</span><span class="o">(</span><span class="s">"spring.profiles.active"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Enviroment's Active Profile : "</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">()));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"defaultonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"defaultonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"testonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"testonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"devonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"devonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"profile-common.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"profile-common.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>실행 결과</strong></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121315869-b6b15980-c943-11eb-83a9-7e4214b18fe6.png" alt="image" style="zoom:50%;" /></p>

<ul>
  <li>profile-common.name는 모든 프로퍼티 파일이 공통으로 가진 프로퍼티</li>
  <li>dev 프로파일을 활성화</li>
  <li>공통 속성인 <code class="highlighter-rouge">profile-common.name</code>은 우선순위가 높은 dev 프로파일의 것으로 오버라이드 됨</li>
</ul>

<hr />
<h3 id="참고자료">참고자료</h3>
<ul>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">공식문서</a></li>
  <li><a href="https://yangbox.tistory.com/35">스프링부트 프로파일(Springboot Profile)로 다른 환경 구성하기</a></li>
  <li><a href="https://engkimbs.tistory.com/766">스프링 부트 프로파일(Spring Boot Profile)</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Auth 강의</title>
	  <link>//lecture-auth</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//lecture-auth</guid>
	  <description><![CDATA[
	     <h2 id="피드백-강의">피드백 강의</h2>

<h3 id="인증-헤더">인증 헤더</h3>

<p>로그인을 통해 토큰을 발급 받은 후 헤더에 Authorization에 토큰을 실어보낸다.<br />
왜 굳이 이 헤더에 토큰을 넣어 보낼까?</p>

<h3 id="http-인증">HTTP 인증</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/567b6a87-15f7-4409-be6a-2a4baf9b3ffb/image.png" style="zoom:50%;" /></p>

<p>HTTP 프로토콜의 정의이기 때문이다.</p>

<ol>
  <li>클라이언트가 “/” 요청을 보낸다.</li>
  <li>서버는 접근을 할 수 있는지 확인하고, 없으면 401을 보낸다.</li>
  <li>여기서는 basic이라는 방식으로 토큰을 검증하고 있다. 잘못되었으니 다시 요청해!</li>
</ol>

<h3 id="http-인증-스킴">HTTP 인증 스킴</h3>

<h4 id="basic">Basic</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e9a8db3-4221-43a8-84fa-c2f81f371ab1/image.png" style="zoom:33%;" /></p>

<ul>
  <li>base64를 이용해 인코딩된 사용자의 id/pw 쌍의 인증 정보를 전달</li>
  <li>안전을 위해 HTTPS(TLS) 연결 위에서 발생되어야 함</li>
</ul>

<h4 id="bearer">Bearer</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d631b9a8-b41d-438e-8038-6299f044616a/image.png" style="zoom:33%;" /></p>

<ul>
  <li>bearer token이라는 보안 토큰을 활용하는 인증 스킴</li>
  <li>Outh2.0에서 사용하기 위해 만들어짐</li>
</ul>

<h2 id="jwt">JWT</h2>

<ul>
  <li>Json Web Token</li>
  <li>웹 표준 (RFC 7519)</li>
  <li>자체적으로 검증되었음을 증명해주는 signature를 포함</li>
  <li>생성시 검증이나 권한 인가 시 필요한 값을 넣어 상태를 따로 관리하지 않아도 됨</li>
</ul>

<h3 id="토큰의-구성">토큰의 구성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1bcb51b5-e245-4389-9b50-a6d91bc27d2d/image.png" style="zoom:50%;" /></p>

<h4 id="1-header">1. Header</h4>

<ul>
  <li>토큰에 대한 해석 방법</li>
  <li>alg : 시그니처에서 사용할 알고리즘 방법</li>
  <li>typ : 토큰의 타입</li>
</ul>

<h4 id="2-payload">2. Payload</h4>

<ul>
  <li>토큰의 내용, 전달할 내용</li>
  <li>payload의 각각의 값을 클레임이라고 함</li>
  <li>sub : 클레임의 제목</li>
  <li>name :</li>
  <li>iat : 생성 시간</li>
  <li>이 역시도 base64로 인코딩</li>
</ul>

<h4 id="3-signature">3. Signature</h4>

<ul>
  <li>헤더와 페이로드가 변조되지 않았음을 검즌</li>
  <li>base64로 인코딩을 하고, 알고리즘과 키값으로 해독</li>
</ul>

<p><strong>basic과 bearer 둘 다 base64로 인코딩 하면 어떻게 구별하나요?</strong></p>

<p>이는 서버에서 페이크처럼 쓸 수 있지!</p>

<p><strong>payload가 같으면 토큰 값도 같아지나요?</strong></p>

<p>근데 아마 iat가 달라서 다를 수 밖에 없을 듯</p>

<hr />

<h2 id="dispatcher-servlet">Dispatcher Servlet</h2>

<h3 id="요청에-따라-수행할-로직-분기">요청에 따라 수행할 로직 분기</h3>

<h3 id="dispatcherservlet-위치">DispatcherServlet 위치</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a3187c31-d891-43dc-af7a-bb4cde6ab4b0/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Handler 앞에 Interceptor가 있음</li>
</ul>

<p>MVC Config 객체도 모두 빈이었다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Configuration 강의</title>
	  <link>//spring-configuration-lec</link>
	  <author></author>
	  <pubDate>2021-05-25T19:18:00+09:00</pubDate>
	  <guid>//spring-configuration-lec</guid>
	  <description><![CDATA[
	     <h2 id="배경-지식-강의">배경 지식 강의</h2>

<p>스프링 컨테이너와 스프링빈</p>

<h3 id="컨테이너">컨테이너</h3>

<p>스프링 컨테이너에 빈을 등록하기 위해서는 Configuration이 필요하다.</p>

<ul>
  <li>XML</li>
  <li>Annotation 기반의 configuration</li>
  <li>java bean  configuration</li>
</ul>

<h3 id="xml로-configuration-설정하는-예시">XML로 Configuration 설정하는 예시</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userRepository"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserRepository"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userRepository"</span> <span class="na">ref=</span><span class="s">"userRepository"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<ul>
  <li>userRepository와 userService를 빈으로 등록함</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application-config.xml"</span><span class="o">);</span>

<span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">ClassPathXmlApplicationContext</code>로 해당 XML파일을 로드해온다.</li>
  <li><code class="highlighter-rouge">getBeanDefinitionNames()</code> : 등록된 빈이름을 가져온다.</li>
</ul>

<h3 id="java-bean-configuration">java bean configuration</h3>

<h4 id="학습-테스트-코드">학습 테스트 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JavaConfigTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">javaConfig</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

        <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">authService</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>HelloApplication 클래스를 기반으로 빈 등록을 할 것이다.</li>
</ul>

<h4 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="o">{</span>

    <span class="c1">// AuthService 빈을 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthService</span> <span class="nf">authService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthService</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// AuthenticationPrincipalArgumentResolver를 빈 등록하고 authService에 대한 의존성을 주입하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">authenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Configuration</code> : 메타 데이터를 설정할 수 있는 클래스가 된다.</li>
  <li><code class="highlighter-rouge"> @Bean</code> 과 특정 객체를 반환하는 메서드로 해당 객체를 빈으로 등록할 수 있다.</li>
  <li>빈들의 의존성 또한 직접 맺어줄 수 있다.</li>
</ul>

<p><strong>@Configuration 클래스도 빈 등록이 되나요?</strong></p>

<p>🙆‍♀️</p>

<p><strong>@Configuration 클래스의 메서드 순서와 빈 등록 순서는 상관이 없나요?</strong></p>

<p>🙆‍♀️</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">useSpringBean</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// 싱글톤 // new AuthService()이니까</span>
    <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthenticationPrincipalArgumentResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">resolver</span><span class="o">.</span><span class="na">getAuthService</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>resolver에 있는 AuthService 객체와 빈으로 등록된 AuthService가 같은 객체인가?</strong></p>

<p>🙆‍♀️</p>

<hr />

<h2 id="외부-파일의-값을-이용하기">외부 파일의 값을 이용하기</h2>

<h3 id="properties-파일-접근">properties 파일 접근</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PropertySourceConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PropertySourceConfig</span><span class="o">(</span><span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">env</span> <span class="o">=</span> <span class="n">env</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// application.properties의 security-jwt-token-secret-key 값을 활용하여 JwtTokenKeyProvider를 빈으로 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">JwtTokenKeyProvider</span> <span class="nf">jwtTokenKeyProvider</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JwtTokenKeyProvider</span><span class="o">(</span><span class="s">"security-jwt-token-secret-key"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Environment 라는 필드가 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">key</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">PropertySourceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">JwtTokenKeyProvider</span> <span class="n">jwtTokenKeyProvider</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JwtTokenKeyProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jwtTokenKeyProvider</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.ih1aovtQShabQ7l0cINw4k1fagApg3qLWiB8Kt59Lno"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">PropertySourceConfig</code> 클래스로 컨텍스트를 만든다.</li>
  <li>사실 이 properties를 객체로 만들어 접근할 수도 있다.</li>
</ul>

<h3 id="value-주입">@Value 주입</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴포넌트 스캔을 통한 빈 등록</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenExpireProvider</span> <span class="o">{</span>
    <span class="c1">// application.properties의 security-jwt-token-expire-length 값을 활용하여 validityInMilliseconds값 초기화 하기</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtTokenExpireProvider</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${security-jwt-token-expire-length}"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">validityInMilliseconds</span> <span class="o">=</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getValidityInMilliseconds</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="c1">// nextstep.helloworld.core.environment 내에 있는 스프링 빈을 스캔하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"nextstep.helloworld.core.environment"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>환경에 따라 properties 설정이 가능한가요?</strong></p>

<p>🙆‍♀️ 환경에 맞게 deploy하기 - profile</p>

<hr />

<h2 id="스프링-컨테이너-설정-방법-히스토리">스프링 컨테이너 설정 방법 히스토리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/55f6f1f7-1e78-4099-814c-d884510efb89/image.png" style="zoom:67%;" /></p>

<p>컨테이너 설정을 할 때는 메타정보를 통해 이루어진다.</p>

<p>맨 처음에는 <strong>XML기반</strong>으로 진행되었다.<br />
이러면 프로덕션 코드와 의존 관계, 빈 등록 정보를 분리할 수 있었다.</p>

<p>이후 <strong>어노테이션 기반</strong>이 등장하면서 XML과 혼용하여 사용하였다.<br />
등록할 빈들을 어노테이션으로 관리하였다.</p>

<p>Spring 3.0부터는 <strong>Java Bean 기반</strong>으로 이루어졌다.<br />
XML로 관리하던 내용들을 Bean 등록을 통해 관리하였다.</p>

<hr />

<h3 id="auto-configuration">Auto Configuration?</h3>

<ul>
  <li><strong>jar dependency 기반</strong>으로 스프링 애플리케이션을 자동으로 설정해준다.</li>
</ul>

<p>별다른 설정을 하지 않았는데도, DB 등에 관련한 것들을 마음 껏 쓸 수 있었다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/01ebb7bc-6306-49f3-9b00-5f4e9e62682e/image.png" style="zoom:67%;" /></p>

<p>그 이유는 <code class="highlighter-rouge">@SpringBootApplication</code> 에 있는 <code class="highlighter-rouge">@EnableAutoConfiguration</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2b3a167-8bab-45e0-ae77-20ac1ee0521e/image.png" style="zoom:33%;" /></p>

<p>컨텍스트를 로드하면 이정도의 AutoConfiguration들이 등록된다.</p>

<p>ex) jdbcTemplate을 생성해주지 않았는데도 자동으로 주입된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a4b8b58e-311e-4c72-8f15-8f3c3287666d/image.png" style="zoom:50%;" /></p>

<p><strong>빈으로 등록되지 않은 클래스를 사용하면 컴파일 에러가 떠야하는데 나지 않는 이유는?</strong></p>

<p><code class="highlighter-rouge">@ConditionalOnClass</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a24ebfbc-d8dd-4cca-9e92-07163b4e6e85/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DataSource, JdbcTemplate이 로드가 되면 동작한다.</li>
</ul>

<h4 id="h2consoleautoconfiguration">H2ConsoleAutoConfiguration</h4>

<p>h2 DB설정을 해주지 않았는데도 h2와 관련된 설정이 자동으로 된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/95850513-5786-4b7a-b2e0-efc5d5680cf2/image.png" style="zoom:67%;" /></p>

<p>이것도 이미 등록되어있기 때문에 가능하다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 4. MVC 프레임워크 만들기</title>
	  <link>//spring-mvc-4</link>
	  <author></author>
	  <pubDate>2021-05-04T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-4</guid>
	  <description><![CDATA[
	     <h2 id="mvc-프레임워크-만들기">MVC 프레임워크 만들기</h2>

<h2 id="프론트-컨트롤러-패턴">프론트 컨트롤러 패턴</h2>

<p>프론트 컨트롤러도 서블릿이다.<br />
요청을 모두 받고 요청에 맞는 컨트롤러를 호출한다.</p>

<h3 id="특징">특징</h3>

<p>프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받고, 요청에 맞는 컨트롤러를 찾아서 호출한다.<br />
입구를 하나로 묶는다.<br />
프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.</p>

<h3 id="스프링-웹-mvc와-프론트-컨트롤러">스프링 웹 MVC와 프론트 컨트롤러</h3>

<p>스프링 웹 MVC의 핵심도 바로 FrontController이다. (DispatcherServlet이 프론트 컨트롤러 패턴으로 되어있다.)</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2493682-0c37-4a1c-93c4-f2ffd02e7862/image.png" style="zoom: 67%;" /></p>

<p>ControllerV1을 인터페이스로 만들고 이를 구현한 Controller들을 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV1</span> <span class="kd">implements</span> <span class="n">ControllerV1</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="frontcontrollerservletv1">FrontControllerServletV1</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV1"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v1/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV1</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV1</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV1</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Controller 정보를 가진 서블릿인 FrontContoller를 구현한다.</p>

<ul>
  <li><strong>urlPatterns</strong> :  “/front-controller/v1/”를 포함한 하위 모든 요청을 하나의 서블릿에서 받아들인다.</li>
  <li><strong>controllerMap</strong> : key-매핑 URL, value-호출될 컨트롤러</li>
  <li><strong>service()</strong> : reqeustURI를 조회하여 실제 호출할 컨트롤러를 찾고 해당 컨트롤러를 실행(<code class="highlighter-rouge">process()</code>)한다.</li>
</ul>

<p>여러 Controller와 서블릿이 하나의 JSP를 재사용하고 있다.</p>

<hr />

<h2 id="view-분리">View 분리</h2>

<p>Controller에서 View로 이동하는 부분이 중복된다.<br />
Controller는 MyView만 반환해주면 된다.</p>

<h4 id="controllerv2">ControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV2</span> <span class="o">{</span>
    <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스를 구현하므로 반환 타입을 맞출 수 있다.</li>
</ul>

<h4 id="myview">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewPath</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewPath</span> <span class="o">=</span> <span class="n">viewPath</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="memberformcontrollerv2">MemberFormControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV2</span> <span class="kd">implements</span> <span class="n">ControllerV2</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>viewPath를 가지고 있는 MyView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv2">FrontControllerServletV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV2"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV2</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV2</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV2</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="model-추가">Model 추가</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9a6ede47-f242-4b1f-a88e-08f055df0508/image.png" style="zoom:67%;" /></p>

<h3 id="서블릿-종속성-추가">서블릿 종속성 추가</h3>

<p>컨트롤러 입장에서 <code class="highlighter-rouge">HttpServletRequest</code>, <code class="highlighter-rouge">HttpServletResponse</code>가 필요하지 않다.<br />
요청 파라미터를 Map으로 넘기면 컨트롤러가 서블릿이 아니어도 동작할 수 있다.</p>

<h3 id="뷰-이름-중복-제거">뷰 이름 중복 제거</h3>

<p>현재 컨트롤러에서 지정하는 뷰 이름에는 중복(<code class="highlighter-rouge">/WEB-INF/views/</code>)이 존재한다.<br />
컨트롤러는 뷰의 논리 이름을 반환하고, 물리 이름은 프론트 컨트롤러에서 처리하도록 변경해보자.<br />
논리적 물리적 이름을 구분하면 나중에 변경할 때 컨트롤러를 변경할 일이 없다.</p>

<h3 id="modelview">ModelView</h3>

<p>Model을 전달하기 위해서 <code class="highlighter-rouge">request.setAttribute()</code> 를 사용하여 데이터를 저장하고 뷰에 전달했다.<br />
서블릿의 종속성을 제거하기 위해, Model을 따로 만들고 View 이름까지 전달하는 객체를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">ModelView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewName</span> <span class="o">=</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controllerv3">ControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV3</span> <span class="o">{</span>
    <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>ModelView를 반환하도록 한다.</li>
</ul>

<h4 id="membersavecontrollerv3">MemberSaveControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV3</span> <span class="kd">implements</span> <span class="n">ControllerV3</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="s">"save-result"</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>논리 이름을 ModelView 객체에 넣어 생성하도록 한다.</li>
  <li>모델에 뷰에 필요한 객체를 담고 ModelView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv3-일부">FrontControllerServletV3 일부</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">createParamMap()</code> : HttpServletRequest의 파라미터 정보를 Map으로 변경한다.</li>
  <li><code class="highlighter-rouge">viewResolver()</code> : 컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.</li>
  <li><code class="highlighter-rouge">view.render(mv.getModel(), req, resp)</code> : 뷰 객체를 통해  HTML 화면을 렌더링한다.</li>
</ul>

<h4 id="myview-1">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">modelToRequestAttribute</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
    <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
    <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="단순하고-실용적인-컨트롤러">단순하고 실용적인 컨트롤러</h2>

<p>컨트롤러 인터페이스를 구현하면서 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 번거롭다.<br />
컨트롤러는 View의 이름만 변경하도록, 실용성 있도록 변경한다.</p>

<h4 id="controllerv4">ControllerV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV4</span> <span class="o">{</span>
    <span class="cm">/**
     *
     * @param paramMap
     * @param model
     * @return viewName
     */</span>

    <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>view 이름을 반환하도록 변경한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV4</span> <span class="kd">implements</span> <span class="n">ControllerV4</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"save-result"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Controller에서는 필요한 값을 꺼내고, 비즈니스 로직을 호출한 후 viewName만을 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv4">FrontControllerServletV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV4"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV4</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV4</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV4</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
      	<span class="c1">// model </span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>프론트 컨트롤러에서 model을 만들고 각 Controller에 paramMap과 model을 넘겨 처리를 하고, viewName을 반환받는다.</li>
  <li>modelView에서 model을 꺼낼 필요가 없다.</li>
</ul>

<p>하지만, 지금 ControllerV4 인터페이스로 받을 수 있는 컨트롤러를 제한하고 있다.</p>

<hr />

<h2 id="유연한-controller---어댑터-패턴">유연한 Controller - 어댑터 패턴</h2>

<p>지금까지의 프론트 컨트롤러는 한가지 인터페이스만 사용이 가능했었다. <br />
어떠한 컨트롤러도 호환이 가능하도록 어댑터 패턴을 사용한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0f169df9-469c-4e38-b61c-2cf42f872444/image.png" alt="" /></p>

<ul>
  <li>핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었다. 이 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.</li>
  <li>기존에는 프론트 컨트롤러가 바로 컨트롤러를 호출하였지만, 이제는 어댑터를 통해서 호출한다.</li>
  <li>핸들러 : 컨트롤러의 좀 더 넓은 범위. 어댑터가 있기 때문에 컨트롤러 개념 뿐만 아니라 해당하는 어댑터만 있으면 처리가 가능하다.</li>
</ul>

<h4 id="myhandleradapter">MyHandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">);</span>
    <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">supports(Object handler)</code> : 어댑터가 해당 컨트롤러를 처리할 수 있는지 반환</li>
  <li><code class="highlighter-rouge">handle(...)</code> : 어댑터는 실제 컨트롤러를 호출하고 결과로 ModelView를 반환한다.</li>
  <li>만약 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 직접 생성한다.</li>
  <li>프론트 컨트롤러가 아닌 어댑터가 실제 컨트롤러를 호출한다.</li>
</ul>

<h4 id="controllerv3handleradapter">ControllerV3HandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV3HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV3</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>supports()로 ControllerV3 타입인지 확인하고 맞다면 호출한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV5"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v5/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV5</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">handlerMappingMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MyHandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV5</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">initHandlerMappingMap</span><span class="o">();</span>
        <span class="n">initHandlerAdapters</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerMappingMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV3</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerAdapters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ControllerV3HandlerAdapter</span><span class="o">());</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// 요청 정보로 핸들러를 가져온다.</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 어댑터를 찾는다.</span>
        <span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyHandlerAdapter</span> <span class="nf">getHandlerAdapter</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">:</span> <span class="n">handlerAdapters</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">adapter</span><span class="o">.</span><span class="na">supports</span><span class="o">(</span><span class="n">handler</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">adapter</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"handler adapter를 찾을 수 없습니다. handler "</span> <span class="o">+</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 : 핸들러 매핑과 어댑터를 초기화한다.</li>
  <li>매핑 정보인 handlerMappingMap 이 Object Map으로 아무 타입이나 받을 수 있다.</li>
  <li>핸들러 매핑</li>
  <li>핸들러를 처리할 수 있는 어댑터 조회</li>
  <li>어댑터 호출</li>
</ul>

<h4 id="controllerv4handleradapter-예제">ControllerV4HandlerAdapter 예제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV4HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV4</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
      
        <span class="c1">//  viewName만 반환할 경우 ModelView 객체로 만들어주는 역할도 한다.</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>어댑터가 호출하는 ControllerV4는 viewName만 반환하는데, 이때 어댑터에서 이를 ModelView 객체로 만들어 반환한다.</li>
</ul>

<p>프론트 컨트롤러 입장에서는 핸들러 어댑터에만 의존하고 있다.</p>

<p>이 MVC 프레임 워크는 역할과 구현이 분리되어 있다.  <br />
모든 것을 인터페이스로 만들고 구현하고 싶은 부분만 주입하면 완벽! (스프링 MVC는 뷰와 뷰리졸버 다 인터페이스로 구현되어있다.)
어떤 핸들러를 추가하고 싶어도 우리는 핸들러어댑터만 구현해주면 된다!</p>

<h4 id="ex-requestmapping">ex) @RequestMapping()</h4>

<p>RequestMappingHandlerAdapter : 위 어노테이션이 붙은 핸들러를 처리해주는 어댑터</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-5</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-5</guid>
	  <description><![CDATA[
	     <h2 id="스프링-mvc-전체-구조">스프링 MVC 전체 구조</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/6b0d1860-915b-4819-9d2f-9521353e2142/image.png" style="zoom:80%;" /></p>

<h4 id="지금껏-만들었던-프레임-워크---스프링-mvc">지금껏 만들었던 프레임 워크 &lt;-&gt; 스프링 MVC</h4>

<ul>
  <li>FrontController - DispatcherServlet</li>
  <li>HandlerMappingMap - HandlerMapping</li>
  <li>MyHandlerAdapter - HandlerAdapter</li>
  <li>ModelView - ModelAndView</li>
  <li>ViewResolver - ViewResolver</li>
  <li>MyView - View</li>
</ul>

<h3 id="dispatcherservlet">DispatcherServlet</h3>

<p>DispacherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/630a4870-d2a9-4dec-a4c3-ccfe49db023a/image.png" style="zoom:67%;" /></p>

<p>스프링 부트는 DispatcherServlet를 자동으로 등록하면서 모든 경로에 대해서 매핑한다.</p>

<h4 id="요청의-흐름">요청의 흐름</h4>

<p>DispatcherServlet이 호출되면 <code class="highlighter-rouge">service()</code> 가 호출된다.<br />
최종적으로는 DispatcherServlet.doDispatch()` 가 호출된다.</p>

<h4 id="dodispatch">doDispatch()</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/cbfe84c7-a2f8-4bf1-a082-42c141b2e287/image.png" style="zoom:67%;" /></p>

<p>DispatcherServlet의 doDispatch()의 주요 부분들을 살펴보자!</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e644c4e-cd85-405a-a1ea-f063768df8a1/image.png" alt="" /></p>

<ul>
  <li>ModelAndView</li>
  <li>getHandler() : 핸들러를 가져온다.
    <ul>
      <li>핸들러가 없으면 404로 셋팅을 한다.</li>
    </ul>
  </li>
  <li>getHandlerAdapter() : 핸들러 어댑터를 가져온다.</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/536712af-32f3-41fc-af6f-5d885365747d/image.png" style="zoom:67%;" /></p>

<ul>
  <li>핸들러 어댑터로 핸들러 호출하고 ModelAndView 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/eef62fa6-513d-4ed3-b7a3-18ad10ae0074/image.png" style="zoom:67%;" /></p>

<ul>
  <li>view 렌더링 호출</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5a04d84a-5b0c-456c-baa1-ddf4401c2f36/image.png" alt="" /></p>

<ul>
  <li>ViewResolver를 통해서 view를 찾아 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/56d8ddca-3457-4b3a-a7b8-c462504d98d8/image.png" alt="" /></p>

<ul>
  <li>View 렌더링</li>
</ul>

<h3 id="스프링-mvc-구조">스프링 MVC 구조</h3>

<ol>
  <li>핸들러 조회 : 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러 조회</li>
  <li>핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터 조회</li>
  <li>핸들러 어댑터 실행 : 핸들러 어댑터 실행</li>
  <li>핸들러 실행 : 핸들러 어댑터가 실제 핸들러 실행</li>
  <li>ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환</li>
  <li>viewResolver 호출 : JSP의 경우 <code class="highlighter-rouge">InternalResourceViewResolver</code> 가 자동으로 등록되고 사용됨</li>
  <li>view 반환 : 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고 렌더링 역할을 담당하는 뷰 객체 반환
    <ul>
      <li>JSP의 경우 InternalResourceViewResolver(JstlView) 를 반환하고 내부에 forward() 로직이 있다.</li>
    </ul>
  </li>
  <li>뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.</li>
</ol>

<p>가장 큰 장점은 DispatcherServlet  코드의 변경 없이 원하는 기능을 변경하거나 확장할 수 있다.<br />
대부분 확장 가능하도록 인터페이스로 제공한다.</p>

<p>하지만 사실 우리가 확장할 컨트롤러는 거의 없다.</p>

<hr />

<h2 id="핸들러-매핑과-핸들러-어댑터">핸들러 매핑과 핸들러 어댑터</h2>

<h3 id="과거-controller-인터페이스">과거 Controller 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Controller</span> <span class="o">{</span>
    <span class="n">ModelAndView</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Component</code> :  ““/springmvc/old-controller: 라는 이름의 스프링 빈으로 등록</li>
  <li>빈의 이름으로<strong>URL</strong>을 매핑</li>
</ul>

<h4 id="위-컨트롤러가-호출되는-방식">위 컨트롤러가 호출되는 방식</h4>

<ul>
  <li><strong>HandlerMapping</strong>(핸들러 매핑)
    <ul>
      <li>핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 함
 ex) <strong>스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑</strong> 필요</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>(핸들러 어댑터)
    <ul>
      <li>핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요
 ex) Controller 인터페이스를 실행할 수 있는 핸들러 어댑터를 찾고 실행해야 함</li>
    </ul>
  </li>
  <li>스프링은 이미 필요한 핸들러 매핑과 핸들러 어댑터를 대부분 구현해두었다.</li>
</ul>

<h4 id="스프링-부트가-자동으로-등록하는-핸들러-매핑과-핸들러-어댑터">스프링 부트가 자동으로 등록하는 핸들러 매핑과 핸들러 어댑터</h4>

<ul>
  <li><strong>HandlerMapping</strong>
    <ul>
      <li>RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 핸들러를 찾는다. 
(위 예제의 @Component)</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>
    <ul>
      <li>RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>HttpRequestHandlerAdapter : HttpRequestHandler 처리</li>
      <li>SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용) 처리</li>
    </ul>
  </li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로핸들러를찾아주는 BeanNameUrlHandlerMapping가 실행에 성공하고 핸들러인 OldController 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다. SimpleControllerHandlerAdapter 가 Controller 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 SimpleControllerHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>SimpleControllerHandlerAdapter 는 핸들러인 OldController 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<h3 id="httprequesthandler"><strong>HttpRequestHandler</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HttpRequestHandler</span> <span class="o">{</span>
         <span class="kt">void</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><strong>서블릿과 가장 유사한 형태</strong>의 핸들러</li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회-1"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로 핸들러를찾아주는 BeanNameUrlHandlerMapping 가 실행에 성공하고 핸들러인 MyHttpRequestHandler 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회-1"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다.
HttpRequestHandlerAdapter 가 HttpRequestHandler 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행-1"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 HttpRequestHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>HttpRequestHandlerAdapter 는 핸들러인 MyHttpRequestHandler 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<hr />

<h2 id="뷰-리졸버">뷰 리졸버</h2>

<h4 id="application-properties">application-properties</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
</code></pre></div></div>

<p>스프링 부트는 <code class="highlighter-rouge">InternalResourceViewResolver</code> 라는 뷰 리졸버를 자동으로 등록한다.<br />
이때 <code class="highlighter-rouge">application.properties</code> 에 등록한 <code class="highlighter-rouge">spring.mvc.view.prefix</code> , <code class="highlighter-rouge">spring.mvc.view.suffix</code> 설정 정보를 사용해서 등록한다.</p>

<h4 id="스프링-부트가-자동으로-등록하는-뷰-리졸버">스프링 부트가 자동으로 등록하는 뷰 리졸버</h4>

<ul>
  <li>BeanNameViewResolver : 빈 이름으로 뷰를 찾아서 반환</li>
  <li>InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환</li>
</ul>

<p><strong>1.</strong> <strong>핸들러 어댑터 호출</strong><br />
핸들러 어댑터를 통해 논리 뷰 이름을 획득</p>

<p><strong>2. ViewResolver 호출</strong></p>

<p>new-form 이라는 뷰 이름으로 viewResolver를 순서대로 호출
InternalResourceViewResolver 가 호출됨</p>

<h5 id="3-internalresourceviewresolver"><strong>3. InternalResourceViewResolver</strong></h5>

<p>내부에서 자원을 찾을 수 있음을 의미한다.<br />
이 뷰 리졸버는 InternalResourceView 를 반환</p>

<h5 id="4-뷰---internalresourceview">4. <strong>뷰</strong> <strong>- InternalResourceView</strong></h5>

<p>InternalResourceView 는 JSP처럼 포워드 forward() 를 호출해서 처리할 수 있는 경우에 사용</p>

<h5 id="5-viewrender">5. view.render()</h5>

<p>view.render() 가 호출되고 InternalResourceView 는 forward() 를 사용해서 JSP를 실행한다</p>

<p>Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver 를 등록해야 한다. <br />
최근에는 라이브러리만 추가하면 스프링 부트가 이런 작업도 모두 자동화해준다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-3</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-3</guid>
	  <description><![CDATA[
	     <h2 id="서블릿-jsp-mvc-패턴">서블릿, JSP, MVC 패턴</h2>

<p>서블릿으로 만들어보고, JSP로 만들어보고 마지막으로 MVC로 만들어 볼 것이다!</p>

<h3 id="서블릿으로-만들었을-때-일부-예제">서블릿으로 만들었을 때 일부 예제</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"memberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">PrintWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;meta charset=\"UTF-8\"&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;title&gt;Title&lt;/title&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;a href=\"/index.html\"&gt;메인&lt;/a&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;id&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;username&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;age&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tbody&gt;"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Member</span> <span class="n">member</span> <span class="o">:</span> <span class="n">members</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tr&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tr&gt;"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tbody&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>복잡하지만… 동적으로 원하는 HTML을 만들 수 있다.</li>
  <li>각 요청마다 Servlet을 만들어야 한다.</li>
  <li>응답할 HTML을 자바 코드 내에 작성해야한다.</li>
</ul>

<hr />

<h2 id="jsp">JSP</h2>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<h5 id="import문-작성">import문 작성</h5>

<pre><code class="language-jsp">&lt;%@ page import="hello.servlet.domain.member.MemberRepository" %&gt;
&lt;%@ page import="hello.servlet.domain.member.Member" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<pre><code class="language-jsp">&lt;%
    // request, response 사용 가능
    MemberRepository memberRepository = MemberRepository.getInstance();
    System.out.println("save.jsp");
    String username = request.getParameter("username");
    int age = Integer.parseInt(request.getParameter("age"));
    Member member = new Member(username, age);
    System.out.println("member = " + member);
    memberRepository.save(member);

%&gt;
</code></pre>

<p><code class="highlighter-rouge">&lt;% %&gt;</code> 안에 자바코드를 작성할 수 있다.</p>

<ul>
  <li>비즈니스 로직과 뷰가 연결되어 있다.</li>
  <li>요구사항이 변경되면 뷰를 수정하다가 비즈니스 로직도 같이 수정될 수 있다.</li>
  <li>유지보수성이 떨어진다.</li>
</ul>

<hr />

<h2 id="mvc">MVC</h2>

<h3 id="servlet-jsp의-문제점">Servlet, JSP의 문제점</h3>

<h4 id="너무-많은-역할">너무 많은 역할</h4>

<p>하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하고, 또한 유지보수가 어려워진다.</p>

<h4 id="변경의-라이프-사이클">변경의 라이프 사이클</h4>

<p>비즈니스 로직과 뷰의 변경의 라이프 사이클이 다르다.<br />
예를 들어서 UI 를 일부 수정하는 일과 비즈니스 로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분 서로에게 영향을 주지 않는다. <br />
이렇게 변경의 라이프 사이클이 다른 부분을 하나의 코드로 관리하는 것은 유지보수하기 좋지 않다.<br />
레이어를 분리하는 기준은 변경 주기가 다를 때라고 생각하면 편하다.</p>

<h4 id="기능-특화">기능 특화</h4>

<p>뷰 템플릿은 화면을 렌더링 하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.</p>

<h3 id="model-view-controller">Model View Controller</h3>

<p>MVC 패턴은 서블릿이나, JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다.<br />
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.</p>

<h4 id="controller">Controller</h4>

<p>HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.<br />
중앙에서 조종하는 역할. (비즈니스 로직을 담을 수 있지만, 역할이 너무 많아지기 때문에 비즈니스 로직을 호출한다고 하자.)</p>

<h4 id="model">Model</h4>

<p>뷰에 출력할 데이터를 담아둔다.<br />
뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.</p>

<h4 id="view">View</h4>

<p>모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.</p>

<h3 id="mvc-적용하기">MVC 적용하기</h3>

<ul>
  <li>서블릿을 컨트롤러로 사용</li>
  <li>JSP를 뷰로 사용</li>
  <li>HttpServletRequest 객체를 모델로 사용 (<code class="highlighter-rouge">request.setAttribute()</code> , <code class="highlighter-rouge">request.getAttribute() </code>사용)</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1fa7cead-0d71-4afc-a391-a7b7932c9541/image.png" style="zoom:67%;" /></p>

<h4 id="mvcmemberformservlet">MvcMemberFormServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberFormServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/new-form"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberFormServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">dispatcher.forward()</code> : 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.<br />
클라이언트에게 갔다가 오는게 아닌(리다이렉트가 아닌), 서버 내부에서 호출한 것이다.</li>
  <li><code class="highlighter-rouge">/WEB-INF</code> :  이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없어 컨트롤러를 통해서만 접근이 가능하도록 한다.</li>
</ul>

<h4 id="redirect-vs-forward">redirect vs forward</h4>

<ul>
  <li>redirect : 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다.<br />
클라이언트가 인지할 수 있고, URL 경로도 실제로 변경된다.</li>
  <li>forward : 서버 내부에서 일어나는 호출이기 때문에 클라이언트가 인지하지 못한다.</li>
</ul>

<h4 id="mvcmembersaveservlet">MvcMemberSaveServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberSaveServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/save"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberSaveServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="c1">// 비즈니스 로직</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// Model에 데이터를 보관한다. - req 객체에 Map이 있는데 여기에 저장한다.</span>
        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/save-result.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="save-resultjsp">save-result.jsp</h4>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt; 성공
&lt;ul&gt;
    &lt;li&gt;id=${member.id}&lt;/li&gt;
    &lt;li&gt;username=${member.username}&lt;/li&gt;
    &lt;li&gt;age=${member.age}&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="/index.html"&gt;메인&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">${}</code> : jsp가 제공하는 프로퍼티 접근법으로, req에 담겨있는 attribute에 있는 데이터를 가져올 수 있다.</li>
</ul>

<h4 id="mvcmemberlistservlet">MvcMemberListServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/members.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membersjsp-일부">members.jsp 일부</h4>

<pre><code class="language-jsp">&lt;c:forEach var="item" items="${members}"&gt;
    &lt;tr&gt;
        &lt;td&gt;${item.id}&lt;/td&gt;
        &lt;td&gt;${item.username}&lt;/td&gt;
        &lt;td&gt;${item.age}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">&lt;c:forEach&gt;</code> : <code class="highlighter-rouge">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code> 를 선언해야한다.</li>
</ul>

<h3 id="mvc-패턴의-한계">MVC 패턴의 한계</h3>

<h3 id="forward의-중복">forward의 중복</h3>

<p>메서드를 추출해도 되지만, 메서드 호출마저 중복으로 일어난다.</p>

<h4 id="viewpath에-중복">ViewPath에 중복</h4>

<p>prefix인 <code class="highlighter-rouge">/WEB-INF/views/</code> 와 suffix인 <code class="highlighter-rouge">.jsp</code> 가 중복으로 발생한다.<br />
만약 jsp가 아닌 thymeleaf 같은 다른 뷰로 변경한다면 전체 코드를 다 변경해야 한다.</p>

<h4 id="사용하지-않는-코드">사용하지 않는 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span>
</code></pre></div></div>

<p>위 객체는 사용할 수도 있고, 안할수도 있다.</p>

<h4 id="공통-처리가-어렵다">공통 처리가 어렵다.</h4>

<p>컨트롤러에서 공통으로 처리해야 하는 부분이 점점 증가하는 경우를 생각해보자.<br />
단순히 공통 기능을 메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 된다. <br />
또한 호출하는 것 자체도 중복이다.</p>

<h4 id="프론트-컨트롤러front-controller-패턴을-도입하면-이런-문제를-깔끔하게-해결할-수-있다">프론트 컨트롤러(Front Controller) <strong>패턴</strong>을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.</h4>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>

	  ]]></description>
	</item>


</channel>
</rss>
