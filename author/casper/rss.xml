<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>the-businessman-and-fisherman</title>
	  <link>//the-businessman-and-fisherman</link>
	  <author></author>
	  <pubDate>2021-03-14T19:18:00+09:00</pubDate>
	  <guid>//the-businessman-and-fisherman</guid>
	  <description><![CDATA[
	     <h2 id="코드-리뷰-정리">코드 리뷰 정리</h2>
<h3 id="controller에-있는-도메인-로직">Controller에 있는 도메인 로직</h3>
<p><img src="https://images.velog.io/images/new_wisdom/post/56c51213-0e01-48f5-ac72-8e76e77f73f1/image.png" alt="" /></p>

<p>게임 진행을 위해 Controller에 많은 역할을 구현했었다.
위 피드백을 받고 BlackjackGame이라는 객체를 만들어 게임의 진행을 하도록 구현했다.</p>

<p>각각의 플레이어들의 게임을 진행에 Input과 Output이 연결되어 있어서
처음 리팩토링에서는 BlackjackGame에서 플레이어들을 꺼내오고, 
그 플레이어 하나 하나마다 게임을 진행하게 되었다.</p>

<p><strong>BlackjackController 일부</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">askWantToHit</span><span class="o">(</span><span class="n">Player</span> <span class="n">player</span><span class="o">,</span> <span class="n">BlackjackGame</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">isAbleToAskHit</span><span class="o">(</span><span class="n">player</span><span class="o">,</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                <span class="n">Answer</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">InputView</span><span class="o">.</span><span class="na">inputDrawAnswer</span><span class="o">()).</span><span class="na">isYes</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">blackjackGame</span><span class="o">.</span><span class="na">hit</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
            <span class="n">OutputView</span><span class="o">.</span><span class="na">printPlayerCards</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAbleToAskHit</span><span class="o">(</span><span class="n">Player</span> <span class="n">player</span><span class="o">,</span> <span class="n">BlackjackGame</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">blackjackGame</span><span class="o">.</span><span class="na">isNotGameOver</span><span class="o">(</span><span class="n">player</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">OutputView</span><span class="o">.</span><span class="na">printAskOneMoreCard</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/ed3abe31-8b66-4a6d-8a51-5f87404c2b83/image.png" alt="" /></p>

<p>하지만 결국 BlackjackGame에서 플레이어를 <code class="highlighter-rouge">get</code>해와 값을 조회하고,
해당 값에 대한 로직이 Controller에서 처리되고 있었다.</p>

<p>게이츠의 말씀대로 도메인에 있어야 할 로직이 외부인 Controller에서 처리되고 있는 것이다.
또 페어인 다니도 비슷한 리뷰를 받았는데, 
BlackjackGame 객체를 통해 게임 진행 과정을 캡슐화하라 하셨고,
이에 대해서는 <strong>출력을 제외하고 getter가 사용되는 부분이 하나도 남아있지 않아야 
캡슐화가 잘 진행되었다고 볼 수 있다</strong>고 하였다.</p>

<p>위 피드백들로 <strong>게임을 진행하는 역할</strong>을 완전히 BlackjackGame으로 옮기기 위해 
현재 게임이 끝나지 않은 플레이어들을 BlackjackGame에서 관리하도록 하고
(<code class="highlighter-rouge">getCurrentPlayer()</code>), BlackjackGame에서도 Players에게 현재 게임을 
진행해야 하는 Player를 얻어오도록 구현했다.</p>

<p>내가 적용한 부분은 다음과 같다.</p>

<p>###
<img src="https://images.velog.io/images/new_wisdom/post/88b9a4cc-0474-44a4-97b1-4832858046c9/image.png" alt="" /></p>

<h3 id="테스트-코드의-가독성">테스트 코드의 가독성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a30b0ff5-2286-4a1e-819c-8073d35f97f0/image.png" alt="" /></p>

<p>리뷰어님께서 테스트 코드의 가독성을 위해 given, when, then으로 
줄바꿈 할 것을 권해주셨는데, 찾아보니 테스트 코드를 작성할 때 주로 사용하는
<a href="https://brunch.co.kr/@springboot/292">Given-When-Then Pattern</a>을 발견하였다.</p>
<ul>
  <li>
    <p>Given
테스트를 위해 준비를 하는 과정
테스트에 사용하는 변수, 입력 값 등을 정의하거나, Mock 객체를 정의하는 구문 포함</p>
  </li>
  <li>
    <p>When
실제로 액션을 하는 테스트를 실행하는 과정</p>
  </li>
  <li>
    <p>Then
마지막은 테스트를 검증하는 과정
예상한 값, 실제 실행을 통해서 나온 값을 검증</p>
  </li>
</ul>

<p>사실 지금껏 테스트 코드를 짜는 것에만 집중을 하고 가독성은 고려하지 못했던 것 같다.
올바르게 적용한 것인지 확신은 없으나, 
앞으로 테스트 코드를 작성할 때 위 패턴을 지키려 노력해야겠다.</p>

<h3 id="static">static</h3>

<p>static으로 구현하지 않은 이유
맨 처음 미션을 제출할 때는 Deck은 미리 생성되어 있어야 할 카드라 생각하여 static으로 구현하였습니다 !
하지만 곰곰히 생각을 해보니, 
현 프로그램에서 Deck은 플레이어들이 카드를 pop하며 소모하고 있는데,
다수의 사용자가 게임을 진행한다고 했을때 “동일한 Deck을 공유하여 
카드를 소모하는 것이 맞을까?”라는 생각을 하게 되었고,
이 경우 static을 사용하게 되면 게임 로직 중 카드 분배에 문제가 생길 것이라 생각했어요 !
제가 생각했던 캐싱은 <strong>반복적으로 사용되는 인스턴스를 미리 만들어 놓아 메모리 낭비를 줄이는 것</strong>인데 소모되는 Deck에서도 동일하게 적용될 수 있나 의문이 들었어요 !</p>

<p>그래서 리팩토링 과정에서 Deck을 인스턴스로 생성해서 사용하게 되었는데,
제가 static을 사용하여 캐싱하는 개념을 잘 인지하지 못하고 있어 게이츠의 의도를 잘 파악하지 못한 것인지 궁금해요 !</p>

<h2 id="미션-정리">미션 정리</h2>
<h3 id="상태-패턴-적용기">상태 패턴 적용기</h3>
<p>0309 강의에서 이번 미션에 상태 패턴을 적용하여 구현하는 법에 대해 배웠다.
이번 미션을 진행하면서 스스로 제일 이슈라고 생각했던 부분은 
<strong>딜러와 플레이어의 점수만을 가지고 결과를 계산하는 것이 아니라,
딜러와 플레이어의 상태별로 결과를 계산해야했다.</strong></p>

<p>이 부분에 대한 처리를 이번 미션동안 많이 고민해보았었고,
나의 삽질의 과정들을 함께 기록해보려 한다.</p>

<h4 id="1-if문을-통한-처리">1. if문을 통한 처리</h4>
<p>맨 처음 미션을 제출할 때는 각각의 상태에 따른 결과 산출을 if문을 통해서 처리해주었다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 변수로 다음과 같이 compareValue를 가지고 있음
* private final String result;
* private final int compareValue;
*/</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decide</span><span class="o">(</span><span class="n">Dealer</span> <span class="n">dealer</span><span class="o">,</span> <span class="n">Player</span> <span class="n">player</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">WIN</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">STAND_OFF</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">LOSE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
	    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">compareValue</span> <span class="o">==</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">))</span>          
            <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">IllegalArgumentException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>하지만 이렇게 구한 결과에 스스로 다음과 같은 문제점을 느꼈다.</strong></p>
<ul>
  <li>딜러와 플레이어의 상태를 비교하는 동일한 행위를 if문으로 반복해서 처리하여 길어진 <code class="highlighter-rouge">decide()</code></li>
  <li>해당 타입을 구하기 위한 책임이 분리되어 있음 (데이터와 로직 분리되어 있음)</li>
  <li>compareValue인 <code class="highlighter-rouge">1, 0, -1</code> 값이 Result의 의미를 명확히 드러내지 못함</li>
  <li>만약 실수로 <code class="highlighter-rouge">decide()</code>의 if문 한줄을 지웠다면 프로그램 오류</li>
</ul>

<p>때문에 if문으로 처리했던 상태들을 어떻게 줄일 수 있을까 많은 고민을 했다.</p>

<h4 id="2-함수형-인터페이스를-통한-처리">2. 함수형 인터페이스를 통한 처리</h4>
<blockquote>
  <p><a href="https://jojoldu.tistory.com/137">Enum 활용사례 3가지</a>
<a href="https://dev3m.tistory.com/entry/ENUM-Funcational-Interface%EB%A1%9C-if%EB%AC%B8-%EC%A4%84%EC%9D%B4%EA%B8%B0">ENUM + Funcational Interface 활용하기</a></p>
</blockquote>

<p>해결책을 찾아보다, 위 글들을 참고하여 딜러와 플레이어의 상태마다 다른 처리를 
함수형 인터페이스를 사용해 구현해보았다.</p>

<p>이에 스스로 <a href="https://velog.io/@new_wisdom/Java-Functional-Interface-%EB%B6%80%EC%88%98%EA%B8%B0">함수형 인터페이스를 학습하며 정리하고</a> 
Dealer에 대한 Player의 결과를 구하는 로직을 <code class="highlighter-rouge">BiPredicate&lt;T&gt;</code>로 처리했다.
함수형 인터페이스를 사용하여 딜러, 플레이어의 상태별 / 점수별 결과 산출 코드는 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Result</span> <span class="o">{</span>
    <span class="n">WIN</span><span class="o">(</span><span class="s">"승"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerScore</span> <span class="o">&gt;</span> <span class="n">dealerScore</span><span class="o">),</span>
    <span class="n">STAND_OFF</span><span class="o">(</span><span class="s">"무"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="nl">Integer:</span><span class="o">:</span><span class="n">equals</span><span class="o">),</span>
    <span class="n">LOSE</span><span class="o">(</span><span class="s">"패"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerScore</span> <span class="o">&lt;</span> <span class="n">dealerScore</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">result</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">statusPredicate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">scorePredicate</span><span class="o">;</span>

<span class="c1">// ... </span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decide</span><span class="o">(</span><span class="n">User</span> <span class="n">player</span><span class="o">,</span> <span class="n">User</span> <span class="n">dealer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">statusPredicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">player</span><span class="o">.</span><span class="na">isAbleToHit</span><span class="o">(),</span> <span class="n">dealer</span><span class="o">.</span><span class="na">isAbleToHit</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">decideByScore</span><span class="o">(</span><span class="n">player</span><span class="o">.</span><span class="na">score</span><span class="o">(),</span> <span class="n">dealer</span><span class="o">.</span><span class="na">score</span><span class="o">()));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decideByScore</span><span class="o">(</span><span class="kt">int</span> <span class="n">playerScore</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">scorePredicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">))</span>
                <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">"승패 결과 조건에 매치되지 않습니다."</span><span class="o">));</span>
    <span class="o">}</span>
<span class="c1">// ...</span>
</code></pre></div></div>
<p>이렇게 Enum에 함수형 인터페이스를 사용하여 결과 산출을 했을 때,
<strong>스스로 다음과 같은 장점을 느꼈다.</strong></p>
<ul>
  <li>동일한 기능(딜러와 플레이어의 상태를 비교)에 대해 각각 다른 연산을 가지고 있어 
늘어졌던 <code class="highlighter-rouge">decide()</code> 단순화</li>
  <li>(현 프로그램에서는 그럴일이 없겠지만) 새로운 Result 타입이 추가되어도,
메서드의 추가적 수정이 없다.</li>
  <li>타입이 해야 하는 기능에 대해서 가장 잘 알고 있을 수밖에 없는,
자신 안에 로직을 추가하면서, 로직에 대한 명확한 상수명을 가짐</li>
</ul>

<p>이렇게 함수형 인터페이스를 사용하면서 이를 사용했을 경우의 장점을 스스로 생각하고, 
리뷰어님께 질문을 남겼는데 추가적으로 의견을 달아주셨다 👀</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/7f0a6deb-3e53-49b1-8424-87ad3876b191/image.png" alt="" /></p>

<h3 id="상태-패턴">상태 패턴</h3>
<p>미션 2단계를 시작하면서, 베팅 금액을 입력 받고 상태에 따라 수익을 구하는 기능을 추가해야했다.
미션을 시작하기 앞서,
0309 블랙잭 피드백 강의에서 다룬 상태패턴을 적용해 여러 분기처리를 해결하고 싶었고,
이후 스스로 상태 패턴에 대해 더 찾아보고 이번 미션을 통해 
<strong>상태패턴이 무엇이고, 이를 적용하면 어떠한 장점이 있는지 알아보자!</strong>를 목표로
상태패턴 적용길을 걸었다.</p>

<h4 id="내가-적용한-상태-패턴">내가 적용한 상태 패턴</h4>
<p>제이슨 코드를 미리 보고 상태패턴을 시도했기 때문에,
스스로 생각해보지 못한 코드 따라쟁이가 되어버릴까봐 스스로 계속해서
상태별로 다르게 구현해야할 기능들에 대하여 생각해보고 
클래스 다이어그램에 나름대로의 명분을 정리해보았다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/5c238570-b95c-4c63-b6ae-6e4b2ab77716/image.png" alt="" /></p>

<p>또한 아래는 상태 패턴의 콘텍스트인 User 클래스이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Name</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="n">State</span> <span class="n">state</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="n">Money</span> <span class="n">bettingMoney</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="n">Name</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">Name</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initializeCards</span><span class="o">(</span><span class="n">Cards</span> <span class="n">cards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">StateFactory</span><span class="o">.</span><span class="na">generateStateByCards</span><span class="o">(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">isAbleToHit</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">!</span><span class="n">state</span><span class="o">.</span><span class="na">isFinish</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Score</span> <span class="nf">score</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">cards</span><span class="o">().</span><span class="na">totalScore</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Cards</span> <span class="nf">cards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">cards</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">State</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">hit</span><span class="o">(</span><span class="n">Card</span> <span class="n">card</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">changeState</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">card</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">stay</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">changeState</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">stay</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="c1">// ...</span>
</code></pre></div></div>

<p>콘텍스트의 필드로 상태(State)를 가지고 있으며, 
상태에 관련된 기능들을 그 상태에게 메시지를 보내 처리하도록 하였다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/20bb1288-8fec-4e05-a353-61be9fefc696/image.png" alt="" /></p>

<p>위 말은 교육장에서 포비와 이야기를 나누다 인상 깊어 스스로 DM에 남겨놓은 말이다.
말씀대로 디자인 패턴이 무조건 좋은 것은 아니지만, 
개인적으로는 <strong>이번 미션동안 제일 고민했던 부분인 상태에 따른 여러가지 분기처리를
어떻게하면 효과적으로 구현할 수 있을까? 에 대한 좋은 답이 상태패턴이라 생각하여</strong>
상태 패턴을 사용하는 방법과 이점을 느껴보고 싶었기에 스스로 좋은 시도였다고 생각한다 !
물론 다른 미션에서 상태패턴을 적용하라하면 잘 적용할 수 있을지는 모르겠으나,
이번 미션을 통해 이렇게 상태에 따른 분기처리를 줄일 수 있구나, 
디자인 패턴은 이런 장점이 있구나를 느낄 수 있었다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
