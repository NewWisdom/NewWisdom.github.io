<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📌 전략패턴</title>
	  <link>//ocp-stretegy-pattern</link>
	  <author></author>
	  <pubDate>2021-05-24T19:18:00+09:00</pubDate>
	  <guid>//ocp-stretegy-pattern</guid>
	  <description><![CDATA[
	     <h3 id="if---else의-문제점">if - else의 문제점</h3>

<p><strong>example</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isFirstGuest</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isLastGuest</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Item</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">Item</span> <span class="n">item</span> <span class="o">:</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isFirstGuest</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="n">item</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.9</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">item</span><span class="o">.</span><span class="na">isFresh</span><span class="o">())</span> <span class="o">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="n">item</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.8</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">isFirstGuest</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="n">item</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()</span> <span class="o">*</span> <span class="mf">0.8</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="n">item</span><span class="o">.</span><span class="na">getPrice</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="기능이-추가될-경우">기능이 추가될 경우</h4>

<ul>
  <li>새로운 조건문을 직접 추가해주어야 한다.</li>
  <li>때문에 추가되는 기능들이 많아질 수롣 코드 블럭도 점점 증가한다.</li>
  <li>이럴 경우 유지보수성이 떨어진다.</li>
</ul>

<h4 id="누락될-위험">누락될 위험</h4>

<ul>
  <li>(안 좋은 예시이지만) 같은 기능을 하는 로직을 서로 다른 클래스에서 사용하기 위해 복붙을 했을 경우, 한 쪽의 기능이 변경되면 이를 복붙한 모든 클래스를 전부 수정해주어야 한다.</li>
</ul>

<p><strong>때문에 if-else를 사용하면 유지보수가 어렵다.</strong></p>

<hr />

<h2 id="ocp---open-close-principle-개방-폐쇄의-원칙">OCP - Open Close Principle (개방 폐쇄의 원칙)</h2>

<p>소프트웨어 구성요소(컴포넌트, 클래스, 모듈, 함수)는 <strong>확장에 대해서는 개방되어야 하지만 변경에 대해서는 폐쇄</strong>되어야 한다.<br />
기존 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계되어야 한다.<br />
기존 코드의 변경이 작으며, 확장이 쉽다는 장점이 있다.</p>

<h3 id="적용-방법">적용 방법</h3>

<ul>
  <li>상속(is-a)</li>
  <li>컴포지션(has-a)</li>
</ul>

<h3 id="컴포지션">컴포지션</h3>

<h4 id="변경확장될-것과-변하지-않을-것을-구분한다">변경(확장)될 것과 변하지 않을 것을 구분한다.</h4>

<h4 id="이-두-모듈이-만나는-지점에-인터페이스를-정의한다">이 두 모듈이 만나는 지점에 인터페이스를 정의한다.</h4>

<h4 id="구현에-의존하기보다-정의한-인터페이스에-의존하도록-코드를-작성한다">구현에 의존하기보다 정의한 인터페이스에 의존하도록 코드를 작성한다.</h4>

<h3 id="예시">예시</h3>

<ul>
  <li>List와 ArrayList의 관계
    <ul>
      <li>타입 선언은 List이지만 인스턴스를 생성할 때는 그 구현체인 ArrayList로 생성한다.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="전략-패턴">전략 패턴</h2>

<ul>
  <li>디자인 패턴 중 가장 많이 쓰임
    <ul>
      <li><strong>디자인 패턴이란?</strong> (소프트웨어) 디자인 + (공통적으로 마주치는 문제를 해결하는 방법의) 패턴</li>
    </ul>
  </li>
  <li>동적으로 전략 수정 가능</li>
  <li>행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 함</li>
  <li>새로운 기능의 추가가 기존 코드에 영향을 미치지 못하게 하므로 OCP를 만족</li>
  <li>기존 코드 변경없이 행위를 자유롭게 바꿀 수 있게 해주는 OCP를 준수한 디자인 패턴</li>
</ul>

<p><strong>➕ GoF의 디자인 패턴</strong>에서의 전략패턴</p>

<ul>
  <li>동일 계열의 알고리즘군을 정의하고 (walk, run, fly, rocket)</li>
  <li>각 알고리즘을 캡슐화하며(MoveStrategy)</li>
  <li>이들을 상호교환이 가능하도록 만든다.</li>
</ul>

<h4 id="전략이란">전략이란?</h4>

<p>어떤 목적을 달성하기 위해 일을 수행하는 방식.<br />
비즈니스 규칙, 문제를 해결하는 알고리즘 등 (Random, Reverse, Nothing)</p>

<h3 id="구성">구성</h3>

<h4 id="context">Context</h4>

<ul>
  <li>전략 패턴을 이용하는 역할을 수행</li>
  <li>필요에 따라 동적으로 구체적인 전략을 바꿀 수 있도록 함 (setter 또는 DI)</li>
</ul>

<h4 id="strategy">Strategy</h4>

<ul>
  <li>인터페이스나 추상 클래스로 외부에서 동일한 방식으로 알고리즘을 호출하는 방법 명시</li>
</ul>

<h4 id="concreatestrategy">ConcreateStrategy</h4>

<ul>
  <li>전략패턴에서 명시한 알고리즘을 실제로 구현한 클래스</li>
</ul>

<h3 id="example">Example</h3>

<p><strong>배민 로봇 이동 전략 예시</strong></p>

<ul>
  <li>Walk</li>
  <li>Run</li>
  <li>Fly</li>
  <li>Rocket</li>
</ul>

<p><strong>초기 배달 로봇</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Robot</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배달 로봇"</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"걸어서 배달합니당."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그런데 이제 달리는 로봇도 추가하게 되었다면,</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunningRobot</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배달 로봇"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"뛰어서 배달합니당."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이후에 날으는 로봇, 로켓으로 배달하는 로봇이 생기는 경우를 생각해보자.<br />
이를 먼저 상속으로 해결하는 경우, 아래와 같이 구현할 수 있다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/559aed96-a6f0-45b8-8c0a-2812d05e29b5/image.png" alt="" /></p>

<p>그런데 여기서 로봇에 온도 조절 기능을 추가할 경우, 아래와 같이 구현할 수 있다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/944eed9b-c7a4-476d-9221-4f416fe5a0eb/image.png" alt="" /></p>

<h4 id="-문제점">🤔 문제점?</h4>

<ul>
  <li><strong>메서드 수정이 어렵다.</strong>
    <ul>
      <li>“걸어서 배달하는 로봇”이 “빠르게 걸어서 배달합니다”로 변할 경우 모든 클래스를 순회하면서 메서드들을 수정해주어야 한다.</li>
    </ul>
  </li>
  <li><strong>새로운 기능 추가가 어렵다.</strong>
    <ul>
      <li>한국어, 영어, 중국어를 말하는 기능이 추가된다면 추상 클래스에 말하기 기능이 추가될 것이고, 이를 상속받는 클래스에 기능에 따라 다른 각각의 메서드를 구현해주어야 한다.</li>
    </ul>
  </li>
</ul>

<p><strong>이를 해결하는 것이 바로 전략패턴이다!</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/71c8e746-2de7-4fbc-9e1a-300ff0229c65/image.png" alt="" /></p>

<ul>
  <li>이동전략 : 걷기, 달리기, 날기 등의 로봇의 행위를 정의한다.</li>
  <li>온도 전략 : cold, warm, hot등을 정의한다.</li>
</ul>

<p>로봇을 생성할 때 각각의 전략을 주입해주어 로봇은 전략의 행위를 실행하게 된다.</p>

<p><strong>이렇게 되면 문제점이 어떻게 해결될까?</strong></p>

<ul>
  <li><strong>메서드 수정이 용이하다.</strong>
    <ul>
      <li>“걸어서 배달하는 로봇”이 “빠르게 걸어서 배달합니다”로 변할 경우 walk 부분만 변경해주면 된다.</li>
    </ul>
  </li>
  <li>새로운 기능 추가가 용이하다.
    <ul>
      <li>한국어, 영어, 중국어를 말하는 기능이 추가된다면 이에 따른 새로운 전략의 행위를 정의해주고, 로봇을 생성할 때 전략을 함께 주입해주면 된다.</li>
    </ul>
  </li>
  <li>만약 이동방식이 도중에 변경된다면?
    <ul>
      <li>setter등을 통해 객체 생성 후 전략을 변경할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="jdk에서의-전략패턴">JDK에서의 전략패턴</h3>

<h4 id="comparator">Comparator</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">o1</span><span class="o">,</span> <span class="n">T</span> <span class="n">o2</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Comparator가 전략이고 개발자마다 custom하게 정의한 Comparator구현을 <code class="highlighter-rouge">sort()</code>라는 컨텍스트에서 사용하고 있다.<br />
개발자는 상황에 맞게 비교 전략을 구현할 수 있게 하여 기존 코드의 수정없이 확장을 이룰 수 있다.</p>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://www.youtube.com/watch?v=vNsZXC3VgUA&amp;t=24s">[10분 테코톡] 📣 완태의 전략패턴</a></li>
  <li>[<a href="https://www.youtube.com/watch?v=90ZDvHl8ROE">10분 테코톡] 👾베디의 OCP와 전략패턴</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
