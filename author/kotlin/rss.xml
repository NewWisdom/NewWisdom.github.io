<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📋 Kotlin을 정복해봅시다 1</title>
	  <link>//kotlin1</link>
	  <author></author>
	  <pubDate>2021-05-16T19:18:00+09:00</pubDate>
	  <guid>//kotlin1</guid>
	  <description><![CDATA[
	     <h2 id="코틀린이란">코틀린이란?</h2>

<ul>
  <li>자바 플랫폼에서 돌아가는 새로운 프로그래밍 언어</li>
  <li>간결하고 실용적</li>
  <li>자바 코드와의 상호 운용성을 중시</li>
  <li>코틀린 컴파일러가 생성한 바이트코드는 일반적인 자바 코드와 똑같이 효율적으로 실행</li>
</ul>

<h3 id="정적-타입-지정-언어">정적 타입 지정 언어</h3>

<p>정적 타입 지정이란 모든 프로그램 구성 요소의 타입을 컴파일 시점에 알 수 있다.<br />
프로그램 안에서 객체의 필드나 메서드를 사용할 때마다 컴파일러가 타입을 검증해준다.</p>

<p>코틀린은 타입추론을 지원하여 개발자가 타입 선언해야하는 불편함이 줄어든다.<br />
매개 변수 이름 뒤에 매개 변수의 자료형을 쓴다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">val</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//(.)\n(.*)"</span><span class="o">)</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">FIRST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"//"</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">LAST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"\n"</span>
</code></pre></div></div>

<h3 id="변수-선언">변수 선언</h3>

<ul>
  <li>val : 값이 변경되지 않는 변수</li>
  <li>var : 값이 변경될 수 있는 변수</li>
</ul>

<h4 id="블록이-본문인-함수">블록이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="식이-본문인-함수">식이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
</code></pre></div></div>

<hr />

<h2 id="코틀린-학습-테스트">코틀린 학습 테스트</h2>

<h3 id="named-arguments">named arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Crew</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="s">"아마찌"</span><span class="p">)</span>
</code></pre></div></div>

<p>Crew 객체에 name과 nickname 필드가 있을 때 생성자에 전달하는 인자만을 보고는 어떤 문자열이 어떤 역할인지 헷갈릴 수 있다.<br />
이는 함수의 시그니처를 살펴보지 않고는 알아내기 어려운데,<br />
코틀린으로 작성한 함수를 호출할 때는 가독성을 높이기 위해 전달하는 인자의 이름을 명시해줄 수 있다.  <br />
이때 인자 중 어느 하나라도 이름을 명시하면 그 뒤로 오는 모든 인자는 이름을 명시해야 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">),</span>
<span class="n">Person</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"신지혜"</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">,</span> <span class="n">age</span> <span class="p">=</span> <span class="m">20</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="nullable-types">nullable types</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span>
</code></pre></div></div>

<p>null이 될수 있는 type을 명시적으로 표시할 수 있다. <br />
type에 ?를 붙임으로서 null이 가능한 변수임을 명시적으로 표현한다.</p>

<h3 id="default-arguments">default arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<p>자바는오버로딩을 하여 인자가 다른 같은 메서드를 만든다.</p>

<p>하지만 코틀린은 기본 인자를 지원하기 때문에, 1개의 메소드만 정의하여 메서드 오버로딩 기능을 한다. 
기본 인자를 설정하는 방법은, 다음과 같이 인자 이름 다음에 <code class="highlighter-rouge">인자 = 기본값</code>처럼 정의하면 된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">add</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 메소드는 아래처럼 인자의 개수가 다르게 호출될 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>      <span class="c1">// num2 = 0 은 기본인자로 전달
</span><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="data-classe">data classe</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>수리 피셜 데이터 클래스는 DTO다.</li>
  <li>딱히 비즈니스 로직을 갖고 있지않다.</li>
  <li>생성자부터 getter &amp; setter, 심지어 canonical methods까지 알아서 생성해준다.</li>
</ul>

<h4 id="제한-사항">제한 사항</h4>

<ul>
  <li>기본 생성자에는 최소 하나의 파라미터가 있어야 한다.</li>
  <li>기본 생성자의 파라미터는 val이나 var여야만 한다.</li>
  <li>데이터 클래스는 abstract, open, sealed, inner가 되면 안 된다.</li>
</ul>

<h4 id="-canonical-methods">🤔 Canonical Methods?</h4>

<p>캐노니컬 메소드는 Any에 선언된 메소드 (Any는 자바의 Object처럼 코틀린에서 모든 객체의 조상이 되는 객체)<br />
따라서 코틀린의 모든 인스턴스가 갖고 있는 메소드를 뜻한다.</p>

<p>코틀린의 data class는 모든 Canonical 메서드를 올바르게 구현하고 있다.</p>

<ul>
  <li><strong>equlas(other: Any?): Boolean</strong> - 이 메소드는 참조가 아니라 데이터 클래스 간 값의 일치를 비교한다.</li>
  <li><strong>hashCode(): Int</strong> - 해쉬코드는 인스턴스의 숫자 표현이다. hashCode()가 같은 인스턴스에서 여러 번 호출될 때 항상 동일한 값을 반환해야 한다. equals()로 비교할 때 참을 반환하는 두 인스턴스는 같은 hashCode()를 가져야만 한다.</li>
  <li><strong>toString(): String</strong> - 인스턴스의 문자열 표현이다. 데이터 클래스는 이를 멤버 변수의 값을 나열하도록 자동으로 재정의 한다.</li>
  <li><strong>copy()</strong> : 객체를 복사하여 새 객체 생성</li>
  <li><strong>componentsN()</strong> : 속성을 순서대로 반환</li>
</ul>

<hr />

<h2 id="2단계-문자열-계산기-구현하면서-배운-사실들">2단계 문자열 계산기 구현하면서 배운 사실들</h2>

<h3 id="메서드-정의">메서드 정의</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="err">메서드명(</span><span class="nf">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="err">반환타입</span> <span class="p">{</span>
    <span class="n">retunr</span> <span class="m">2</span> <span class="p">*</span> <span class="n">x</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="unit--nothing">Unit / Nothing</h3>

<p>코틀린은 원시타입과 wrapper type을 구분하지 않는다.</p>

<h4 id="unit">Unit</h4>

<p>함수의 반환 구문이 없다는 것을 표현한다. (자바의 void에 해당).<br />
void와는 다르게 인자로도 사용할 수 있다.</p>

<h4 id="nothing">Nothing</h4>

<p>함수가 정상적으로 끝나지 않는다라는걸 명시적으로 표현한다.</p>

<h4 id="firstornull">firstOrNull</h4>

<p>컬렉션 내 첫 번째 인자를 반환한다. 단순히 리스트 내에서 첫 번째에 위치하는 인자를 반환하는 것뿐 아니라, 특정 조건을 만족하는 첫 번째 인자를 반환하도록 구성하는 것도 가능하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">operator</span> <span class="p">=</span> <span class="n">values</span><span class="p">().</span><span class="n">firstOrNull</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">op</span> <span class="p">==</span> <span class="n">op</span> <span class="p">}</span>
    <span class="o">?:</span> <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">"존재하지 않는 연산자입니다."</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="자동차-경주-피드백">자동차 경주 피드백</h2>

<h3 id="코틀린의-코딩-컨벤션">코틀린의 코딩 컨벤션</h3>

<h4 id="클래스">클래스</h4>

<ul>
  <li>프로퍼티</li>
  <li>초기화 블록</li>
  <li>부 생성자</li>
  <li>함수</li>
  <li>동반 객체</li>
</ul>

<p>순으로 작성한다.</p>

<h4 id="-ktlint-적용하기">➕ ktlint 적용하기</h4>

<p><strong>ktlint</strong>란 코틀린을 위한 정적 분석 도구로, 코틀린으로 작성한 코드의 스타일 검사와, 형식에 맞지 않는 부분을 수정하는 기능을 제공한다.</p>

<p>사용하기 위해서는 다음과 같이 플러그인을 추가해준다.</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
    <span class="n">id</span> <span class="s1">'org.jetbrains.kotlin.jvm'</span> <span class="n">version</span> <span class="s1">'1.3.72'</span>
    <span class="n">id</span> <span class="s1">'org.jmailen.kotlinter'</span> <span class="n">version</span> <span class="s2">"3.2.0"</span> <span class="c1">// 추가</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/709c90c9-2cac-4eb0-8a48-a20ec4156ed6/image.png" style="zoom:33%;" /></p>

<p>플러그인을 추가하면 gradle-Tasks-formating이 생성되는데 lintKotlin을 눌러주면 lint로 코틀린 컨벤션이 틀린 부분을 잡아준다.</p>

<h3 id="주생성자-부-생성자">주생성자, 부 생성자</h3>

<h4 id="주-생성자">주 생성자</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>클래스 이름 뒤에 오는 생성자가 바로 주 생성자이다.<br />
주 생성자는 생성자 파라미터를 지정하고, 이에 의해 초기화되는 프로퍼티를 정의하는데 사용된다.<br />
또한 주 생성자는 객체 초기화를 시작하는 유일한 곳이기 때문에 제공되는 인자들이 완전해야 한다.</p>

<p>주 생성자에는 별도의 코드를 포함시킬 수 없다.<br />
이때 코틀린은 <code class="highlighter-rouge">init</code> 키워드로 초기화 블록을 선언할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">init</span> <span class="p">{</span>
        <span class="n">require</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;=</span> <span class="n">MAX_NAME_LENGTH</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"자동차의 이름은 5글자를 초과할 수 없습니다."</span>
        <span class="p">}</span>
    <span class="c1">// ...
</span></code></pre></div></div>

<h4 id="부-생성자">부 생성자</h4>

<p>파라미터 목록이 다른 여러 생성자를 만들 경우 부 생성자를 둘 수 있다.<br />
부 생성자에서는 <code class="highlighter-rouge">this</code> 키워드를 사용해 주 생성자를 호출하도록 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 경우보다는 <strong><code class="highlighter-rouge">default</code>키워드를 사용하여 매개변수의 기본값을 사용</strong>하자.</p>

<p><strong>주 생성자 호출 시점</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constructor</span><span class="p">(</span><span class="n">carNUm</span> <span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">ArryaList</span><span class="p">())</span> <span class="p">{</span>
	<span class="n">createList</span><span class="p">(</span><span class="n">carName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 부 생성자에서 주 생성자를 호출할 때 <code class="highlighter-rouge">createList()</code>가 실행되는 순서는 다음과 같다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">Cars</span><span class="p">(</span><span class="n">int</span> <span class="n">carNUm</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">(</span><span class="n">new</span> <span class="n">ArrayList</span><span class="p">())</span>
  <span class="k">this</span><span class="p">.</span><span class="n">createList</span><span class="p">(</span><span class="n">carNum</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="require-check---조건-확인-함수">require(), check() - 조건 확인 함수</h3>

<ul>
  <li>
    <p><strong>require()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalArgumentException</code> 발생</p>
  </li>
  <li>
    <p><strong>check()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalStateException</code> 발생</p>

    <p>위 예제처럼 <code class="highlighter-rouge">{}</code> 블록에 예외 메시지를 작성할 수도 있다.</p>
  </li>
</ul>

<h3 id="setter만-private으로---가시성-변경자">setter만 private으로 - 가시성 변경자</h3>

<p>자바를 생각하면 필드를 <code class="highlighter-rouge">private</code> 로 만들고,  getter를 통해 값을 꺼내도록 하였지만,<br />
코틀린에서는 필드를 private으로 두기보다는 setter 함수만 private으로 지정한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
        <span class="k">private</span> <span class="k">set</span>
<span class="p">}</span>
</code></pre></div></div>

<p>자바는 필드 기반  언어인데 코틀린은 프로퍼티 기반 언어이다.<br />
팁을 준다면 코틀린에서 프로퍼티에 무언가 연산이 들어간다면 함수를 만들고,<br />
값 자체만 반환한다면 위와 같이 쓰자.</p>

<h3 id="상수">상수</h3>

<p>기본 자료형의 상수는 <code class="highlighter-rouge">const val</code> 키워드로 표현한다.<br />
기본 자료형 외에는 <code class="highlighter-rouge">const</code> 키워드를 사용할 수 없다.</p>

<p>상수는 클래스 외부에다가도 선언할 수 있다.<br />
하지만 이 경우 확장자가 파일로 변경되니 사람 취향껏 하면 된다.</p>

<h4 id="companion-object---동반-객체">companion object - 동반 객체</h4>

<p>코틀린에서는 <code class="highlighter-rouge">static</code> 키워드가 없는데, 이 대신 사용할 수 있는 것이 companion object 이다.<br />
이는 객체이며, <code class="highlighter-rouge">companion object</code> 내에 선언된 속성과 함수는 <code class="highlighter-rouge">{클래스 이름}.{필드/함수 이름}</code> 형태로 바로 호출할 수 있다.  <br />
클래스의 맨 하단에 작성한다.</p>

<h4 id="jvmstatic">@JvmStatic</h4>

<p><code class="highlighter-rouge">ompanion object</code>를 사용하여 구성한 코드를 자바에서 사용하려면 속성 및 함수가 자바의 필드/메서드로 해석되도록 알려주어야 한다.</p>

<p><code class="highlighter-rouge">const</code> 선언이 되어 있는 프로퍼티는 별도의 처리 없이 자바에서도 사용 가능하며, 
함수는 <code class="highlighter-rouge">@JvmStatic</code> 어노테이션을 사용하여 자바에서 정적 메서드로 사용할 수 있게 한다.</p>

<h4 id="jvmfield">@JvmField</h4>

<p><code class="highlighter-rouge">const</code> 키워드는 기본 자료형에만 사용이 가능하다.<br />
이외의 타입 객체를 자바에서 정적 필드처럼 사용하려면 <code class="highlighter-rouge">@JvmField</code> 어노테이션을 사용해야 한다.</p>

<h3 id="utility-클래스">Utility 클래스</h3>

<p>자바에서는 모든 메서드를 클래스 내부에 작성해야했지만, 코틀린에서는 그럴 필요가 없다.<br />
필요한 유틸리티 메서드만 모아놓은 파일만을 만들고 이를 파일 최상위에 위치시키면 된다.</p>

<h3 id="스마트-캐스트">스마트 캐스트</h3>

<p>코틀린에서는 컴파일러가 대신 캐스팅을 해준다.<br />
원하는 타입을 검사하고 나면, 개발자가 변수를 원하는 타입으로 캐스팅하지 않아도 해당 변수가 원하는 타입으로 선언된 것처럼 사용할 수 있다.<br />
이는 컴파일러가 캐스팅을 수행해주어 가능한 일이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">isNullOrBlank</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kd">val</span> <span class="py">tokens</span> <span class="p">=</span> <span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
    <span class="c1">// ...
</span><span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="코드-리뷰-중-짤막한-배움">코드 리뷰 중 짤막한 배움</h2>

<h4 id="maxby">maxBy{}</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">findMaxPosition</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">maxBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">position</span> <span class="p">}</span><span class="o">!!</span><span class="p">.</span><span class="n">position</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>가장 큰 원소를 찾기 위해 비교에 사용할 값을 인자로 받는다. <br />
모든 컬렉션에 대해 maxBy 함수를 호출할 수 있다.</p>

<p><code class="highlighter-rouge">{ it.position }</code> 는 비교에 사용할 값을 돌려주는 함수이다.<br />
<code class="highlighter-rouge">maxBy{}</code> 의 반환 값은 nullable인데, 반환된 값의 프로퍼티를 사용하고 싶은 경우 <code class="highlighter-rouge">!!</code> 키워드를 통해 null이 아님을 선언하여 꺼낸다.</p>

<p><strong>참고</strong></p>

<p><code class="highlighter-rouge">?:</code>(엘비스 오퍼레이터 ) : null인 경우 설정한 default 값을 넣는다.</p>

<h4 id="pair">Pair</h4>

<p>Kotlin에서 제공하는 객체 타입 중 연관 타입끼리 관계가 없어도 2개를 쌍으로 가지고 있는 객체</p>

<p><strong>getter</strong>는 <strong>.first  .second</strong> 또는 <strong>.component1() / .component2()</strong>로 접근할 수 있다.</p>

<p><strong>RacingCar 일부</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">race</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">:</span> <span class="n">MoveStrategy</span><span class="p">):</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">carsGroup</span> <span class="p">=</span> <span class="n">arrayListOf</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;()</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">tryNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">cars</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">.</span><span class="n">moveAll</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span>
        <span class="n">carsGroup</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">carsGroup</span><span class="p">,</span> <span class="n">findWinners</span><span class="p">())</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">fun</span> <span class="nf">findWinners</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">maxPosition</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">findMaxPosition</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">findCarsBySamePosition</span><span class="p">(</span><span class="n">maxPosition</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="과-">==과 ===</h4>

<ul>
  <li>
    <p><code class="highlighter-rouge">==</code> 연산자는 자바의 equal와 같다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">===</code> 연산자는 자바의 <code class="highlighter-rouge">==</code>와 같다.</p>
  </li>
</ul>

<h4 id="list-mutablelist">List, MutableList</h4>

<p>코틀린에서는 읽기 전용 리스트(List)와 수정할 수 있는 리스트(MutableList)가 있다.<br />
<code class="highlighter-rouge">arrayListOf()</code> 를 쓰기보다는 코틀린이 제공하는 List 또는 MutableList를 사용하자</p>

<p><strong>List</strong></p>

<p>데이터를 읽기만 가능하고 리스트를 선언할 때 넣은 데이터들을 수정, 삭제, 변경할 수 없다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">cars</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">),</span> <span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span>

<span class="n">println</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span>
<span class="n">cars</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span> <span class="c1">// X 컴파일에러
</span><span class="n">cars</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>   <span class="c1">// X 컴파일에러
</span></code></pre></div></div>

<p><strong>MutableList</strong></p>

<p>기존 자바에서 사용하던 ArrayList와 유사하므로 ArrayList의 함수들을 모두 사용할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c1">// O
</span><span class="n">println</span><span class="p">(</span><span class="n">carsMutable</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span></code></pre></div></div>

<p>List와 MutalbeList 서로의 타입으로 변경도 가능하다. 이 때 서로 새로운 리스트를 반환한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> 
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> 

<span class="kd">var</span> <span class="py">arrNotMutable</span> <span class="p">=</span> <span class="n">carsMutable</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span> <span class="c1">//mutable -&gt; list 변경
</span>
<span class="kd">var</span> <span class="py">arrReMutable</span> <span class="p">=</span> <span class="n">arrNotMutable</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span> <span class="c1">// list -&gt; mutable 변경
</span><span class="n">arrReMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span>
<span class="n">println</span><span class="p">(</span><span class="n">arrReMutable</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="assertthrows">assertThrows</h4>

<p>자바처럼 <code class="highlighter-rouge">assertThatThrownBy</code> 를 쓰지 말고 아래와 같이 쓰자.<br />
이유는 <code class="highlighter-rouge">assertThatThrownBy</code> 를 사용할 경우 <code class="highlighter-rouge">isInstanceOf()</code> 를 사용하는데 여기에는 <code class="highlighter-rouge">.java.class</code> 를 붙여주어야 해 코틀린 스럽지 못하기 때문이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">IllegalArgumentException</span><span class="p">&gt;</span> <span class="p">{</span><span class="n">Car</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="n">input</span><span class="p">)}</span>
</code></pre></div></div>

<h4 id="object">object</h4>

<p>클래스를 만듦과 동시에 인스턴스로 만든다. (싱글턴)</p>

<h4 id="람다-작성">람다 작성</h4>

<p>코틀린은 람다식을 작성할 때 <code class="highlighter-rouge">{}</code>로 표현한다. <br />
람다의 인자가 하나라면 람다식 내부에서 <code class="highlighter-rouge">it</code>으로 받을 수 있다.<br />
함수의 인자로 람다가 넘어올 때, 맨 마지막 순번이라면 <code class="highlighter-rouge">()</code> 밖에 쓸 수 있다.<br />
만약 람다 하나만 받는 거라면 <code class="highlighter-rouge">()</code>를 생략할 수 있겠죠?</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">newCars</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<h4 id="associate"><code class="highlighter-rouge">associate{}</code></h4>

<p>map을 기본적으로 반환한다.</p>


	  ]]></description>
	</item>


</channel>
</rss>
