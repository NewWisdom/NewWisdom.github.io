<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>코드 리뷰 정리</title>
	  <link>//%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%EC%A0%95%EB%A6%AC</link>
	  <author></author>
	  <pubDate>2021-03-15T19:18:00+09:00</pubDate>
	  <guid>//%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%EC%A0%95%EB%A6%AC</guid>
	  <description><![CDATA[
	     <h2 id="-코드-리뷰-정리">💾 코드 리뷰 정리</h2>

<h3 id="controller에-있는-도메인-로직">Controller에 있는 도메인 로직</h3>
<p><img src="https://images.velog.io/images/new_wisdom/post/56c51213-0e01-48f5-ac72-8e76e77f73f1/image.png" alt="" /></p>

<p>게임 진행을 위해 Controller에 많은 역할을 구현했었다.<br />
위 피드백을 받고 BlackjackGame이라는 객체를 만들어 게임의 진행을 하도록 구현했다.<br />
각각의 플레이어들의 게임을 진행에 Input과 Output이 연결되어 있어서</p>

<p>처음 리팩토링에서는 BlackjackGame에서 플레이어들을 꺼내오고, 플레이어 하나 하나마다 게임을 진행하게 되었다.</p>

<p><strong>BlackjackController 일부</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">askWantToHit</span><span class="o">(</span><span class="n">Player</span> <span class="n">player</span><span class="o">,</span> <span class="n">BlackjackGame</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">isAbleToAskHit</span><span class="o">(</span><span class="n">player</span><span class="o">,</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
            <span class="n">Answer</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">InputView</span><span class="o">.</span><span class="na">inputDrawAnswer</span><span class="o">()).</span><span class="na">isYes</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">blackjackGame</span><span class="o">.</span><span class="na">hit</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
        <span class="n">OutputView</span><span class="o">.</span><span class="na">printPlayerCards</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAbleToAskHit</span><span class="o">(</span><span class="n">Player</span> <span class="n">player</span><span class="o">,</span> <span class="n">BlackjackGame</span> <span class="n">blackjackGame</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">blackjackGame</span><span class="o">.</span><span class="na">isNotGameOver</span><span class="o">(</span><span class="n">player</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">OutputView</span><span class="o">.</span><span class="na">printAskOneMoreCard</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/ed3abe31-8b66-4a6d-8a51-5f87404c2b83/image.png" alt="" /></p>

<p>하지만 결국 BlackjackGame에서 플레이어를 <code class="highlighter-rouge">get</code>해와 값을 조회하고,<br />
해당 값에 대한 로직이 Controller에서 처리되고 있었다.</p>

<p>게이츠의 말씀대로 도메인에 있어야 할 로직이 외부인 
Controller에서 처리되고 있는 것이다.
페어인 다니도 비슷한 리뷰를 받았는데, BlackjackGame 객체를 통해 게임 진행 과정을 캡슐화하라 하셨고,
이에 대해서는 <strong>출력을 제외하고 getter가 사용되는 부분이 하나도 남아있지 않아야 
캡슐화가 잘 진행되었다고 볼 수 있다</strong>고 하였다.</p>

<p>위 피드백들로 <strong>게임을 진행하는 역할</strong>을 완전히 BlackjackGame으로 옮기기 위해 
현재 게임이 끝나지 않은 플레이어들을 BlackjackGame에서 관리하도록 하고
(<code class="highlighter-rouge">getCurrentPlayer()</code>), BlackjackGame에서도 Players에게 현재 게임을 
진행해야 하는 Player를 얻어오도록 구현했다.</p>

<p>내가 적용한 부분은 다음과 같다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/88b9a4cc-0474-44a4-97b1-4832858046c9/image.png" alt="" /></p>

<hr />

<h3 id="테스트-코드의-가독성">테스트 코드의 가독성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a30b0ff5-2286-4a1e-819c-8073d35f97f0/image.png" alt="" /></p>

<p>리뷰어님께서 테스트 코드의 가독성을 위해 given, when, then으로 
줄바꿈 할 것을 권해주셨는데, 찾아보니 테스트 코드를 작성할 때 주로 사용하는
<a href="https://brunch.co.kr/@springboot/292">Given-When-Then Pattern</a>을 발견하였다.</p>
<ul>
  <li>
    <p>Given<br />
테스트를 위해 준비를 하는 과정
테스트에 사용하는 변수, 입력 값 등을 정의하거나, Mock 객체를 정의하는 구문 포함</p>
  </li>
  <li>
    <p>When<br />
실제로 액션을 하는 테스트를 실행하는 과정</p>
  </li>
  <li>
    <p>Then <br />
마지막은 테스트를 검증하는 과정
예상한 값, 실제 실행을 통해서 나온 값을 검증</p>
  </li>
</ul>

<p>사실 지금껏 테스트 코드를 짜는 것에만 집중을 하고 가독성은 고려하지 못했던 것 같다.
올바르게 적용한 것인지 확신은 없으나, 
앞으로 테스트 코드를 작성할 때 위 패턴을 지키려 노력해야겠다.</p>

<hr />

<h3 id="추상-메서드로-공통-기능을-선언하고-각각-구현하기">추상 메서드로 공통 기능을 선언하고 각각 구현하기</h3>

<p><img src="https://user-images.githubusercontent.com/43840561/111168509-79a82600-85e5-11eb-8143-e030459f1915.png" alt="image" /></p>

<p>기능 요구사항에서 초기 카드를 보여주는 로직이 딜러와 플레이어마다 달랐다. 딜러는 처음에 한장만 보여주고, 플레이어는 두장을 보여주어야 한다. 이를 처음 구현했을 때는 User 추상 클래스에 <code class="highlighter-rouge">public final Cards getCards()</code> 를 두고 플레이어는 초기에 이 메서드를 통해 카드를 2장인 Cards를 (사실은 전부) 반환하고, 딜러는 딜러만의 <code class="highlighter-rouge">Card showOneCard()</code> 를 통해 Card 객체를 반환한다. 반환 타입도 달라서 딜러와 플레이어들의 카드를 출력하기 위해서는 매개변수가 다른 출력 메서드들도 필요했다. 때문에 BlackjackGame 객체에서도 출력만을 위한 비슷한 <code class="highlighter-rouge">get()</code> 들이 생겨났다. 게이츠의 말씀대로 이렇게 추상 클래스인 User에 <code class="highlighter-rouge">Cards showInitialCard();</code>를 만들고 딜러와 플레이어 각각이
<code class="highlighter-rouge">getCardsByCount(int count)</code>에 각자 맞는 개수로 카드를 가져올 수 있도록 리팩토링 해보았다.</p>

<h2 id="-미션-정리">💾 미션 정리</h2>

<h3 id="상태-패턴-적용기">상태 패턴 적용기</h3>
<p>0309 강의에서 이번 미션에 상태 패턴을 적용하여 구현하는 법에 대해 배웠다.
이번 미션을 진행하면서 스스로 제일 이슈라고 생각했던 부분은 
<strong>딜러와 플레이어의 점수만을 가지고 결과를 계산하는 것이 아니라,
딜러와 플레이어의 상태별로 결과를 계산하는 분기처리였다.</strong></p>

<p>이 부분에 대한 처리를 이번 미션동안 많이 고민해보았었고,
나의 삽질의 과정들을 함께 기록해보려 한다.</p>

<h4 id="1-if-문을-통한-처리">1. if 문을 통한 처리</h4>
<p>맨 처음 미션을 제출할 때는 각각의 상태에 따른 결과 산출을 if문을 통해서 처리해주었다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 변수로 다음과 같이 compareValue를 가지고 있음
* private final String result;
* private final int compareValue;
*/</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decide</span><span class="o">(</span><span class="n">Dealer</span> <span class="n">dealer</span><span class="o">,</span> <span class="n">Player</span> <span class="n">player</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">WIN</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">STAND_OFF</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">isBust</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">LOSE</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
	    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">compareValue</span> <span class="o">==</span> <span class="n">player</span><span class="o">.</span><span class="na">cards</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">dealer</span><span class="o">.</span><span class="na">cards</span><span class="o">))</span>          
            <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">IllegalArgumentException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>하지만 이렇게 구한 결과에 스스로 다음과 같은 문제점을 느꼈다.</strong></p>
<ul>
  <li>딜러와 플레이어의 상태를 비교하는 동일한 행위를 if문으로 반복해서 처리하여 길어진 <code class="highlighter-rouge">decide()</code></li>
  <li>해당 타입을 구하기 위한 책임이 분리되어 있음 (데이터와 로직 분리되어 있음)</li>
  <li>compareValue인 <code class="highlighter-rouge">1, 0, -1</code> 값이 Result의 의미를 명확히 드러내지 못함</li>
  <li>만약 실수로 <code class="highlighter-rouge">decide()</code>의 if문 한줄을 지웠다면 프로그램 오류</li>
</ul>

<p>때문에 if문으로 처리했던 상태들을 어떻게 줄일 수 있을까 많은 고민을 했다.</p>

<h4 id="2-함수형-인터페이스를-통한-처리">2. 함수형 인터페이스를 통한 처리</h4>
<blockquote>
  <p><a href="https://jojoldu.tistory.com/137">Enum 활용사례 3가지</a>
<a href="https://dev3m.tistory.com/entry/ENUM-Funcational-Interface%EB%A1%9C-if%EB%AC%B8-%EC%A4%84%EC%9D%B4%EA%B8%B0">ENUM + Funcational Interface 활용하기</a></p>
</blockquote>

<p>해결책을 찾아보다, 위 글들을 참고하여 딜러와 플레이어의 상태마다 다른 처리를 
함수형 인터페이스를 사용해 구현해보았다.</p>

<p>이에 스스로 <a href="https://velog.io/@new_wisdom/Java-Functional-Interface-%EB%B6%80%EC%88%98%EA%B8%B0">함수형 인터페이스를 학습하며 정리하고</a> 
Dealer에 대한 Player의 결과를 구하는 로직을 <code class="highlighter-rouge">BiPredicate&lt;T&gt;</code>로 처리했다.
함수형 인터페이스를 사용하여 딜러, 플레이어의 상태별 / 점수별 결과 산출 코드는 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Result</span> <span class="o">{</span>
    <span class="n">WIN</span><span class="o">(</span><span class="s">"승"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerScore</span> <span class="o">&gt;</span> <span class="n">dealerScore</span><span class="o">),</span>
    <span class="n">STAND_OFF</span><span class="o">(</span><span class="s">"무"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="nl">Integer:</span><span class="o">:</span><span class="n">equals</span><span class="o">),</span>
    <span class="n">LOSE</span><span class="o">(</span><span class="s">"패"</span><span class="o">,</span> <span class="o">(</span><span class="n">playerNotBust</span><span class="o">,</span> <span class="n">dealerNotBust</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">playerNotBust</span> <span class="o">&amp;&amp;</span> <span class="n">dealerNotBust</span><span class="o">,</span>
            <span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">playerScore</span> <span class="o">&lt;</span> <span class="n">dealerScore</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">result</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">statusPredicate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BiPredicate</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">scorePredicate</span><span class="o">;</span>

<span class="c1">// ... </span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decide</span><span class="o">(</span><span class="n">User</span> <span class="n">player</span><span class="o">,</span> <span class="n">User</span> <span class="n">dealer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">statusPredicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">player</span><span class="o">.</span><span class="na">isAbleToHit</span><span class="o">(),</span> <span class="n">dealer</span><span class="o">.</span><span class="na">isAbleToHit</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">decideByScore</span><span class="o">(</span><span class="n">player</span><span class="o">.</span><span class="na">score</span><span class="o">(),</span> <span class="n">dealer</span><span class="o">.</span><span class="na">score</span><span class="o">()));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Result</span> <span class="nf">decideByScore</span><span class="o">(</span><span class="kt">int</span> <span class="n">playerScore</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dealerScore</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">value</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">scorePredicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">playerScore</span><span class="o">,</span> <span class="n">dealerScore</span><span class="o">))</span>
                <span class="o">.</span><span class="na">findFirst</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">"승패 결과 조건에 매치되지 않습니다."</span><span class="o">));</span>
    <span class="o">}</span>
<span class="c1">// ...</span>
</code></pre></div></div>
<p>이렇게 Enum에 함수형 인터페이스를 사용하여 결과 산출을 했을 때,<br />
<strong>스스로 다음과 같은 장점을 느꼈다.</strong></p>
<ul>
  <li>동일한 기능(딜러와 플레이어의 상태를 비교)에 대해 각각 다른 연산을 가지고 있어 
늘어졌던 <code class="highlighter-rouge">decide()</code> 단순화</li>
  <li>(현 프로그램에서는 그럴일이 없겠지만) 새로운 Result 타입이 추가되어도,
메서드의 추가적 수정이 없다.</li>
  <li>타입이 해야 하는 기능에 대해서 가장 잘 알고 있을 수밖에 없는,
자신 안에 로직을 추가하면서, 로직에 대한 명확한 상수명을 가짐</li>
</ul>

<p>이렇게 함수형 인터페이스를 사용하면서 이를 사용했을 경우의 장점을 스스로 생각하고,<br />
리뷰어님께 질문을 남겼는데 추가적으로 의견을 달아주셨다 👀</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/7f0a6deb-3e53-49b1-8424-87ad3876b191/image.png" alt="" /></p>

<h3 id="상태-패턴">상태 패턴</h3>
<p>미션 2단계를 시작하면서, 베팅 금액을 입력 받고 상태에 따라 수익을 구하는 기능을 추가해야했다.
미션을 시작하기 앞서,
0309 블랙잭 피드백 강의에서 다룬 상태패턴을 적용해 여러 분기처리를 해결하고 싶었고,
이후 스스로 상태 패턴에 대해 더 찾아보고 이번 미션을 통해 
<strong>상태패턴이 무엇이고, 이를 적용하면 어떠한 장점이 있는지 알아보자!</strong>를 목표로
상태패턴 적용길을 걸었다.</p>

<h4 id="내가-적용한-상태-패턴">내가 적용한 상태 패턴</h4>
<p>제이슨 코드를 미리 보고 상태패턴을 시도했기 때문에,  스스로 생각해보지 못한 코드 따라쟁이가 되어버릴까봐 스스로 계속해서 상태별로 다르게 구현해야할 기능들에 대하여 생각해보고 클래스 다이어그램에 나름대로의 명분을 정리해보았다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/5c238570-b95c-4c63-b6ae-6e4b2ab77716/image.png" alt="" /></p>

<p>또한 아래는 상태 패턴의 콘텍스트인 User 클래스이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Name</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="n">State</span> <span class="n">state</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="n">Money</span> <span class="n">bettingMoney</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="n">Name</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">Name</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initializeCards</span><span class="o">(</span><span class="n">Cards</span> <span class="n">cards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">StateFactory</span><span class="o">.</span><span class="na">generateStateByCards</span><span class="o">(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">isAbleToHit</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">!</span><span class="n">state</span><span class="o">.</span><span class="na">isFinish</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Score</span> <span class="nf">score</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">cards</span><span class="o">().</span><span class="na">totalScore</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Cards</span> <span class="nf">cards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">.</span><span class="na">cards</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">State</span> <span class="nf">getState</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="n">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">hit</span><span class="o">(</span><span class="n">Card</span> <span class="n">card</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">changeState</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">card</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">stay</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">changeState</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">stay</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="c1">// ...</span>
</code></pre></div></div>

<p>콘텍스트의 필드로 상태(State)를 가지고 있으며, 
상태에 관련된 기능들을 그 상태에게 메시지를 보내 처리하도록 하였다.</p>

<h4 id="ps">PS</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/20bb1288-8fec-4e05-a353-61be9fefc696/image.png" alt="" /></p>

<p>위 말은 교육장에서 포비와 이야기를 나누다 인상 깊어 스스로 DM에 남겨놓은 말이다.
말씀대로 디자인 패턴이 무조건 좋은 것은 아니지만, 
개인적으로는 <strong>이번 미션동안 제일 고민했던 부분인 상태에 따른 여러가지 분기처리를
어떻게하면 효과적으로 구현할 수 있을까? 에 대한 좋은 답이 상태패턴이라 생각하여</strong>
상태 패턴을 사용하는 방법과 이점을 느껴보고 싶었기에 스스로 좋은 시도였다고 생각한다 !
물론 다른 미션에서 상태패턴을 적용하라하면 잘 적용할 수 있을지는 모르겠으나,
이번 미션을 통해 이렇게 상태에 따른 분기처리를 줄일 수 있구나, 
디자인 패턴은 이런 장점이 있구나를 느낄 수 있었다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Weekly 회고 5, 6 주차</title>
	  <link>//Weekly-%ED%9A%8C%EA%B3%A0-5,-6%EC%A3%BC%EC%B0%A8</link>
	  <author></author>
	  <pubDate>2021-03-14T19:18:00+09:00</pubDate>
	  <guid>//Weekly-%ED%9A%8C%EA%B3%A0-5,-6%EC%A3%BC%EC%B0%A8</guid>
	  <description><![CDATA[
	     <h2 id="무슨일이-있었나">무슨일이 있었나?</h2>

<ul>
  <li>일주일 2번 오프라인 출근이 시작되었다.</li>
  <li>온라인으로만 만나던 사람들을 3D로 처음 만났다.</li>
  <li>출입증 사진을 찍었다.</li>
  <li>3월2일-3월 4일 블랙잭  페어 프로그램을 진행하고 이후 개별 미션으로 찢어졌다.</li>
  <li>학습 로그 말하기를 했다.</li>
  <li>브라운이랑 면담을 했다.</li>
  <li>테코톡 발표를 준비하고 있었는데 미뤄졌다.</li>
  <li>데일리 주제로 레벨 1후, 우테코 수료 후의 나를 적어보는 시간을 가졌다.</li>
  <li>3월 29일까지 완료해야하는 글쓰기 미션이 시작됐다.</li>
  <li>교육장에 있으면서 많은 크루, 코치님과 이야기를 나누었다.</li>
  <li>5주차는 정말 바빴다. 빠듯한 미션 후, 리팩토링과 공부한 내용을 정리하느라 조급했다.</li>
  <li>6주차에는 출근날이 아닌날은 사람들이랑 만나서 모각코를 했다.</li>
  <li>함수형 인터페이스에 대해 찐하게 공부했다.</li>
  <li>상태패턴을 배웠다.</li>
  <li>정말 오랜만에 뚝딱이들이랑 줌미팅을 했다.</li>
</ul>

<hr />

<h2 id="어떤-것을-느꼈나">어떤 것을 느꼈나?</h2>
<h3 id="크루들의-에너지">크루들의 에너지</h3>

<p>매일 온라인으로만 보던 데일리 크루들을 오프라인으로 보니 처음에는 낯설았지만, 또 금방 적응돼서 정말 유쾌하고 즐거웠다.<br />
또, 크루들과 함께 모여 공부하니 많은 에너지를 느끼고, 열심과 열정으로 가득한 크루들덕에 많은 동기부여를 받았다. 졸업하고 가장 아쉬웠던 것이 매일 학교에 남아서 동기들과 으쌰으쌰하며 공부했던 것이 내가 배움에 즐거움을 느끼는 이유 중 하나였는데, 우테코에 들어와서 더 열정적인 사람들과 함께 배움의 즐거움을 누리고 있다는게 너무 행복하다.<br />
온라인으로는 궁금한 것들이 있지만 말하기 애매해서 그냥 삼켰던 프로그래밍 질문들을 오프라인에서는 바로바로 답이 오니 마음 편하게 질문할 수 있어서 오프라인의 유익함을 많이 느꼈다.<br />
함께 공부하며 열정을 불태우는 환경 덕에, 스스로 뒤쳐지는 것이 아닌가 하는 불안감이 정말 싹 사라졌다. 오프라인 출근이 시작되고 크루들이 경쟁자가 아닌 10개월간 함께 으쌰으쌰할 동료라는 말이 이제 정말 진심으로 느껴졌다.</p>

<h3 id="많이-웃었다">많이 웃었다.</h3>
<p>(여기 글에 어울리는지는 모르겠으나) 우테코 출근 시작 부터 크루들과 정말 즐거운 생활을 했다. 정말 많이 웃고 유쾌했던 2주였다.</p>

<h3 id="브라운과-면담">브라운과 면담</h3>
<p><del>느낀점에다 적는게 맞는지는 모르겠으나</del> 브라운과 면담을 하면서 많은 것을 깨달았다. 또한 우테코 생활에 대한 자신감을 얻을 수 있었으며, 우테코를 시작하고 바꾼 나의 생활, 학습 태도에 확신을 얻을 수 있었다. 가장 인상 깊었던 부분은 <strong>페어와의 회고</strong>에 대한 부분이었다. 무조건 좋은 말이 아닌 상대방에 대한 객관적인 피드백은 그 사람을 더 성장하게 만들고, 우테코 미션의 목적 또한 미션 완수가 아닌 페어를 통해 함께 성장하는 것이다. 어떻게 하면 남에게 이로운 피드백을 줄 수 있을까에 대한 고민과 남에게 피드백을 주는데 두려움들이 면담을 통해 해소되었다. 
또 좋은 학습 방법을 알려주셨는데, 어떤 개념을 완전히 내 것으로 만들기 위해서 스스로 동영상이나 녹음을 통해 설명하는 것이다. 이 말을 듣고 굉장히 혹했기에 한번 시도해 볼 계획이다.</p>

<hr />

<h2 id="잘한-것은-무엇인가">잘한 것은 무엇인가?</h2>

<h3 id="깊게-공부하려고-노력한-것">깊게 공부하려고 노력한 것</h3>
<p>저번 미션 학습 로그까지는 무조건 많이 쓰는 것이 많이 성장한 것이라 생각했다. 하지만 내가 적은 내용을 말하려다보니 내가 많이 배우려는 욕심만 부리고 그 개념들을 완벽히 체화하지 못했다는 것이다.<br />
그래서 이번 미션부터는 정말 내가 누군가에게 설명이 가능하도록 내것으로 만들었다. 빠르게 보다는 천천히 꼭꼭 씹어 학습 태도를 취하려 노력하고 있다.</p>

<h3 id="사람들과-많은-이야기를-나눈-것">사람들과 많은 이야기를 나눈 것</h3>

<p>우테코에는 정말 좋은사람들이 많다. 사람들과 이야기를 나누면서, 기술적인 부분만 아니라 인간적으로도 많이 배운다. 다양한 사람들과 이야기를 나누면서 사람에 대해 배워갈 수 있어서 좋았다.
또한 우테코에서 이야기를 나누다가, 또는 채팅으로 좋은 이야기들이 많이 오고 가는데, 그 중 계속 기억해두면 좋을 것 같은 문장들을 개인 슬랙에 저장해두기로 하였다. 
이번주는 포비와 이야기할 수 있는 기회가 있었는데, 대화 속에서 많은 위로와 도전을 얻어서 조금 기록해 두었다.
브라운과 면담도 바로바로 이렇게 적을걸 하는 아쉬움이 살짝 있다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/111073627-c840bc00-8522-11eb-9f11-621f1971db13.png" alt="image" /></p>

<h3 id="모각코한-것">모각코한 것</h3>
<p>이번주 내내 사람들과 만나서 공부했다. 교육장에서, 또는 출근을 안하는 날은 카페에서 누군가와 함께 공부했다. 
같이 만나서 공부하니 더 즐거웠고, 모르는 것을 함께 알아나가는 기쁨을 누릴 수 있어서 좋았다. 
누군가의 궁금증이 내 궁금증이 되어 같이 고민하고 차근차근 공부해 나가는 재미를 느낄 수 있었다.</p>

<h3 id="깃블로그를-판-것">깃블로그를 판 것</h3>
<p>기록 권태기가 와서 벼르고 벼뤘던 깃블로그 이사를 실행하는 중이다.
스스로 공부하는 내용을 좀 더 깊이있고 깔끔하게 정리하고자 하는 다짐과 함께 내 깃블로그가 탄생했다.
커스텀 하느라 너무 많은 시간을 투자하는 것 같아 지금 이래도 되나하는 생각이 들긴하지만, 나의 권태 극복에 많은 도움이 되었다 생각해 잘한 선택인 것 같다.</p>

<hr />

<h2 id="아쉬운-것은-무엇인가">아쉬운 것은 무엇인가?</h2>

<h3 id="내-지식에-대한-불확신">내 지식에 대한 불확신</h3>
<p>솔직하게 돌아보면 나는 아직도 내가 아는 것에 자신이 없는 것 같다.<br />
“나보다 저 사람이 더 맞을거야”라는 생각이 아직까지 강하다.<br />
크루들을 보면 자신이 아는 지식을 정리한 글들을 공유해주는데, <br />
나는 아직까지 내 글, 지식에 자신감이 없어서 그렇지 못하다.</p>

<h3 id="레벨-1후-수료-후의-뚜렷한-목표가-없는-것">레벨 1후, 수료 후의 뚜렷한 목표가 없는 것</h3>

<p>데일리 주제로 한번 스스로 레벨 1과 수료 후 어떻게 변화되어있을지 적어보는 시간을 가졌다. 정말 많은 생각이 들게하는 질문이었다. 최근 미션때문에, 오프라인 출근을 해서 스스로를 돌이켜보는 시간이 많이 없었다. 저 질문들에 선뜻 답하지 못하는 것은 내가 뚜렷한 목표없이 요즘을 살고 있는 것인가 하는 반성을 하게 됐다. 우테코 수료 후, 나는 어떤 개발자를 꿈꾸는가? 계속해서 고민해보고 목표를 세워야겠다.</p>

<h3 id="지금껏-제대로된-회고를-진행하지-못한-것">지금껏 제대로된 회고를 진행하지 못한 것</h3>

<p>브라운이랑 면담하면서 내가 그동안 상대방에게 유익한 피드백을 못주고 있었음을 깨달았다. 지금까지의 페어 모두 만족하지만 미션을 진행하기 급급해서 다른 부수적인 것들을 보지 못했다. 우테코에서 미션을 페어프로그래밍으로 진행하는 이유는 기술적인 부분만이 아닌, 소프트 스킬과 상대방이 보는 나의 객관적인 피드백을 들으며 성장하는 것이다. 면담 내용을 적기 위해 지금껏 미션을 돌아보니 스스로는 미션 완성에만 큰 목표를 두고 있었던 것 같다. 상대방을 기분 좋게 하는 피드백 보다 좋은 사람으로 만들 수 있는 피드백을 해야겠다. 이 내용을 가지고 브라운이랑 면담하면서 회고의 중요성을 많이 깨달았기에, 다음 미션부터는 페어와 사전 협의로 아주 찐한 회고를 할거다.</p>

<h3 id="약간의-귀차니즘이-찾아와-기록하는-습관을-놓친-것">약간의 귀차니즘이 찾아와 기록하는 습관을 놓친 것</h3>
<p>미션이 끝나고 너무 달려서였나, 내가 공부하거나 느낀 점들을 기록하기를 게을리했던 것 같다. 그래서 깃블로그를 팠다.</p>

<hr />

<h2 id="어떻게-달라질-것인가">어떻게 달라질 것인가</h2>
<h3 id="기록하는-삶">기록하는 삶</h3>
<p>이번주는 귀차니즘을 이겨내고, 블로그도 옮겼으니 새로운 마음으로 그날 배운 내용들을 간략하게라도 기록하자.</p>

<h3 id="계획하는-삶">계획하는 삶</h3>
<p>2주동안 그냥 정신없게 사느라 여러 방면에서 놓친 부분들이 많았다. 시간을 더 효율적으로 쓰기 위해 앞으로 내가 오늘 무슨 일을 할 것인지 아침마다 정리해보자.</p>

<h3 id="페어와-찐한-회고">페어와 찐한 회고</h3>
<p>화요일에 새로운 미션이 시작되는데, 이번에는 브라운과 면담한 대로 페어와 함께 성장을 위해 서로 솔직하고 찐한 회고를 약속할 것이다. 페어도 나와 동일한 마음이었으면 좋겠다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
