<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>🐳 Docker란</title>
	  <link>//docker</link>
	  <author></author>
	  <pubDate>2021-07-11T19:18:00+09:00</pubDate>
	  <guid>//docker</guid>
	  <description><![CDATA[
	     <h2 id="도커란">도커란?</h2>

<ul>
  <li>컨테이너 기반의 오픈소스 가상화 플랫폼</li>
  <li>다양한 프로그램, 실행환경을 컨테이너로 추상화한, 동일한 인터페이스를 제공해 프로그램의 배포 및 관리를 단순화하게 해줌</li>
  <li>어디에서든 실행 가능하도록 해줌(조립컴, AWS, Google Cloud)</li>
</ul>

<h3 id="특징">특징</h3>

<h4 id="확장성">확장성</h4>

<ul>
  <li>이미지만 만들어 놓으면 컨테이너는 그냥 띄우면 됨</li>
  <li>서버에 서비스 하나 더 띄울라면 <code class="highlighter-rouge">run</code> 명령어로 간단하게 해결</li>
</ul>

<h4 id="표준성">표준성</h4>

<ul>
  <li>도커를 사용하지 않는 경우 ruby, nodejs, go, php로 만든 서비스들의 배포 방식은 각각 다름</li>
  <li>컨테이너라는 표준으로 서버를 배포하므로 모든 서비스들의 배포과정이 동일</li>
</ul>

<h4 id="이미지">이미지</h4>

<ul>
  <li>이미지에서 컨테이너를 생성하기 때문에 반드시 이미지를 만드는 과정이 필요</li>
  <li>이미지를 저장할 곳이 필요</li>
</ul>

<h4 id="설정">설정</h4>

<ul>
  <li>보통 환경변수로 제어</li>
  <li>하나의 이미지가 환경변수에 따라 동적으로 설정파일을 생성하도록 만들어져야함</li>
</ul>

<h3 id="컨테이너">컨테이너</h3>

<ul>
  <li>격리된 공간에서 프로세스가 동작하는 기술</li>
  <li>가상화 기술의 하나</li>
</ul>

<h4 id="but-기존의-방식과는-차이가-있음">BUT. 기존의 방식과는 차이가 있음</h4>

<ul>
  <li>기존 가상화 방식은 주로 OS를 가상화 한 것
    <ul>
      <li>호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식</li>
      <li>이 방식은 어쨌든 성능상 문제가 있다고…</li>
    </ul>
  </li>
  <li>때문에 프로세스를 격리하는 방식 등장
    <ul>
      <li>리눅스에서는 프로세스만 격리시키는 리눅스 컨테이너 존재</li>
    </ul>
  </li>
  <li>하나의 서버에 여러개의 컨테이너를 실행하면 서로 영향을 미치지 않고 독립적으로 실행 가능
    <ul>
      <li>실행중인 컨테이너에 접속래 명령어 입력 가능</li>
      <li>패키지 설치 가능</li>
      <li>사용자 추가 가능</li>
      <li>여러개의 프로세스를 백그라운드로 실행 가능</li>
    </ul>
  </li>
</ul>

<h3 id="이미지-1">이미지</h3>

<ul>
  <li>컨테이너 실행에 필요한 모든 파일과 설정 값등을 포함</li>
  <li>상태값을 가지지 않고 변하지 않음</li>
  <li>컨테이너는 이미지를 실행한 상태</li>
  <li>추가되거나 변하는 값은 컨테이너에 저장됨</li>
  <li>같은 이미지에서 여러개 컨테이너를 생성할 수 있고, 컨테이너가 수정/삭제되어도 이미지는 변하지 않음</li>
  <li>ex) MySQL이미지는 MySQL을 실행하는데 필요한 파일과 실행 명령어, 포트 정보등을 가지고 있음</li>
  <li>도커 이미지는 <a href="https://hub.docker.com/">Docker hub</a>에 등록하거나 <a href="https://docs.docker.com/registry/">Docker Registry</a> 저장소를 직접 만들어 관리할 수 있음</li>
</ul>

<h4 id="모든-정보를-가지고-있다면-용량이-엄청-클텐데">모든 정보를 가지고 있다면 용량이 엄청 클텐데…</h4>

<ul>
  <li>이런 문제를 해결하기 위해 <strong>레이어</strong> 라는 개념 도입</li>
</ul>

<h4 id="레이어">레이어</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/bc4d8eb2-e4f2-481b-9141-c06532daa927/image.png" style="zoom: 67%;" /></p>

<ul>
  <li>여러개의 레이어를 하나의 파일 시스템으로 사용할 수 있게 해줌</li>
  <li>이미지는 여러개의 읽기전용 레이어로 구성</li>
  <li>파일이 추가되거나 수정되면 새로운 레이어가 생성됨</li>
  <li>어떤 이미지를 베이스로 새로운 이미지를 다운받는면 추가되는 레이어만 다운받으면 됨</li>
  <li>컨테이너를 생성할 때도 기존 이미지 레이어 위에 읽기, 쓰기 레이어를 추가하는데, 컨테이너가 실행중에 생성하는 파일, 변경 내용은 해당 레이어에만 저장되어 최소한의 용량만 사용</li>
</ul>

<h4 id="이미지-경로">이미지 경로</h4>

<ul>
  <li>이미지는 URL 방식으로 관리하며 태그를 붙일 수 있음</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1002ebcd-30c3-41da-bd92-4c6345c29bcd/image.png" style="zoom:50%;" /></p>

<h4 id="dockerfile">Dockerfile</h4>

<ul>
  <li>이미지를 만들기 위해 DSL을 통해 이미지 생성 과정을 적음</li>
</ul>

<h2 id="도커-설치--컨테이너-실행">도커 설치 &amp; 컨테이너 실행</h2>

<h3 id="리눅스에-도커-설치하기">리눅스에 도커 설치하기</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -fsSL https://get.docker.com/ | sudo sh
</code></pre></div></div>

<h3 id="sudo-없이-사용하기">sudo 없이 사용하기</h3>

<ul>
  <li>도커는 기본적으로 root 권한이 필요</li>
  <li>루트가 아닌 사용자가 sudo 없이 사용하기 위해 다음 명령어를 통해 사용자를 docker 그룹에 추가</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo usermod -aG docker $USER # 현재 접속중인 사용자에게 권한주기
</code></pre></div></div>

<h3 id="컨테이너-실행">컨테이너 실행</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">docker run --help</code> 명령어를 통해 다양한 옵션을 알아보자</li>
  <li>사용할 이미지가 저장되어 있는지 확인하고 없다면 다운로드 <code class="highlighter-rouge">pull</code>를 한 후 컨테이너를 생성 <code class="highlighter-rouge">create</code>하고 시작 <code class="highlighter-rouge">start</code></li>
</ul>

<h2 id="도커-기본-명령어">도커 기본 명령어</h2>

<h4 id="컨테이너-목록-확인하기-ps">컨테이너 목록 확인하기 (ps)</h4>

<ul>
  <li>컨테이너 목록을 확인</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps [OPTIONS]
</code></pre></div></div>

<h4 id="컨테이너-중지하기-stop">컨테이너 중지하기 (stop)</h4>

<ul>
  <li>실행중인 컨테이너 중지</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop [OPTIONS] CONTAINER [CONTAINER...]
</code></pre></div></div>

<h4 id="컨테이너-제거하기-rm">컨테이너 제거하기 (rm)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]
</code></pre></div></div>

<h4 id="이미지-다운로드하기-pull">이미지 다운로드하기 (pull)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]
</code></pre></div></div>

<h4 id="이미지-삭제하기-rmi">이미지 삭제하기 (rmi)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi [OPTIONS] IMAGE [IMAGE...]
</code></pre></div></div>

<h4 id="실행중인-컨테이너에-명령어-실행-exec">실행중인 컨테이너에 명령어 실행 (exec)</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
</code></pre></div></div>

<h2 id="도커-이미지-만들기">도커 이미지 만들기</h2>

<ul>
  <li>도커는 이미지를 만들기 위해 컨테이너의 상태를 그대로 이미지로 저장함</li>
  <li>ex) 어떤 애플리케이션을 이미지로 만든다면, 리눅스만 설치된 컨테이너에 애플리케이션을 설치하고 이 상태를 그대로 이미지로 저장</li>
  <li>
    <p>가상머신의 스냅샷과 비슷한 방식</p>
  </li>
  <li>이미지를 만들기 위해서는 <code class="highlighter-rouge">Dockerfile</code>이라는 이미지 빌드용 DSLDomain Specific Language 파일 작성</li>
</ul>

<h4 id="이미지-빌드">이미지 빌드</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build [OPTIONS] PATH | URL | -
</code></pre></div></div>

<ul>
  <li>생성할 이미지 이름을 지정하기 위한 <code class="highlighter-rouge">-t(--tag)</code> 옵션만 알면 빌드가 가능</li>
</ul>

<h3 id="도커-이미지-저장소">도커 이미지 저장소</h3>

<ul>
  <li>도커는 빌드한 이미지를 서버에 배포하기 위해 직접 파일을 복사하는 방법 대신 <a href="https://docs.docker.com/registry/">도커 레지스트리</a>(Docker Registry)라는 이미지 저장소를 사용</li>
  <li>이미지를 레지스트리에 푸시push하고 다른 서버에서 풀pull받아 사용하는 구조 (like. git)</li>
</ul>

<h4 id="도커-허브-사용">도커 허브 사용</h4>

<ul>
  <li>기본 이미지 저장소로 ubuntu, centos, debian등의 베이스 이미지와 ruby, golang, java, python 등의 공식 이미지가 저장되어 있음</li>
  <li><a href="https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html">사용법은 참고 자료를 참고하자</a></li>
</ul>

<h3 id="배포하기">배포하기</h3>

<ul>
  <li>기존 애플리케이션은 사용하는 언어, 프레임워크, 웹(or WAS)서버, 리눅스 배포판, 개발자의 취향에 따라 각각 다른 방식을 사용</li>
  <li>새로운 서버를 셋팅하고 한 번에 배포를 성공한다는 건 굉장히 힘든 일</li>
  <li>또한 의존성 라이브러리가 제대로 설치되었는지 검증하기도 매우 어려웠음</li>
  <li>컨테이너를 사용하면 어떤 언어, 어떤 프레임워크를 쓰든 상관없이 배포 방식이 동일해지고 과정 또한 굉장히 단순해짐</li>
  <li>이미지를 다운받고 컨테이너를 실행하면 끝</li>
</ul>

<hr />

<h3 id="참고자료">참고자료</h3>

<ul>
  <li><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html">초보를 위한 도커 안내서 - 도커란 무엇인가?</a></li>
  <li><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html">초보를 위한 도커 안내서 - 설치하고 컨테이너 실행하기</a></li>
  <li><a href="https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html">초보를 위한 도커 안내서 - 이미지 만들고 배포하기</a></li>
  <li><a href="https://subicura.com/2016/06/07/zero-downtime-docker-deployment.html">도커를 이용한 웹서비스 무중단 배포하기</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>⚒️ CI/CD란, 젠킨스 실습해보기</title>
	  <link>//ci-and-cd</link>
	  <author></author>
	  <pubDate>2021-07-11T19:18:00+09:00</pubDate>
	  <guid>//ci-and-cd</guid>
	  <description><![CDATA[
	     <h2 id="ci-continuous-integration">CI (Continuous Integration)</h2>

<ul>
  <li>지속적 통합</li>
  <li>개발하면서 코드에 대한 통합을 지속적으로 진행</li>
  <li>여러 개발자가 작성하거나 수정한 소스를 지속적으로 통합하고 테스트</li>
  <li><strong>빌드 및 테스트 자동화</strong></li>
</ul>

<h3 id="ci를-적용할-때의-흐름">CI를 적용할 때의 흐름</h3>

<ol>
  <li>개발자는 자신이 개발한 소프트웨어의 소스코드를 공통된 버전 관리시스템(github 등)에 저장.</li>
  <li>소스코드상에 변동이 생기면 버전 관리 시스템에서는 CI 툴로 소스코드 변경 알림</li>
  <li>CI툴에서는 변경된 소스코드를 대상으로 Build, Test, Merge를 진행</li>
  <li>이 과정들이 완료되면 슬랙, 카카오톡, 메일 등을 통해 통합 결과를 알림</li>
</ol>

<h2 id="cd-continuous-delivery-continuous-deployment">CD (Continuous Delivery, Continuous Deployment)</h2>

<ul>
  <li>지속적 배포</li>
  <li>애플리케이션이 항상 신뢰 가능한 수준에서 배포될 수 있도록 지속적으로 관리하자는 개념</li>
  <li>변경 사항을 레포지토리에서 프로덕션 환경까지 자동으로 배포하는 것</li>
  <li><strong>배포 자동화</strong></li>
</ul>

<h3 id="cd를-적용했을-때의-흐름">CD를 적용했을 때의 흐름</h3>

<ol>
  <li>CI를 통해 소스코드를 검증</li>
  <li>검증된 소프트웨어를 실제 프로덕션 환경으로 배포</li>
</ol>

<h2 id="cicd">CI/CD</h2>

<h3 id="tool">Tool</h3>

<ul>
  <li>Jenkins</li>
  <li>Travis CI</li>
  <li>Bamboo</li>
</ul>

<hr />

<h2 id="젠킨스-도커로-cicd-연습">젠킨스, 도커로 CI/CD 연습</h2>

<blockquote>
  <p><a href="https://jojoldu.tistory.com/139">docker를 이용한 CI 구축 연습하기 (젠킨스, 슬랙)</a> 를 따라하는 일지</p>
</blockquote>

<h3 id="buildgradlekts에-tasks-추가">Build.gradle.kts에 tasks 추가</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/9096f099-e638-42cd-b719-b7ede0f32535/image.png" style="zoom:33%;" /></p>

<ul>
  <li>필수는 아니지만, 테스트용으로 추가</li>
</ul>

<h3 id="쿠버네티스-설치---스킵">쿠버네티스 설치 - 스킵</h3>

<ul>
  <li><a href="https://kubernetes.io/ko/docs/tasks/tools/install-kubectl-macos/">Mac Os</a></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew install kubectl
// or
brew install kubernetes-cli


kubectl version --client
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/571f5b45-43e9-46ab-ae98-1f6600b4c863/image.png" style="zoom:50%;" /></p>

<ul>
  <li>엥 근데 실패…</li>
</ul>

<h4 id="해결">해결</h4>

<ul>
  <li><a href="https://github.com/kubernetes/kubernetes/issues/79503">참고</a></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ brew cleanup
$ brew update
$ brew install kubectl
</code></pre></div></div>

<h4 id="쿠버네티스-설치가-아니었음">쿠버네티스 설치가 아니었음</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/ef0d93f3-3ca7-4565-9c72-0b54bc4577c7/image.png" style="zoom:50%;" /></p>

<ul>
  <li>아 이걸 쿠버네티스로 착각 ㅎㅎㅎ 🙃</li>
</ul>

<h3 id="젠킨스-설치">젠킨스 설치</h3>

<h4 id="이미지-pull-및-실행">이미지 pull 및 실행</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -itd --name jenkins -p 8085:8080 jenkins/jenkins:lts
</code></pre></div></div>

<ul>
  <li>run : 이미지를 실행</li>
  <li><strong>-itd</strong> : interacitve terminal + detach(background)</li>
  <li><strong>–name</strong> : 이미지 이름 지정</li>
  <li><strong>-p</strong>: <외부 port="">:<컨테이너 내부port=""></컨테이너></외부></li>
  <li><strong>jenkins/jenkins:lts</strong> : docker hub이미지 저장소:버전</li>
</ul>

<h4 id="동작-확인">동작 확인</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/e081e56d-95b1-4c1e-b50b-09cf960c6df2/image.png" style="zoom:50%;" /></p>

<h3 id="젠킨스-접속">젠킨스 접속</h3>

<ul>
  <li>나는 port를 8085로 했으니 http://localhost:8085/ 으로 접속</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1732d9e5-f24d-4913-8486-cd405579d6d4/image.png" alt="" /></p>

<ul>
  <li>짠 이렇게 로그인 화면 뜸</li>
</ul>

<h4 id="로그인">로그인</h4>

<ul>
  <li>초기 비번은 젠킨스 컨테이너 안 <code class="highlighter-rouge">/var/jenkins_home/secrets/initialAdminPassword</code> 에 있음</li>
  <li>다음 명령어로 패스워드 확인</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
</code></pre></div></div>

<h4 id="플러그인-설치">플러그인 설치</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a02378ab-4a01-4036-aa7e-e1a7be1fc357/image.png" alt="" /></p>

<ul>
  <li>install suggested plugins 를 선택하면 많이 사용되는 플러그인들이 포함되어 자동 설치</li>
  <li>github 플러그인도 자동 설치됨</li>
  <li>install suggested plugins 이걸 안 선택할 이유가 뭐야 없어</li>
</ul>

<h4 id="관리자-계정-생성">관리자 계정 생성</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/2aecb0a0-6483-4533-a707-5387be536161/image.png" alt="" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a1c4e71b-0c00-4960-a1c5-3e424bb9e86f/image.png" alt="" /></p>

<h4 id="설치-완료">설치 완료</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/20c10d76-0bd4-4a3e-bbe4-d5ea247d79bc/image.png" alt="" /></p>

<ul>
  <li>오예</li>
  <li>젠킨스 컨테이너를 다시 시작해야 한다면 <code class="highlighter-rouge">docker start jenkins</code>로 설치된 젠킨스 컨테이너를 실행 후,</li>
  <li><code class="highlighter-rouge">docker exec -it jenkins /bin/bash</code> 입력</li>
  <li><code class="highlighter-rouge">docker run</code>은 재설치를 함</li>
</ul>

<h3 id="젠킨스-설정">젠킨스 설정</h3>

<ul>
  <li>젠킨스 메인페이지에서 <code class="highlighter-rouge">새로운 Item</code>을 클릭</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/4e48f30e-08fc-4d0a-bd4c-a54d67c9fe52/image.png" alt="" /></p>

<ul>
  <li>프로젝트 이름을 입력해주고…</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/2cbde34b-d7bc-465f-b818-dc2121cbb3dc/image.png" alt="" /></p>

<ul>
  <li>깃 레포지토리 주소를 등록</li>
  <li>그리고 Credentials 에 있는 Add 버튼을 누르기</li>
</ul>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210712004730575.png" alt="image-20210712004730575" /></p>

<ul>
  <li>Kind : Username with password 선택</li>
  <li>github의 계정, 비번 등록</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/65473bf2-35db-4dbc-9de9-603f1f141b59/image.png" style="zoom:33%;" /></p>

<ul>
  <li>그리고 방금 등록한 계정 선택</li>
  <li>젠킨스 빌드가 관리될 브랜치 선택</li>
</ul>

<h4 id="build-trigger">Build Trigger</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/7cdb52b2-4b91-40cd-8024-4b45b48478a0/image.png" style="zoom: 33%;" /></p>

<h4 id="build">Build</h4>

<ul>
  <li>Excute shell 선택</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/6e732c9c-3e3e-4874-b186-ea31054ffc3c/image.png" style="zoom: 33%;" /></p>

<ul>
  <li>빌드 스크립트 작성</li>
</ul>

<h4 id="토큰-발급">토큰 발급</h4>

<ul>
  <li>github에서 토큰 발급하기</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/6c1da1aa-c501-450b-a6f0-2c5ace5d6899/image.png" alt="" /></p>

<ul>
  <li>발급된 토큰을 복사하고, 다시 젠킨스로…</li>
  <li>젠킨스 대시보드 -&gt; 젠킨스 관리 탭 -&gt; 시스템 설정</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/7ad805b0-5673-4cbd-ac0f-ab81157bd723/image.png" style="zoom:67%;" /></p>

<ul>
  <li>Domain : Global credentials (unrestricted) 선택</li>
  <li>Kind : Secret text 선택</li>
  <li>Secret : 위에서 생성한 github 토큰 입력</li>
  <li>ID : 본인이 지정하는 식별자(ID) 입력 (ex: github)</li>
</ul>

<h4 id="저장하면-끝-build-now">저장하면 끝! Build Now!</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/6e2bd4cd-7f0e-49a9-b9c8-4a9ab276e7b8/image.png" style="zoom:50%;" /></p>

<ul>
  <li>콘솔도 확인할 수 있음</li>
</ul>

<h4 id="콘솔-출력">콘솔 출력</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Started by user newwisdom
Running as SYSTEM
Building in workspace /var/jenkins_home/workspace/subway-kotlin
The recommended git tool is: NONE
using credential 0139eabb-5494-46ce-875e-1bdeedd0d391
Cloning the remote Git repository
Cloning repository https://github.com/NewWisdom/subway-kotlin.git
 &gt; git init /var/jenkins_home/workspace/subway-kotlin # timeout=10
Fetching upstream changes from https://github.com/NewWisdom/subway-kotlin.git
 &gt; git --version # timeout=10
 &gt; git --version # 'git version 2.20.1'
using GIT_ASKPASS to set credentials 
 &gt; git fetch --tags --force --progress -- https://github.com/NewWisdom/subway-kotlin.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 &gt; git config remote.origin.url https://github.com/NewWisdom/subway-kotlin.git # timeout=10
 &gt; git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
Avoid second fetch
 &gt; git rev-parse refs/remotes/origin/master^{commit} # timeout=10
Checking out Revision 7b0fb7eff520316950d4a0a769d11c46848f76b4 (refs/remotes/origin/master)
 &gt; git config core.sparsecheckout # timeout=10
 &gt; git checkout -f 7b0fb7eff520316950d4a0a769d11c46848f76b4 # timeout=10
Commit message: "feat(member): 멤버 관련 기본 셋팅 추가"
First time build. Skipping changelog.
[subway-kotlin] $ /bin/sh -xe /tmp/jenkins8995160598138643631.sh
+ ./gradlew clean print
Downloading https://services.gradle.org/distributions/gradle-7.0.2-bin.zip
..........10%...........20%...........30%..........40%...........50%...........60%..........70%...........80%...........90%..........100%

Welcome to Gradle 7.0.2!

Here are the highlights of this release:
 - File system watching enabled by default
 - Support for running with and building Java 16 projects
 - Native support for Apple Silicon processors
 - Dependency catalog feature preview

For more details see https://docs.gradle.org/7.0.2/release-notes.html

Starting a Gradle Daemon (subsequent builds will be faster)
&gt; Task :clean UP-TO-DATE

&gt; Task :print
github push complete

BUILD SUCCESSFUL in 2m 43s
2 actionable tasks: 1 executed, 1 up-to-date
Finished: SUCCESS
</code></pre></div></div>

<ul>
  <li>아직까지는 Build Now를 해야지 빌드가 됨</li>
</ul>

<h3 id="원격-서버-배포">원격 서버 배포</h3>

<ul>
  <li>EC2에 올리고 이후 실습을 진행해보자</li>
  <li>추후 업데이트</li>
</ul>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li>
    <p><a href="https://deveric.tistory.com/106">CI/CD 의 개념, 적용해본 후기</a></p>
  </li>
  <li>
    <p><a href="https://goddaehee.tistory.com/260?category=399178">Jenkins 빌드 자동화 - github push시 자동 빌드 하기(github webhook)</a></p>
  </li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 JPA - Cascade 노트</title>
	  <link>//jpa-casecade</link>
	  <author></author>
	  <pubDate>2021-07-08T10:01:00+09:00</pubDate>
	  <guid>//jpa-casecade</guid>
	  <description><![CDATA[
	     <p>JPA에서 엔티티를 저장할 때 연관된 모든 엔티티는 영속 상태여야 한다.<br />
부모 엔티티를 영속 상태로 만들 때 연관된 자식도 한번에 영속 상태로 만들 수 있다.</p>

<h2 id="cascade란">Cascade란?</h2>

<ul>
  <li>영속성 전이</li>
  <li>연관관계에 있는 엔티티에 작업이 이루어져 상태 변화가 이뤄질 시 동일한 작업이 연결된 엔티티에 전이되는 옵션</li>
  <li>일반적으로 부모 엔티티에서 cascade 옵션을 걸어줌</li>
  <li>자식에서 부모로 옵션을 거는 것은 의미가 없다고함</li>
  <li>즉시로딩, 지연로딩, 연관관계 세팅과 관계 없음</li>
  <li>부모, 자식 엔티티와 연관관계 주인(외래키 관리자)는 다름</li>
</ul>

<h3 id="entity의-상태">Entity의 상태</h3>

<ul>
  <li><strong>Transient</strong> : JPA가 모르는 상태 (단순 객체 생성)</li>
  <li><strong>Persistent</strong> : JPA가 관리중인 상태 (1차 캐시, Dirty Checking, Write Behind, …)</li>
  <li><strong>Detached</strong> : JPA가 더이상 관리하지 않는 상태</li>
  <li><strong>Removed</strong> : JPA가 관리하긴 하지만 삭제하기로 한 상태</li>
</ul>

<h3 id="casecade-옵션-일부">casecade 옵션 (일부)</h3>

<h4 id="persist">PERSIST</h4>

<ul>
  <li>엔티티를 영속화 할 때 연관된 엔티티도 함께 유지</li>
  <li>Transient 인스턴스를 Persistent로 만들어줌</li>
</ul>

<h4 id="remove">REMOVE</h4>

<ul>
  <li>엔티티를 삭제할 때, 연관된 엔티도 함께 삭제</li>
</ul>

<h4 id="all">ALL</h4>

<ul>
  <li>모든 CASCADE 옵션 적용</li>
  <li>모든 작업을 부모에서 자식 엔티티로 전파</li>
</ul>

<h2 id="예시">예시</h2>

<h3 id="아무런-옵션이-없는-경우">아무런 옵션이 없는 경우</h3>

<h4 id="comment">Comment</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Comment</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">comment</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span>
    <span class="kd">private</span> <span class="n">Post</span> <span class="n">post</span><span class="o">;</span>
<span class="o">}</span> 
</code></pre></div></div>

<h4 id="post">Post</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Post</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"post"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Comment</span><span class="o">&gt;</span> <span class="n">comments</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addComment</span><span class="o">(</span><span class="n">Comment</span> <span class="n">comment</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">getComments</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">comment</span><span class="o">);</span>
        <span class="n">comment</span><span class="o">.</span><span class="na">setPost</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="test-코드">Test 코드</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/cddb1ee2-22ca-47f4-9153-54f8b207c8ed/image.png" style="zoom:50%;" /></p>

<ul>
  <li>자식인 Comment는 저장되지 않음
    <ul>
      <li>id가 null임을 확인</li>
    </ul>
  </li>
</ul>

<h3 id="cascadetypeall을-건-경우">CascadeType.ALL을 건 경우</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a9058252-290e-4373-a2a1-1209ddd93929/image.png" style="zoom:50%;" /></p>

<ul>
  <li>부모인 Post 엔티티에서 자식인 Comments에 옵션걸기</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/7b0a6cb1-5ce9-490a-80a3-32048d2a6281/image.png" style="zoom: 33%;" /></p>

<ul>
  <li>id가 null이 아님을 확인</li>
</ul>

<h2 id="고아-객체-제거">고아 객체 제거</h2>

<ul>
  <li>JPA에서는 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능 제공</li>
  <li>참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제</li>
  <li>때문에 참조하는 객체가 하나일 때만 사용해야 함 (특정 엔티티에서만 소유하고 있는 엔티티)</li>
  <li><code class="highlighter-rouge">@OneToOne</code>, <code class="highlighter-rouge">@OneToMany</code> 에서만 사용 가능</li>
</ul>

<h4 id="example">Example</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d5580482-d984-43e1-8a51-d407d75bc0a1/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Comments 객체는 Post에서만 소유하고 있음</li>
  <li>Comments에 <code class="highlighter-rouge">orphanRemoval</code> 옵션 추가</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/70cb0d2c-9aa1-44ec-854b-e7386352fd6b/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Comments를 제거하였을 때,</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/a0b3db75-0b62-4034-9cdf-99d6885c85e4/image.png" style="zoom:33%;" /></p>

<ul>
  <li>comment에 대해서 다음과 같이 delete 쿼리가 나감</li>
</ul>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://vladmihalcea.com/a-beginners-guide-to-jpa-and-hibernate-cascade-types/">A beginner’s guide to JPA and Hibernate Cascade Types</a></li>
  <li><a href="https://webcoding-start.tistory.com/41">영속성 전이 및 고아객체 제거</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Kotlin으로 Spring Rest Docs 삽질하기 (feat. 제작 근로)</title>
	  <link>//service-work-kotlin4</link>
	  <author></author>
	  <pubDate>2021-07-06T10:01:00+09:00</pubDate>
	  <guid>//service-work-kotlin4</guid>
	  <description><![CDATA[
	     <h2 id="spring-rest-docs-설정---buildgradlekts">Spring Rest Docs 설정 - build.gradle.kts</h2>

<h4 id="플러그인-추가">플러그인 추가</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span><span class="p">{</span>
	<span class="c1">// ...
</span>	<span class="n">id</span><span class="p">(</span><span class="s">"org.asciidoctor.convert"</span><span class="p">)</span> <span class="n">version</span> <span class="s">"1.5.9.2"</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="asciidoctor-spring-rest-docs-의존성-추가">asciidoctor, Spring Rest Docs 의존성 추가</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">asciidoctor</span><span class="p">(</span><span class="s">"org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE"</span><span class="p">)</span>
<span class="n">testImplementation</span><span class="p">(</span><span class="s">"org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="snippets-저장-경로-지정">snippets 저장 경로 지정</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">snippetsDir</span> <span class="k">by</span> <span class="n">extra</span> <span class="p">{</span> <span class="n">file</span><span class="p">(</span><span class="s">"build/generated-snippets"</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<h4 id="task-추가">task 추가</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tasks</span> <span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="n">test</span> <span class="p">{</span>
        <span class="n">useJUnitPlatform</span><span class="p">()</span>
        <span class="n">outputs</span><span class="p">.</span><span class="n">dir</span><span class="p">(</span><span class="n">snippetsDir</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">asciidoctor</span> <span class="p">{</span>
        <span class="n">inputs</span><span class="p">.</span><span class="n">dir</span><span class="p">(</span><span class="n">snippetsDir</span><span class="p">)</span>
        <span class="n">dependsOn</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">bootJar</span> <span class="p">{</span>
        <span class="n">dependsOn</span><span class="p">(</span><span class="n">asciidoctor</span><span class="p">)</span>
        <span class="n">from</span><span class="p">(</span><span class="s">"$snippetsDir/html5"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">into</span><span class="p">(</span><span class="s">"static/docs"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="-tasks---사용자-정의-task를-만들-수-있음">➕ tasks - 사용자 정의 task를 만들 수 있음</h4>

<h5 id="테스크란">테스크란?</h5>

<ul>
  <li>gradle은 명령에의해 테스크(Task)를 수행하는 프로그램</li>
  <li>gradle compileJava , gradle run 등 명령어를 통해 실행하는 것들이 모두 테스크</li>
  <li>Gradle 프로젝트의 작업단위</li>
  <li>Task는 독립적인 액션을 수행할 수 있고, 다른 Task에 대한 의존성을 설정할 수 있음</li>
</ul>

<h3 id="spring-rest-docs-삽질-기록">Spring Rest Docs 삽질 기록</h3>

<ul>
  <li>build.gradle.kts 설정을 끝냄</li>
  <li><code class="highlighter-rouge">generated-snippets</code> 폴더는 만들어 지지만 테스트 코드를 돌려도 스닙펫이 만들어지지 않는 문제 발생</li>
  <li>build.gradle.kts 문제일줄 알았으나 아니었다</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/d7784113-3ab2-41f1-8880-d5e1b16c1d21/image.png" style="zoom: 33%;" /></p>

<ul>
  <li>테스트 코드가 dsl 로 되어 있음</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/6e888edf-6a57-4a76-805b-f2ce8c0e7ae5/image.png" style="zoom:33%;" /></p>

<ul>
  <li>https://github.com/spring-projects/spring-restdocs/issues/677</li>
  <li>dsl 일 경우 <code class="highlighter-rouge">handle()</code>을 통해 <code class="highlighter-rouge">document()</code>실행해야함</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/da507bab-476d-486c-9d04-56a523e29515/image.png" style="zoom: 33%;" /></p>

<h3 id="mockmvc-설정">mockMvc 설정</h3>

<ul>
  <li><code class="highlighter-rouge">@AutoConfigureRestDocs</code> 를 사용하기 위해 <code class="highlighter-rouge">@AutoConfigureMockMvc</code> 를 통해 수동 설정해주고 싶었으나</li>
  <li><code class="highlighter-rouge">@AutoConfigureMockMvc</code> 를 해주면 utf-8 설정을 할 수 없는 오류 발생</li>
  <li>때문기존 코드는 mockMvc를 수동 설정해주고 있었음</li>
  <li>이러면 <code class="highlighter-rouge">@AutoConfigureRestDocs</code> 이 먹히지 않기 때문에 아래와 같은 오류 발생</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/a426272c-0364-4977-93e7-3f25e897ce9b/image.png" style="zoom:33%;" /></p>

<ul>
  <li>다음 설정을 통해 RestDocs 관련 설정도 mockmvc에 추가</li>
</ul>

<h4 id="어노테이션-추가">어노테이션 추가</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Import(RestDocsConfiguration::class)
@ExtendWith(RestDocumentationExtension::class, SpringExtension::class)
</code></pre></div></div>

<h4 id="setup">setUp</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">@BeforeEach</span>
<span class="k">internal</span> <span class="k">fun</span> <span class="nf">setUp</span><span class="p">(</span>
    <span class="n">webApplicationContext</span><span class="p">:</span> <span class="n">WebApplicationContext</span><span class="p">,</span>
    <span class="n">restDocumentationContextProvider</span><span class="p">:</span> <span class="n">RestDocumentationContextProvider</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="n">mockMvc</span> <span class="p">=</span> <span class="n">MockMvcBuilders</span><span class="p">.</span><span class="n">webAppContextSetup</span><span class="p">(</span><span class="n">webApplicationContext</span><span class="p">)</span>
        <span class="p">.</span><span class="n">addFilter</span><span class="p">&lt;</span><span class="n">DefaultMockMvcBuilder</span><span class="p">&gt;(</span><span class="n">CharacterEncodingFilter</span><span class="p">(</span><span class="s">"UTF-8"</span><span class="p">,</span> <span class="k">true</span><span class="p">))</span>
        <span class="p">.</span><span class="n">alwaysDo</span><span class="p">&lt;</span><span class="n">DefaultMockMvcBuilder</span><span class="p">&gt;(</span><span class="n">MockMvcResultHandlers</span><span class="p">.</span><span class="n">print</span><span class="p">())</span>
        <span class="p">.</span><span class="n">apply</span><span class="p">&lt;</span><span class="n">DefaultMockMvcBuilder</span><span class="p">&gt;(</span>
            <span class="n">MockMvcRestDocumentation</span><span class="p">.</span><span class="n">documentationConfiguration</span><span class="p">(</span>
                <span class="n">restDocumentationContextProvider</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="p">.</span><span class="n">build</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="참고자료">참고자료</h3>

<ul>
  <li>
    <p><a href="http://5.9.10.113/66568054/spring-rest-docs-can-not-generate-snippets-use-gradle-kotlin">spring-rest-docs can not generate snippets use gradle kotlin</a></p>
  </li>
  <li>
    <p><a href="https://gitlab.com/TIBHannover/orkg/orkg-backend/blob/b4ef1f49f3351597200c28a71a50cd0283b97fa8/build.gradle.kts">build.gradle.kts · b4ef1f49f3351597200c28a71a50cd0283b97fa8 · TIB Hannover / Open Research Knowledge Graph (ORKG) / ORKG Backend</a></p>
  </li>
  <li>
    <p><a href="https://github.com/awakuwaku/spring-rest-docs-kotlin-sample/blob/main/build.gradle.kts">awakuwaku/spring-rest-docs-kotlin-sample</a></p>
  </li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-fare 미션 정리</title>
	  <link>//atdd-subway-fare-note</link>
	  <author></author>
	  <pubDate>2021-06-16T10:01:01+09:00</pubDate>
	  <guid>//atdd-subway-fare-note</guid>
	  <description><![CDATA[
	     <h2 id="요금-정책">요금 정책</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/cd715abe-edce-405a-811a-2b9cff62398b/image.png" style="zoom:33%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/9b90163c-02c0-4f7a-8801-0c1d74a5e47e/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>로그인 사용자와 비로그인 사용자를 구별하여 요금 정책을 적용</li>
  <li>PathController에서는 토큰이 없어도 예외가 아니었고</li>
  <li>MemberController에서는 토큰이 없으면 예외였기에 Resolver에서는 각각에 맞는 처리를 해주어야 했음</li>
  <li>맨 처음 페어랑 기능만 돌아가게 구현했을 때는 기존에 있는 로그인된 사용자에 대한 인가 과정을 거치는 Resolver를 재사용하도록 구현</li>
  <li>이러기 위해서는 이 각각에 맞는 처리를 일간 Controller로 옮겨야 했음</li>
</ul>

<h4 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="n">LoginMember</span> <span class="n">member</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membercontroller에서-loginmember에-대한-처리">MemberController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">unAuthorizedThrowException</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 없으면 (존재하지 않는 사용자이면) 예외</li>
</ul>

<h4 id="pathcontroller에서-loginmember에-대한-처리">PathController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">LoginMember</span> <span class="nf">unLoginMemberWrapper</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">loginMember</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 존재하지 않으면 age를 <code class="highlighter-rouge">-1</code> 로 wrap</li>
</ul>

<h5 id="그런데-이렇게-구현하고-생각한-문제점이">그런데 이렇게 구현하고 생각한 문제점이…</h5>

<ul>
  <li>Controller에서 이미 리졸빙된 LoginMember에 대한 처리를 또 건드리고 있다는 느낌</li>
  <li>Controller에서 LoginMember에 대한 비즈니스 로직을 알고 있는 느낌이라 개선이 필요하다고 느낌</li>
  <li>age를 -1로 감싸서 이 경우 비로그인자로 가정하는 로직이 괜찮은지 의문을 품고 있었음</li>
</ul>

<h4 id="페어의-리뷰어에게-온-피드백">페어의 리뷰어에게 온 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/8c7d30b2-c0f7-45af-b31f-dfd6a6ef247d/image.png" style="zoom:50%;" /></p>

<ul>
  <li>일단 <code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code> 와 <code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 두개로 분리하였음</li>
  <li><code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 에서는 요금 정책에 필요한 값인 <code class="highlighter-rouge">age</code> 만 반환하도록 리팩토링</li>
</ul>

<h4 id="ageauthenticationprincipalargumentresolver">AgeAuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AgeAuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AgeAuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AgeAuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
        <span class="n">LoginMember</span> <span class="n">memberByToken</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberByToken</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">Integer</code> 형인 age를 반환하도록….
    <ul>
      <li>반환타입을 명시적으로 적어줄걸 그랬네</li>
    </ul>
  </li>
</ul>

<h4 id="pathservice의-findpath">PathService의 findPath()</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="n">Long</span> <span class="n">source</span><span class="o">,</span> <span class="n">Long</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineService</span><span class="o">.</span><span class="na">findLines</span><span class="o">();</span>
        <span class="n">Station</span> <span class="n">sourceStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
        <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">SubwayPath</span> <span class="n">subwayPath</span> <span class="o">=</span> <span class="n">pathFinder</span><span class="o">.</span><span class="na">findPath</span><span class="o">(</span><span class="n">lines</span><span class="o">,</span> <span class="n">sourceStation</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">calculateDistance</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">lineFare</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">getMaxLineFare</span><span class="o">();</span>
        <span class="n">SubwayPathFare</span> <span class="n">subwayPathFare</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayPathFare</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">distance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">PathResponseAssembler</span><span class="o">.</span><span class="na">assemble</span><span class="o">(</span><span class="n">subwayPath</span><span class="o">,</span> <span class="n">subwayPathFare</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPathException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="subwaypathfare">SubwayPathFare</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayPathFare</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayPathFare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">wrapAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lineFare</span> <span class="o">=</span> <span class="n">lineFare</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">wrapAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFare</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">fareByDistance</span> <span class="o">=</span> <span class="n">FareCalculatorByDistance</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">distance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">FareAdjusterByAge</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">fareByDistance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요금 정책을 해당 도메인에서 Enum인 <code class="highlighter-rouge">FareCalculatorByDistance</code> 와 <code class="highlighter-rouge">FareAdjusterByAge</code> 를 통해 계산하고 있었음</li>
  <li><code class="highlighter-rouge">wrapAge()</code> 를 통해 null 값으로 age가 들어오면 <code class="highlighter-rouge">FareAdjusterByAge.of()</code>에서 스트림을 돌리는데, 이에 예외가 발생하지 않도록 -1로 포장</li>
</ul>

<h5 id="참고---fareadjusterbyageof">참고 - FareAdjusterByAge.of()</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">of</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fare</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">ageRange</span> <span class="o">-&gt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&amp;&amp;</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">maxExclusive</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">calculator</span> <span class="o">-&gt;</span> <span class="n">calculator</span><span class="o">.</span><span class="na">adjuster</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">))</span>
            <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
            <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="farecalculatorbydistance---거리별-요금-정책">FareCalculatorByDistance - 거리별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareCalculatorByDistance</span> <span class="o">{</span>
    <span class="n">BASE</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">distance</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span><span class="o">),</span>
    <span class="n">FIRST_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">5</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">),</span>
    <span class="n">SECOND_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="mi">800</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">8</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">);</span>


    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">;</span>

    <span class="n">FareCalculatorByDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">minExclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">,</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minExclusive</span> <span class="o">=</span> <span class="n">minExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxInclusive</span> <span class="o">=</span> <span class="n">maxInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="fareadjusterbyage---나이별-요금-정책">FareAdjusterByAge - 나이별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareAdjusterByAge</span> <span class="o">{</span>
    <span class="n">PRE_SCHOOLED</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="mi">0</span><span class="o">)),</span>
    <span class="n">SCHOOL_AGED</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_RATE</span><span class="o">)),</span>
    <span class="n">ADOLESCENT</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_RATE</span><span class="o">));</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">;</span>

    <span class="n">FareAdjusterByAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">minInclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">=</span> <span class="n">minInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxExclusive</span> <span class="o">=</span> <span class="n">maxExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">adjuster</span> <span class="o">=</span> <span class="n">adjuster</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getIntegerBinaryOperator</span><span class="o">(</span><span class="kt">double</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(((</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-</span> <span class="mi">350</span><span class="o">)</span> <span class="o">*</span> <span class="n">rate</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="리뷰어에게-받은-피드백">리뷰어에게 받은 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a9f5ac3d-548f-4f90-ad43-e3af67abc64a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>리뷰어의 의도는 Member를 나타내는 도메인에서 age를 nullable하게 두고 이를 처리하는 것이 더 명확할 것 같다하심</li>
</ul>

<h3 id="아쉬운-점">아쉬운 점</h3>

<h4 id="나이별-요금정책을-적용할-때-member-도메인을-사용해볼걸">나이별 요금정책을 적용할 때 Member 도메인을 사용해볼걸!</h4>

<p>현재 경로 조회를 할 때는 member 도메인이 넘어오지 않고 age 값만 넘어오도록 구현했었다.<br />
그런데 Age는 Member에 종속되는 필드인데 이를 빼서 독립적으로 처리하고 있는게 지금보니 마음에 들지 않는다.<br />
만약 Member의 다른 필드들도 요금정책에 영행을 주게 된다면 유지보수가 어려운 코드가 된다.<br />
크루들이랑 이야기를 해보니 한 리졸버에서 Member를 반환해주는데, 이 반환 도메인을 한 인터페이스(예를 들면 Member)를 만들고 이를 구현한 <code class="highlighter-rouge">Guest</code>, <code class="highlighter-rouge">LoginMember</code> 로 로그인, 비로그인 사용자를 구별하여 로직을 수행하는 방법도 있다고 한다.</p>

<p>이러면 리졸버를 나눌 필요도 없고 Member가 age를 가지고 나이에 관한 요금 정책을 수행할 때 해당 도메인에게 물어서 처리할 수 있을 것 같다.</p>

<h4 id="enum에-predicate를-가직-할걸">Enum에 Predicate를 가직 할걸!</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a53fbb31-926c-4123-813c-72f4d7fda9ca/image.png" style="zoom: 50%;" /></p>

<p>또한 각각 요금 정책을 Enum으로 구현하였는데, 여기서 상수를 쓰니 가독성이 매우 떨어지는 느낌이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d4bfdf8-ddba-44dc-83be-af5f15860ae8/image.png" style="zoom:33%;" /></p>

<p>상수를 쓴 이유는 위의 피드백으로 매직 넘버에 의미를 부여하고 싶었으나… <br />
이렇게 하니 오히려 가독성을 헤치는 느낌이었고 마지막 리뷰대로 Enum 안에 범위를 판단하는 <code class="highlighter-rouge">Predicate</code> 를 가지도록 할걸 그랬다.</p>

<h2 id="프론트엔드와의-협업">프론트엔드와의 협업</h2>

<ul>
  <li>백엔드 4, 프론트엔드 2명 정도씩 팀을 이루어 협업하는 미션이었음</li>
  <li><a href="https://www.notion.so/4b3b784386a246babcdef0bda179babb">해당 문서</a> 에 있는 프론트엔드 요구사항을 뼈대코드에 반영해 나감</li>
</ul>

<h2 id="api-문서화">API 문서화</h2>

<ul>
  <li>Spring Rest Docs를 통해 API 문서화 작업을 진행</li>
  <li>기존에 있는 RestAssured 테스트를 이용해 API를 만들수도 있는데, 페어랑 같이 시도하다가 계속 오류나서….</li>
  <li>결국 MockMvc로 테스트 코드 다시짜서 API 문서를 만들었음</li>
  <li>다른 크루가 RestAssured로 문서를 만들었던데 그거 보고 시도해봐야지…</li>
  <li>또 리뷰어가 제시한 방향으로 API 문서 만드는 테스트 코드를 조금 수정했더니 더 좋은 문서를 만들 수 있었음</li>
</ul>

<h4 id="controllertest">ControllerTest</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@AutoConfigureRestDocs</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationRequestPreprocessor</span> <span class="nf">getDocumentRequest</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessRequest</span><span class="o">(</span>
                <span class="n">modifyUris</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="s">"https"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">host</span><span class="o">(</span><span class="s">"newwisdom-subway.p-e.kr"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">removePort</span><span class="o">(),</span>
                <span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationResponsePreprocessor</span> <span class="nf">getDocumentResponse</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessResponse</span><span class="o">(</span><span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>API 문서 만드는데 필요한 MockMvc 테스트들은 위 클래스를 상속받고 있음</li>
  <li>리뷰어의 제안을 통해 <code class="highlighter-rouge">getDocumentRequest()</code>와 <code class="highlighter-rouge">getDocumentResponse()</code> 을 추가</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/d4396804-6e9e-4046-a749-99c2cbe085db/image.png" style="zoom: 50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/edaba672-3c4a-481f-984e-e08fa2ba6f20/image.png" style="zoom:50%;" /></p>

<h2 id="테스트-코드의-가독성">테스트 코드의 가독성</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/ab0ebe3f-3560-4b80-a470-781c1731354f/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/24757641-e6c6-4a74-b84a-7a014edfc99c/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이번 리뷰어가 테스트 코드에서 가독성을 지키지 못한 부분들을 많이 피드백 해주었음</li>
  <li>테스트 코드도 하나의 문서이며 유지보수 대상이기 때문에 가독성을 고려해야 한다는 것을 느꼈음</li>
  <li>서로 다른 테스트에서 공통으로 쓰이는 메서드들은 상위 클래스인 AcceptanceTest로 끌어 올림</li>
  <li>테스트에 쓰이는 변수명들도 맥락을 파악하기 쉽도록 변경</li>
  <li>상수처리도 신경씀</li>
</ul>

<h2 id="예외-처리">예외 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2518ddc4-c4ce-4a7a-8ee1-49becedb7936/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>“일단 프론트의 요구사항 다 반영하도록 구현해보자!”로 잡고 했더니 무수한 커스텀 예외가 만들어졌다…^ㅠ^</li>
  <li>이를 개선할 방법을 찾다가… 크루들한테 들은 <a href="https://cheese10yun.github.io/spring-guide-exception/">Spring Guide - Exception 전략</a> 을 적용해보기로~</li>
  <li>RuntimeException을 상속받는 BuisnessException을 만들고 필드에 상태코드와 ErrorMessage(DTO)를 가지도록 구현</li>
  <li>이를 상속하는 상태코드 400인 BusinessException과 상태코드 401인 AuthorizationException을 만듦</li>
  <li>또 이를 상속받는 각각의 클라이언트의 요구사항에 맞는 커스텀 예외 만듦</li>
  <li>
    <p>ControllerAdvice에서는 다음과 같이 BuisnessException을 잡고 이 예외에서 상태코드와 예외 메시지를 꺼내도록 구현</p>
  </li>
  <li>이렇게 되면 어드바이스에서 수많은 커스텀 예외들을 BuisnessException 하나만 잡고 처리할 수 있음</li>
  <li>상태코드에 따른 클래스를 두어 이가 변경되어도 유지보수가 쉬움</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">BusinessException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorMessage</span><span class="o">&gt;</span> <span class="nf">handleRuntimeException</span><span class="o">(</span><span class="n">BusinessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHttpStatus</span><span class="o">()).</span><span class="na">body</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="businessexception">BusinessException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">httpStatus</span><span class="o">,</span> <span class="k">new</span> <span class="n">ErrorMessage</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">httpStatus</span> <span class="o">=</span> <span class="n">httpStatus</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorMessage</span> <span class="o">=</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">HttpStatus</span> <span class="nf">getHttpStatus</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ErrorMessage</span> <span class="nf">getErrorMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="authorizationexception">AuthorizationException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>401 상태코드</li>
</ul>

<h4 id="badrequestexception">BadRequestException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BadRequestException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">BadRequestException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>400 상태코드</li>
</ul>

<h2 id="배포-스크립트">배포 스크립트</h2>

<ul>
  <li>실제 API 사용이 가능하도록 EC2에 배포하여야 했음</li>
  <li>프로젝트가 업데이트되면 프로세스를 재시동해야했음</li>
  <li>이러면 여러가지 명령어를 실행해야 함….</li>
  <li>이를 스크립트로 만들어 한번에 처리하도록 구현!</li>
</ul>

<h4 id="deploy-prodsh">deploy-prod.sh</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c">#!/bin/bash in the top of your scripts then you are telling your system to use bash as a default shell.</span>

<span class="nv">REPOSITORY</span><span class="o">=</span>/home/ubuntu/ <span class="c"># 경로 설정</span>
<span class="nv">PROJECT_NAME</span><span class="o">=</span>atdd-subway-fare

<span class="nb">cd</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/ <span class="c"># 경로로 접근</span>

<span class="nb">echo</span> <span class="s2">"&gt; git reset --hard"</span> 

git reset <span class="nt">--hard</span> <span class="c"># 깃허브 초기화</span>

<span class="nb">echo</span> <span class="s2">"&gt; git pull origin step1"</span>

git pull origin step1 <span class="c"># pull 땡겨오기</span>

<span class="nb">echo</span> <span class="s2">"&gt; 프로젝트 Build 시작"</span>

./gradlew clean build <span class="c"># 빌드</span>

<span class="nb">echo</span> <span class="s2">"&gt; Build 파일 경로 복사"</span>

<span class="nv">JAR_LOCATION</span><span class="o">=</span><span class="k">$(</span>find ./<span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*jar"</span> | <span class="nb">grep </span>atdd-subway-fare<span class="k">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 pid 확인"</span>

<span class="nv">CURRENT_PID</span><span class="o">=</span><span class="k">$(</span>pgrep <span class="nt">-f</span> <span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="o">[</span><span class="nt">-A-z0-9</span>.]<span class="k">*</span>.jar<span class="nv">$)</span> <span class="c"># 실행시켜져있는 jar pid 받기 </span>


<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$CURRENT_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># -z 플래그는 null인것을 체크함, PID가 null인 경우 if절 안으로 들어감</span>
    <span class="nb">echo</span> <span class="s2">"&gt; 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 종료(pid : </span><span class="nv">$CURRENT_PID</span><span class="s2">)"</span>
    <span class="nb">echo</span> <span class="s2">"&gt; kill -15 </span><span class="nv">$CURRENT_PID</span><span class="s2">"</span>
    <span class="nb">kill</span> <span class="nt">-15</span> <span class="nv">$CURRENT_PID</span>
    sleep 5
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"&gt; 새 애플리케이션 배포"</span>
<span class="nb">echo</span> <span class="s2">"&gt; JAR Location: </span><span class="nv">$JAR_LOCATION</span><span class="s2">"</span> 해당 jar파일 실행

<span class="c">#nohup java -jar 실행</span>
nohup java <span class="nt">-jar</span> <span class="nt">-Dspring</span>.profiles.active<span class="o">=</span>prod <span class="k">${</span><span class="nv">JAR_LOCATION</span><span class="k">}</span> 1&gt; log-prod.md 2&gt;&amp;1  &amp;
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-path 미션 정리</title>
	  <link>//atdd-subway-path-note</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-path-note</guid>
	  <description><![CDATA[
	     <h2 id="step1-2">STEP1, 2</h2>

<h3 id="jwttokenprovider">JwtTokenProvider</h3>

<ul>
  <li>jwt 토큰 생성, 토큰 검증, 토큰에서 인증 정보 추출하는 유틸 클래스</li>
</ul>

<h3 id="authorizationextractor">AuthorizationExtractor</h3>

<ul>
  <li>HTTP의 <code class="highlighter-rouge">Authorization</code> Header에서 Bearer 타입인 경우 Access Token을 추출하는 유틸 클래스</li>
</ul>

<h3 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalConfig</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="n">List</span> <span class="n">argumentResolvers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">argumentResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createAuthenticationPrincipalArgumentResolver</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">createAuthenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>AuthenticationPrincipalArgumentResolver는 빈 등록이 되어있지 않음</li>
  <li>해당 리졸버를 활용할 수 있도록 등록해주는 java config</li>
  <li><code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code>를 만들고 등록</li>
</ul>

<h3 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// resolveArgument 메서드가 동작하는 조건을 정의하는 메서드</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 파라미터 중 @AuthenticationPrincipal이 붙은 경우 동작하게 설정</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// supportsParameter가 true인 경우 동작</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Member</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>컨트롤러 메서드에서 특정 조건에 맞는 파라미터가 있을 때 원하는 값을 바인딩해주는 인터페이스</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">resolveArgument</code> 에서 <code class="highlighter-rouge">Member</code> 도메인 자체를 반환했었음</p>
  </li>
</ul>

<h4 id="관련-정리">관련 정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/13">Spring MVC Config 학습 테스트</a></li>
</ul>

<h3 id="authinterceptor">AuthInterceptor</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthInterceptor</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">authService</span><span class="o">.</span><span class="na">validateToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>인증 / 인가에 대한 토큰 검증을 담당</p>
  </li>
  <li>
    <p>토큰이 유효하면 true를 반환하도록</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">AuthorizationExtractor.extract()</code> 가 리졸버랑 중복이 되는데?</p>

    <ul>
      <li>어쩔 수 없음. 이 둘은 서로 모르는 관계로 독립적이니</li>
      <li>변경의 영향도 최소화를 위해 JwtProvider가 아닌 JwtProvider를 포함한 AuthService를 가지도록</li>
    </ul>
  </li>
</ul>

<h2 id="step3">STEP3</h2>

<h4 id="graph---그래프-역할을-하는-도메인">Graph - 그래프 역할을 하는 도메인</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Graph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nf">Graph</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initPath</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Section</span> <span class="n">section</span> <span class="o">:</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">initEdge</span><span class="o">(</span><span class="n">section</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initEdge</span><span class="o">(</span><span class="n">Section</span> <span class="n">section</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">());</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">());</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">setEdgeWeight</span><span class="o">(</span><span class="n">graph</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">(),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">()),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addVertex</span><span class="o">(</span><span class="n">Station</span> <span class="n">station</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">graph</span><span class="o">.</span><span class="na">containsVertex</span><span class="o">(</span><span class="n">station</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">addVertex</span><span class="o">(</span><span class="n">station</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">shortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">dijkstraShortestPath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">graph</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">(),</span> <span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="path---사실상-dto-느낌">Path - 사실상 DTO 느낌…</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Path</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Path</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">,</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stations</span> <span class="o">=</span> <span class="n">stations</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">stations</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stations</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">distance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="처음-구현한-로직---모든-line을-불러와-최단-거리-조회">처음 구현한 로직 - 모든 Line을 불러와 최단 거리 조회</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">lines</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/452f11f4-a8e7-4365-a71c-9c2be5f6435a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>사실 처음에는 sections만 가져와서 그래프를 그렸으나, 이렇게 되면 해당 역의 이름들을 가져올 수 없었음</li>
  <li>기존 코드를 사용하려고 일단 LineDao를 이용했었는데, 재연링의 리뷰대로 모든 Line을 조회하기 보다 필요한 Sections만 조회하도록 리팩토링</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/88d775c4-942a-4437-8f62-a7b0215a96a1/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이 부분은 DM으로 이야기를 나눴는데,</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PathService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PathService</span><span class="o">(</span><span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">,</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sectionDao</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationDao</span> <span class="o">=</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">path</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="cors-이슈-해결-법">CORS 이슈 해결 법</h2>

<ul>
  <li>나같은 경우는 front쪽에 프록시 서버를 두어 해당 이슈가 발생하지 않도록 하였음</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/54">내가 CORS 이슈를 해결한 방법 - Proxy </a></li>
</ul>

<h2 id="cookie-vs-localstorage">Cookie vs LocalStorage</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4d9503c2-642a-4ed5-9531-acfc39e6f29b/image.png" style="zoom:50%;" /></p>

<ul>
  <li><a href="https://woowacourse.github.io/javable/post/2020-08-31-where_to_store_token/">토큰을 어디에 저장할까?</a> 글을 보고 토큰을 쿠키에 저장</li>
  <li>재연링의 리뷰로 쿠키를 사용했을 때의 문제점을 알아봄</li>
  <li>XSS 공격을 막을 수 있는 HTTP-Only 쿠키를 고려</li>
  <li>하지만 이는 JS에서 꺼내 쓸 수 없어 헤더에 토큰을 실어 보낼 수 없는 이슈</li>
  <li>(미션 요구사항과 OAuth 표준 등을 고려해) 재연링과 나눈 DM 내용과 같이 다음과 같은 문제들로 쿠키 대신 LocalStorage에 토큰을 저장하도록 변경</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 웹 이외의 클라이언트까지 고려하는 것이 좋다고 생각
* OAuth 표준을 지키기 위함
* 사실 HttpOnly를 통해 보호하여도, 하이재킹 등 많은 보안적 위험이 존재하기 때문에 악의적인 의도를 가진 사람이 불편해질 뿐 보안적으로 완벽하게 처리되지 않음
* MDN에서도 HTML5 이후부터 Cookie를 저장소와 같은 용도로 사용하지 않을 것을 권장
</code></pre></div></div>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/21">XSS, CSRF</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/22">SameSite Cookie</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/33">Cookie VS Local Storage</a></li>
</ul>

<h2 id="front">Front</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a00c23b4-79f3-46f2-891d-863f25e8a418/image.png" style="zoom:50%;" /></p>

<ul>
  <li><code class="highlighter-rouge">vue.config</code>를 통해 중복되는 URL에 대한 설정</li>
  <li>중복되는 fetch는 모듈로 따로 만들어서(fetch.js) 사용하도록 변경</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/4b5e5a10-0ebf-4d5b-8750-b6a5ccf92652/image.png" style="zoom:50%;" /></p>

<h2 id="argumentresolver와-authinterceptor">ArgumentResolver와 AuthInterceptor</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/336584ce-5eaf-45d6-ab2f-c4066eb03ab1/image.png" style="zoom:50%;" /></p>

<h4 id="argumentresolver">ArgumentResolver</h4>
<blockquote>
  <p>Strategy interface for resolving method parameters into argument values in the context of a given request.</p>
  <ul>
    <li>매개변수의 리졸빙</li>
    <li>컨트롤러에서 파라미터를 바인딩 해주는 역할
      <h4 id="authinterceptor-1">AuthInterceptor</h4>
      <p>Workflow interface that allows for customized handler execution chains. Applications can register any number of existing or custom interceptors for certain groups of handlers, to add common preprocessing behavior without needing to modify each handler implementation.
A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers the execution of the handler itself. This mechanism can be used for a large field of preprocessing aspects, e.g. for authorization checks, or common handler behavior like locale or theme changes. Its main purpose is to allow for factoring out repetitive handler code.</p>
    </li>
    <li>권한 확인 또는 로케일 또는 테마 변경과 같은 일반적인 핸들러 동작과 같은 전처리 측면의 넓은 분야에 사용</li>
    <li>인증 / 인가에 대한 검사</li>
    <li>주요 목적은 반복적 인 핸들러 코드를 제거하는 것</li>
    <li>Spring doc에서 공식적으로 authorization checks를 하는 애라고 지정해준 존재</li>
    <li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html">공식문서</a></li>
  </ul>
</blockquote>

<p><strong>인터셉터와 리졸버는 서로를 모르는 관계이고 독립적으로 가야함</strong></p>
<h4 id="참고할-글">참고할 글</h4>
<ul>
  <li><a href="https://velog.io/@sa833591/Spring-Filter-Interceptor-AOP-%EC%B0%A8%EC%9D%B4-yvmv4k96">Filter, Interceptor, AOP 차이
</a></li>
</ul>

<h4 id="정리-2">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/28">HandlerInterceptor</a></li>
</ul>

<h2 id="다시-구현한다면">다시 구현한다면?</h2>

<h4 id="argumentresolver-에서-dto인-loginmember를-반환하게-할걸">ArgumentResolver 에서 DTO인 LoginMember를 반환하게 할걸!</h4>

<ul>
  <li>도메인을 반환하면 뷰와 컨트롤러에 노출시키고 도메인을 조작할 가능성이 있음</li>
  <li>또 불필요한 pw 필드도 가지게 됨</li>
</ul>

<h4 id="비번-암호화와-member-객체에서-비번을-확인하게-할걸">비번 암호화와 member 객체에서 비번을 확인하게 할걸!</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmailAndPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>비번을 암호화 할 때는 Spring Security의 <code class="highlighter-rouge">BCryptPasswordEncoder()</code> 를 사용</li>
  <li>회원가입할 때 입력한 비번을 인코딩하여 저장</li>
  <li>그런데 만약 여기서 로그인할 때 입력한 비번을 <code class="highlighter-rouge">encoder.encode()</code> 하여 조회하면 실패</li>
  <li>왜냐면 동일한 원문이어도 각기 다른 인코딩된 값을 내뱉기 때문</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PasswordEncoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
<span class="n">String</span> <span class="err">원문</span> <span class="o">=</span> <span class="s">"qwe123"</span><span class="o">;</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="n">_2</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>

<span class="n">encorder</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="err">원문</span><span class="o">,</span> <span class="err">암호화된</span> <span class="err">원문</span><span class="o">);</span> <span class="c1">// true</span>
<span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//false</span>
</code></pre></div></div>

<ul>
  <li>때문에 쿼리로 Member를 받아오고 이 객체에서 <code class="highlighter-rouge">encorder.matches()</code>를 이용해 비번을 확인하자</li>
</ul>

<h4 id="최단거리-찾는-로직을-전략-패턴으로-구현할걸">최단거리 찾는 로직을 전략 패턴으로 구현할걸!</h4>

<ul>
  <li>도메인에 외부 라이브러리를 가지고 있는 것이 옳은가?</li>
  <li>만약 알고리즘이 변경되면 도메인에도 영향이 감</li>
  <li>전략패턴으로 Dijkstra 알고리즘을 주입하자</li>
</ul>

<hr />

<h2 id="2021-06-16-위-사항들을-반영하여-다시-구현">2021-06-16 위 사항들을 반영하여 다시 구현</h2>

<h3 id="argumentresolver에서-dto인-loginmember-반환하도록-리팩토링">ArgumentResolver에서 DTO인 LoginMember 반환하도록 리팩토링</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">LoginMember</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findLoginMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="loginmember">LoginMember</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginMember</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>로직에 필요한 정보만 담고 있는 DTO 생성</p>
  </li>
  <li>아 참고로 Interceptor에서는 토큰 검증만 하도록 함
    <ul>
      <li>차피 이미 로그인으로 아이디 비번을 검증했잖아?</li>
    </ul>
  </li>
  <li>리졸버에서는 토큰을 통해 진짜 매개변수 리졸빙만 담당</li>
</ul>

<h3 id="member-객체에서-비번을-확인하도록">member 객체에서 비번을 확인하도록</h3>

<h4 id="authservice">AuthService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">isInvalidPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()))</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">Member</span> <span class="nf">findMember</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>추후 단방향 비번 암호화를 위해 객체에서 비번을 비교하도록 변경</li>
</ul>

<h3 id="최단거리-찾는-로직을-전략-패턴으로">최단거리 찾는 로직을 전략 패턴으로</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/923976a2-131b-45c4-8911-c8a0b3da1e0c/image.png" style="zoom:33%;" /></p>

<ul>
  <li>최단 경로 찾기 전략을 인터페이스로, 이를 다익스트라로 구현한 클래스를 만듦</li>
  <li>알고리즘을 코드의 영향없이 변경할 수 있도록</li>
</ul>

<h4 id="subwaygraph">SubwayGraph</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayGraph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayGraph</span><span class="o">(</span><span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">;</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>
   <span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>그래프 도메인</li>
</ul>

<h4 id="shortestpathstrategy-인터페이스">ShortestPathStrategy 인터페이스</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>

    <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>전략마다 <code class="highlighter-rouge">getVertexList()</code> 와 <code class="highlighter-rouge">getPathWeight()</code> 를 계산하도록 명세</li>
</ul>

<h4 id="dijkstrashortestpathstrategy">DijkstraShortestPathStrategy</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DijkstraShortestPathStrategy</span> <span class="kd">implements</span> <span class="n">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathAlgorithm</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">shortestPathAlgorithm</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">SubwayGraph</span> <span class="n">subwayGraph</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathAlgorithm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">subwayGraph</span><span class="o">.</span><span class="na">getGraph</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>SubwayGraph를 받아서 최단 경로를 구할 수 있음</li>
</ul>

<h4 id="shortestpathfinder">ShortestPathFinder</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShortestPathFinder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ShortestPathFinder</span><span class="o">(</span><span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathStrategy</span> <span class="o">=</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">findShortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getVertexList</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>최단 경로를 찾는 역할</li>
  <li>전략을 주입받아 최단 경로를 구하고 싶어 도메인을 분리하였음…</li>
</ul>

<h4 id="변경된-pathservice">변경된 PathService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
    <span class="n">SubwayGraph</span> <span class="n">subwayGraph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayGraph</span><span class="o">(</span><span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;&gt;(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">sections</span><span class="o">);</span>
    <span class="n">ShortestPathFinder</span> <span class="n">shortestPathFinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShortestPathFinder</span><span class="o">(</span><span class="k">new</span> <span class="n">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">subwayGraph</span><span class="o">));</span>
    <span class="n">Path</span> <span class="n">shortestPath</span> <span class="o">=</span> <span class="n">shortestPathFinder</span><span class="o">.</span><span class="na">findShortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">shortestPath</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">shortestPath</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="반영된-코드는-여기에-"><a href="https://github.com/NewWisdom/atdd-subway-path/tree/step5">반영된 코드는 여기에 👻</a></h4>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-map 미션 정리</title>
	  <link>//atdd-subway-map</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-map</guid>
	  <description><![CDATA[
	     <h2 id="중복되는-테스트-메서드">중복되는 테스트 메서드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/73cdc1c4-063d-4a4e-af29-6520fecb721e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>중복되는 테스트 메서드는 추출하자</li>
  <li>테스트코드도 유지보수의 대상이며 하나의 문서이기 때문에 가독성을 고려하자</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ExtractableResponse</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">addSection</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">RestAssured</span><span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
    <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
    <span class="o">.</span><span class="na">when</span><span class="o">()</span>
    <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/lines/{id}/sections"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">)</span>
    <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="예외-처리는-service에서">예외 처리는 Service에서</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/004aa497-1875-4a85-ba7d-2ab1c0f4f40e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DAO에서 예외를 체크해주고 있었음</li>
  <li>DAO는 말그대로 DB에 어세스하는 역할만 할 뿐</li>
  <li>이 결과에 대한 예외는 서비스가 알아서 하도록 하자</li>
</ul>

<h2 id="valid와-validated로-dto-검증">@Valid와 @Validated로 DTO 검증</h2>

<ul>
  <li><code class="highlighter-rouge">@Valid</code> 를 통해 DTO에서 요청에 대한 검증을 하게 해줌</li>
  <li>Validation을 group화 할 수 있는 점을 이용해서 각기 요청마다 group을 지어 한 DTO를 사용해도 각각 요청에 맞는 검증을 진행</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/30">@Valid / @Validation으로 요청값 검증</a></li>
</ul>

<h2 id="valid로-잡은-예외-메시지-처리">Valid로 잡은 예외 메시지 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2ca1114f-98c3-4ce6-b968-0212fcbbc658/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>Valid 어노테이션으로 잡은 MethodArgumentNotValidException의 메시지를 제대로 출력하고 있지 않았음</li>
  <li>게이츠가 제안해준 방법을 적용하니 BindingResult에 있는 예외 메시지들을 추출하여 던져줄 수 있었음</li>
</ul>

<h2 id="service-레이어에서-도메인이-아닌-dto를-반환하자">Service 레이어에서 도메인이 아닌 DTO를 반환하자</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2e62828-da05-401f-bad8-e1e86f9b7c9a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Controller에서 도메인을 가져다 써서 화면에 필요한 데이터를 표현하기 위해 도메인 자체나 도메인의 getter를 노출시키고 있었음</li>
  <li>도메인의 정보를 외부(view)에 노출하는 경우, interface인 DTO를 통해 서비스 레이어에서 반환하도록 리팩토링</li>
  <li><a href="https://github.com/HomoEfficio/dev-tips/blob/master/DTO-DomainObject-Converter.md">참고</a></li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/26">Service Layer에서 도메인 객체가 아닌 DTO를 반환해야하는 이유? (feat.Open Session In View) </a></li>
</ul>

<h2 id="restassured에-대해">RestAssured에 대해</h2>

<ul>
  <li>전 단계까지는 MockMVC 등으로 컨트롤러단을 단위테스트로 진행했음</li>
  <li>E2E 테스트를 한다는 것은 말 그대로 끝부터 끝까지,요청부터 내가 원하는 응답을 테스트 하는 것인데 <br />
이렇게되면 단위 테스트를 하는 이유가 있을까라는 고민을 했음</li>
  <li>고민한 결과 “단위 테스트는 구현 단계에서 내가 구현한 레이어(단위)가 정상 동작하는지를 테스트하기 위해,
이후 모든 단위들이 조합되었을 때 통합테스트를 통해 애플리케이셔이 원하는 기능을 잘 수행하는지 테스트한다”
이렇게 결론을 내림</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/191d92fe-c4e1-4595-b67f-ee1d37e1d9a6/image.png" style="zoom:33%;" /></p>

<h2 id="구간-추가-로직">구간 추가 로직</h2>

<ul>
  <li>구간을 추가할 때 상행역, 하행역이 존재하는지 또 이를 찾고 수정해주기 위한 많은 로직을 작성해야했음</li>
  <li>그런데 사실 비슷한 로직인데 상행인지 하행인지 대상만 달랐음</li>
  <li>아래와 같이 일단 구현을 목적으로 했을 때는 엄청난 분기가 생겨버림</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이는 상행구간 찾기, 하행구간 찾기를 전략패턴을 이용해 리팩토 해버렸음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LineService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LineRepository</span> <span class="n">lineRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">;</span>
<span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>일단 LineService가 구간을 찾는 전략을 가지고 있음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">,</span> <span class="n">findSectionStrategies</span><span class="o">);</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">updateToAdd</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">));</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>대상 구간을 찾을 때 전략들을 주입하고</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">Section</span> <span class="nf">findSectionWithStation</span><span class="o">(</span><span class="n">Station</span> <span class="n">targetStation</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">findSectionStrategies</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">findSectionStrategy</span> <span class="o">-&gt;</span> <span class="n">findSectionStrategy</span><span class="o">.</span><span class="na">findSection</span><span class="o">(</span><span class="n">sections</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">))</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">isPresent</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">get</span><span class="o">)</span>
    <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
    <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">EMPTY</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Sections에서 다음과 같이 해당 구간을 찾음</li>
</ul>

<h2 id="pr-링크">PR 링크</h2>

<ul>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/86">STEP1</a></li>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/162">STEP2</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 스프링 부트 Profile로 다른 환경 구성</title>
	  <link>//profile</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//profile</guid>
	  <description><![CDATA[
	     <h2 id="profile">Profile?</h2>

<ul>
  <li>애플리케이션 일부 configuration을 분리하고 싶을 때 사용</li>
  <li>애플리케이션 일부 configuration을 특정 환경에서만 가능하게 하고 싶을 때 사용</li>
  <li>개발 환경에 따라 설정값을 달르게 로딩할 때</li>
</ul>

<h2 id="profile-1">@Profile</h2>

<ul>
  <li><code class="highlighter-rouge">@Component, @Configuration, @ConfigurationProperties</code>을 <code class="highlighter-rouge">@Profile</code>와 함께 선언</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"production"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductionConfiguration</span> <span class="o">{</span>

    <span class="c1">// ...</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>어플리케이션 실행시 <code class="highlighter-rouge">spring.profiles.active</code> 프로퍼티로 프로파일을 지정하면 해당 프로파일이 적용된 빈만 등록됨</li>
</ul>

<p><strong>application-properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev,hsqldb
</code></pre></div></div>

<h4 id="example">Example</h4>

<ol>
  <li>application-properties에 다음과 같이 정의
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=prod
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">@Profile</code> 어노테이션과 함께 <code class="highlighter-rouge">@Configuration</code> 등록</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311111-0f322800-c93f-11eb-9455-436a99434869.png" alt="image" style="zoom:50%;" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121311125-13f6dc00-c93f-11eb-8a93-3923630d84fa.png" alt="image" style="zoom:50%;" /></p>

<ol>
  <li>어플리케이션 실행시 active한 prod에 등록된 hello 빈이 출력됨</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311276-3a1c7c00-c93f-11eb-9698-9abf9172184f.png" alt="image" /></p>

<h3 id="profile과-activeprofiles">@Profile과 @ActiveProfiles</h3>
<ul>
  <li>서로 다른 환경에서 서로 다른 profile을 활성화하여 필요한 빈만 등록하도록 하는 어노테이션</li>
  <li><code class="highlighter-rouge">@Profile</code>은 SpringBootApplication을 실행할 때 사용</li>
  <li><code class="highlighter-rouge">@ActiveProfiles</code>은 테스트 환경에서 사용</li>
</ul>

<h2 id="applicationproperties">application.properties</h2>

<ul>
  <li>application-{profile}.properties 형식으로 파일 생성</li>
  <li>이는 <code class="highlighter-rouge">@ConfigurationProperties</code>로 간주되고 로드됨
    <ul>
      <li>*.properties , *.yml 파일에 있는 property를 자바 클래스에 값을 가져와서(바인딩) 사용할 수 있게 해주는 어노테이션</li>
    </ul>
  </li>
  <li>application-{profile}.properties은 application.properties 보다 우선순위가 높게됨</li>
  <li>빌드할 때 다음과 같은 명령어와 함께 특정 환경설정을 적용할 수 있음
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=production
</code></pre></div>    </div>
  </li>
  <li>properties 파일에 <code class="highlighter-rouge">spring.profiles.include</code>를 통해 추가할 프로파일을 설정할 수 있음</li>
</ul>

<h4 id="example-1">Example</h4>

<p><strong>application-properties</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev
profile-common.name = default_name_mazzi
defaultonly.name = defualt_name
</code></pre></div></div>
<p><strong>application-prod.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = test_name_mazzi
testonly.name = test_name
</code></pre></div></div>
<p><strong>application-dev.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = dev_name_mazzi
devonly.name = dev_name
</code></pre></div></div>
<p><strong>AppRunner</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="n">ApplicationRunner</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"spring.profiles.active : "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">getOptionValues</span><span class="o">(</span><span class="s">"spring.profiles.active"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Enviroment's Active Profile : "</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">()));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"defaultonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"defaultonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"testonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"testonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"devonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"devonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"profile-common.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"profile-common.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>실행 결과</strong></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121315869-b6b15980-c943-11eb-83a9-7e4214b18fe6.png" alt="image" style="zoom:50%;" /></p>

<ul>
  <li>profile-common.name는 모든 프로퍼티 파일이 공통으로 가진 프로퍼티</li>
  <li>dev 프로파일을 활성화</li>
  <li>공통 속성인 <code class="highlighter-rouge">profile-common.name</code>은 우선순위가 높은 dev 프로파일의 것으로 오버라이드 됨</li>
</ul>

<hr />
<h3 id="참고자료">참고자료</h3>
<ul>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">공식문서</a></li>
  <li><a href="https://yangbox.tistory.com/35">스프링부트 프로파일(Springboot Profile)로 다른 환경 구성하기</a></li>
  <li><a href="https://engkimbs.tistory.com/766">스프링 부트 프로파일(Spring Boot Profile)</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📚 jwp-chess 미션 정리</title>
	  <link>//jwp-chess-note</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//jwp-chess-note</guid>
	  <description><![CDATA[
	     <h2 id="controlleradvice">@ControllerAdvice</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9838b28-b9fd-4cd3-9f8f-f19229e5da70/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>전역 예외를 처리하는데 사용</li>
</ul>

<h4 id="정리">정리</h4>

<p><a href="https://github.com/NewWisdom/TIL/issues/1">@ControllerAdvice, @RestControllerAdvice</a></p>

<h2 id="rest-api">REST API</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/b7428bd8-737e-489a-a59d-d3e8a1adcfd2/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3dbc03af-5e1c-4be6-a1e0-7332517831ec/image.png" style="zoom:50%;" /></p>

<ul>
  <li>REST API 설계 방법을 찾아보고 고민하여 반영</li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/2">REST API 디자인</a></li>
</ul>

<h2 id="profile">Profile</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4fdbb04e-3c16-4a59-954f-b0020d245842/image.png" style="zoom:50%;" /></p>

<ul>
  <li>실제 애플리케이션에서 사용하는 DB는 Mysql 그대로 냅두고</li>
  <li>테스트에서는 h2를 사용하여 h2 의 장점을 극대화해서 사용하도록 리팩또</li>
  <li>테스트 DB를 따로 설정하기 위해 열심히 찾아보다가 application-properties를 활용하는 방안 학습</li>
  <li>처음에는 application-{환경}-properties로 각각 파일을 만들어주었음</li>
  <li>아래와 같은 리뷰를 받고 test.resource에 application-properties를 만들어줌</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5dc4b405-47bc-4422-83f8-eedaa3b7732e/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4aa931db-0a73-4ada-9ba2-2bb0e3b3ea3b/image.png" style="zoom:33%;" /></p>

<h4 id="정리-2">정리</h4>

<ul>
  <li>Profile에 대해 추가적으로 학습하고 정리</li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/47">Profile</a></li>
</ul>

<h2 id="테스트에-관하여">테스트에 관하여</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/03a3dc16-07b5-48d0-bf51-fbea7bacc9f6/image.png" style="zoom:50%;" /></p>

<ul>
  <li>지난 레벨 체스 코드 옮겨오면서 테스트 코드는 빼고 옮겨왔었음 🥲</li>
  <li>데이브의 권유대로 각 레이어별 테스트 코드 작성</li>
  <li>처음에는 단순히 <code class="highlighter-rouge">@SpringBootTest</code> (통합테스트)로 진행하려 했음</li>
  <li>찾아보니 각 레이어를 단위 테스트로도 구현할 수 있음을 깨달음</li>
  <li><code class="highlighter-rouge">@WebMvcTest, @jdbcTest</code>을 통해 Controller와 Repository 레이어에 대한 단위 테스트를 구현</li>
</ul>

<h4 id="정리-3">정리</h4>

<ul>
  <li><a href="https://newwisdom.github.io/unit-test-vs">통합 테스트 VS 단위 테스트</a></li>
</ul>

<h2 id="학습하라고-던져주신-키워드">학습하라고 던져주신 키워드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9147f41d-e48f-479d-8573-2f23fcbff416/image.png" style="zoom:50%;" /></p>

<h4 id="정리-4">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/3#issue-862548280">@Responsebody는 어떤 역할을 해줄까?</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/4#issue-862590487">@Componentscan</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/5#issue-862591289">스프링의 DI 방법</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/6">Spring에서 request 처리 과정</a></li>
</ul>

<h2 id="이번-미션에서-이런-키워드들을-학습했음-">이번 미션에서 이런 키워드들을 학습했음 👻</h2>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues?q=is%3Aissue+is%3Aopen+label%3Ajwp-chess">내 깃헙 issue에 등록했지롱</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Auth 강의</title>
	  <link>//lecture-auth</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//lecture-auth</guid>
	  <description><![CDATA[
	     <h2 id="피드백-강의">피드백 강의</h2>

<h3 id="인증-헤더">인증 헤더</h3>

<p>로그인을 통해 토큰을 발급 받은 후 헤더에 Authorization에 토큰을 실어보낸다.<br />
왜 굳이 이 헤더에 토큰을 넣어 보낼까?</p>

<h3 id="http-인증">HTTP 인증</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/567b6a87-15f7-4409-be6a-2a4baf9b3ffb/image.png" style="zoom:50%;" /></p>

<p>HTTP 프로토콜의 정의이기 때문이다.</p>

<ol>
  <li>클라이언트가 “/” 요청을 보낸다.</li>
  <li>서버는 접근을 할 수 있는지 확인하고, 없으면 401을 보낸다.</li>
  <li>여기서는 basic이라는 방식으로 토큰을 검증하고 있다. 잘못되었으니 다시 요청해!</li>
</ol>

<h3 id="http-인증-스킴">HTTP 인증 스킴</h3>

<h4 id="basic">Basic</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e9a8db3-4221-43a8-84fa-c2f81f371ab1/image.png" style="zoom:33%;" /></p>

<ul>
  <li>base64를 이용해 인코딩된 사용자의 id/pw 쌍의 인증 정보를 전달</li>
  <li>안전을 위해 HTTPS(TLS) 연결 위에서 발생되어야 함</li>
</ul>

<h4 id="bearer">Bearer</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d631b9a8-b41d-438e-8038-6299f044616a/image.png" style="zoom:33%;" /></p>

<ul>
  <li>bearer token이라는 보안 토큰을 활용하는 인증 스킴</li>
  <li>Outh2.0에서 사용하기 위해 만들어짐</li>
</ul>

<h2 id="jwt">JWT</h2>

<ul>
  <li>Json Web Token</li>
  <li>웹 표준 (RFC 7519)</li>
  <li>자체적으로 검증되었음을 증명해주는 signature를 포함</li>
  <li>생성시 검증이나 권한 인가 시 필요한 값을 넣어 상태를 따로 관리하지 않아도 됨</li>
</ul>

<h3 id="토큰의-구성">토큰의 구성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1bcb51b5-e245-4389-9b50-a6d91bc27d2d/image.png" style="zoom:50%;" /></p>

<h4 id="1-header">1. Header</h4>

<ul>
  <li>토큰에 대한 해석 방법</li>
  <li>alg : 시그니처에서 사용할 알고리즘 방법</li>
  <li>typ : 토큰의 타입</li>
</ul>

<h4 id="2-payload">2. Payload</h4>

<ul>
  <li>토큰의 내용, 전달할 내용</li>
  <li>payload의 각각의 값을 클레임이라고 함</li>
  <li>sub : 클레임의 제목</li>
  <li>name :</li>
  <li>iat : 생성 시간</li>
  <li>이 역시도 base64로 인코딩</li>
</ul>

<h4 id="3-signature">3. Signature</h4>

<ul>
  <li>헤더와 페이로드가 변조되지 않았음을 검즌</li>
  <li>base64로 인코딩을 하고, 알고리즘과 키값으로 해독</li>
</ul>

<p><strong>basic과 bearer 둘 다 base64로 인코딩 하면 어떻게 구별하나요?</strong></p>

<p>이는 서버에서 페이크처럼 쓸 수 있지!</p>

<p><strong>payload가 같으면 토큰 값도 같아지나요?</strong></p>

<p>근데 아마 iat가 달라서 다를 수 밖에 없을 듯</p>

<hr />

<h2 id="dispatcher-servlet">Dispatcher Servlet</h2>

<h3 id="요청에-따라-수행할-로직-분기">요청에 따라 수행할 로직 분기</h3>

<h3 id="dispatcherservlet-위치">DispatcherServlet 위치</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a3187c31-d891-43dc-af7a-bb4cde6ab4b0/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Handler 앞에 Interceptor가 있음</li>
</ul>

<p>MVC Config 객체도 모두 빈이었다.</p>

	  ]]></description>
	</item>


</channel>
</rss>
