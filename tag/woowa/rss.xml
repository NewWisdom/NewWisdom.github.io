<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>🌱 스프링 부트 Profile로 다른 환경 구성</title>
	  <link>//profile</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//profile</guid>
	  <description><![CDATA[
	     <h2 id="profile">Profile?</h2>

<ul>
  <li>애플리케이션 일부 configuration을 분리하고 싶을 때 사용</li>
  <li>애플리케이션 일부 configuration을 특정 환경에서만 가능하게 하고 싶을 때 사용</li>
  <li>개발 환경에 따라 설정값을 달르게 로딩할 때</li>
</ul>

<h2 id="profile-1">@Profile</h2>

<ul>
  <li><code class="highlighter-rouge">@Component, @Configuration, @ConfigurationProperties</code>을 <code class="highlighter-rouge">@Profile</code>와 함께 선언</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"production"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductionConfiguration</span> <span class="o">{</span>

    <span class="c1">// ...</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>어플리케이션 실행시 <code class="highlighter-rouge">spring.profiles.active</code> 프로퍼티로 프로파일을 지정하면 해당 프로파일이 적용된 빈만 등록됨</li>
</ul>

<p><strong>application-properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev,hsqldb
</code></pre></div></div>

<h4 id="example">Example</h4>

<ol>
  <li>application-properties에 다음과 같이 정의
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=prod
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">@Profile</code> 어노테이션과 함께 <code class="highlighter-rouge">@Configuration</code> 등록</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311111-0f322800-c93f-11eb-9455-436a99434869.png" alt="image" style="zoom:50%;" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121311125-13f6dc00-c93f-11eb-8a93-3923630d84fa.png" alt="image" style="zoom:50%;" /></p>

<ol>
  <li>어플리케이션 실행시 active한 prod에 등록된 hello 빈이 출력됨</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311276-3a1c7c00-c93f-11eb-9698-9abf9172184f.png" alt="image" /></p>

<h3 id="profile과-activeprofiles">@Profile과 @ActiveProfiles</h3>
<ul>
  <li>서로 다른 환경에서 서로 다른 profile을 활성화하여 필요한 빈만 등록하도록 하는 어노테이션</li>
  <li><code class="highlighter-rouge">@Profile</code>은 SpringBootApplication을 실행할 때 사용</li>
  <li><code class="highlighter-rouge">@ActiveProfiles</code>은 테스트 환경에서 사용</li>
</ul>

<h2 id="applicationproperties">application.properties</h2>

<ul>
  <li>application-{profile}.properties 형식으로 파일 생성</li>
  <li>이는 <code class="highlighter-rouge">@ConfigurationProperties</code>로 간주되고 로드됨
    <ul>
      <li>*.properties , *.yml 파일에 있는 property를 자바 클래스에 값을 가져와서(바인딩) 사용할 수 있게 해주는 어노테이션</li>
    </ul>
  </li>
  <li>application-{profile}.properties은 application.properties 보다 우선순위가 높게됨</li>
  <li>빌드할 때 다음과 같은 명령어와 함께 특정 환경설정을 적용할 수 있음
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=production
</code></pre></div>    </div>
  </li>
  <li>properties 파일에 <code class="highlighter-rouge">spring.profiles.include</code>를 통해 추가할 프로파일을 설정할 수 있음</li>
</ul>

<h4 id="example-1">Example</h4>

<p><strong>application-properties</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev
profile-common.name = default_name_mazzi
defaultonly.name = defualt_name
</code></pre></div></div>
<p><strong>application-prod.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = test_name_mazzi
testonly.name = test_name
</code></pre></div></div>
<p><strong>application-dev.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = dev_name_mazzi
devonly.name = dev_name
</code></pre></div></div>
<p><strong>AppRunner</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="n">ApplicationRunner</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"spring.profiles.active : "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">getOptionValues</span><span class="o">(</span><span class="s">"spring.profiles.active"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Enviroment's Active Profile : "</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">()));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"defaultonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"defaultonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"testonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"testonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"devonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"devonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"profile-common.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"profile-common.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>실행 결과</strong></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121315869-b6b15980-c943-11eb-83a9-7e4214b18fe6.png" alt="image" style="zoom:50%;" /></p>

<ul>
  <li>profile-common.name는 모든 프로퍼티 파일이 공통으로 가진 프로퍼티</li>
  <li>dev 프로파일을 활성화</li>
  <li>공통 속성인 <code class="highlighter-rouge">profile-common.name</code>은 우선순위가 높은 dev 프로파일의 것으로 오버라이드 됨</li>
</ul>

<hr />
<h3 id="참고자료">참고자료</h3>
<ul>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">공식문서</a></li>
  <li><a href="https://yangbox.tistory.com/35">스프링부트 프로파일(Springboot Profile)로 다른 환경 구성하기</a></li>
  <li><a href="https://engkimbs.tistory.com/766">스프링 부트 프로파일(Spring Boot Profile)</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📚 jwp-chess 미션 정리</title>
	  <link>//jwp-chess-note</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//jwp-chess-note</guid>
	  <description><![CDATA[
	     <h2 id="controlleradvice">@ControllerAdvice</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9838b28-b9fd-4cd3-9f8f-f19229e5da70/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>전역 예외를 처리하는데 사용</li>
</ul>

<h4 id="정리">정리</h4>

<p><a href="https://github.com/NewWisdom/TIL/issues/1">@ControllerAdvice, @RestControllerAdvice</a></p>

<h2 id="rest-api">REST API</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/b7428bd8-737e-489a-a59d-d3e8a1adcfd2/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3dbc03af-5e1c-4be6-a1e0-7332517831ec/image.png" style="zoom:50%;" /></p>

<ul>
  <li>REST API 설계 방법을 찾아보고 고민하여 반영</li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/2">REST API 디자인</a></li>
</ul>

<h2 id="profile">Profile</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4fdbb04e-3c16-4a59-954f-b0020d245842/image.png" style="zoom:50%;" /></p>

<ul>
  <li>실제 애플리케이션에서 사용하는 DB는 Mysql 그대로 냅두고</li>
  <li>테스트에서는 h2를 사용하여 h2 의 장점을 극대화해서 사용하도록 리팩또</li>
  <li>테스트 DB를 따로 설정하기 위해 열심히 찾아보다가 application-properties를 활용하는 방안 학습</li>
  <li>처음에는 application-{환경}-properties로 각각 파일을 만들어주었음</li>
  <li>아래와 같은 리뷰를 받고 test.resource에 application-properties를 만들어줌</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5dc4b405-47bc-4422-83f8-eedaa3b7732e/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4aa931db-0a73-4ada-9ba2-2bb0e3b3ea3b/image.png" style="zoom:33%;" /></p>

<h4 id="정리-2">정리</h4>

<ul>
  <li>Profile에 대해 추가적으로 학습하고 정리</li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/47">Profile</a></li>
</ul>

<h2 id="테스트에-관하여">테스트에 관하여</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/03a3dc16-07b5-48d0-bf51-fbea7bacc9f6/image.png" style="zoom:50%;" /></p>

<ul>
  <li>지난 레벨 체스 코드 옮겨오면서 테스트 코드는 빼고 옮겨왔었음 🥲</li>
  <li>데이브의 권유대로 각 레이어별 테스트 코드 작성</li>
  <li>처음에는 단순히 <code class="highlighter-rouge">@SpringBootTest</code> (통합테스트)로 진행하려 했음</li>
  <li>찾아보니 각 레이어를 단위 테스트로도 구현할 수 있음을 깨달음</li>
  <li><code class="highlighter-rouge">@WebMvcTest, @jdbcTest</code>을 통해 Controller와 Repository 레이어에 대한 단위 테스트를 구현</li>
</ul>

<h4 id="정리-3">정리</h4>

<ul>
  <li><a href="https://newwisdom.github.io/unit-test-vs">통합 테스트 VS 단위 테스트</a></li>
</ul>

<h2 id="학습하라고-던져주신-키워드">학습하라고 던져주신 키워드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9147f41d-e48f-479d-8573-2f23fcbff416/image.png" style="zoom:50%;" /></p>

<h4 id="정리-4">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/3#issue-862548280">@Responsebody는 어떤 역할을 해줄까?</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/4#issue-862590487">@Componentscan</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/5#issue-862591289">스프링의 DI 방법</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/6">Spring에서 request 처리 과정</a></li>
</ul>

<h2 id="이번-미션에서-이런-키워드들을-학습했음-">이번 미션에서 이런 키워드들을 학습했음 👻</h2>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues?q=is%3Aissue+is%3Aopen+label%3Ajwp-chess">내 깃헙 issue에 등록했지롱</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Auth 강의</title>
	  <link>//lecture-auth</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//lecture-auth</guid>
	  <description><![CDATA[
	     <h2 id="피드백-강의">피드백 강의</h2>

<h3 id="인증-헤더">인증 헤더</h3>

<p>로그인을 통해 토큰을 발급 받은 후 헤더에 Authorization에 토큰을 실어보낸다.<br />
왜 굳이 이 헤더에 토큰을 넣어 보낼까?</p>

<h3 id="http-인증">HTTP 인증</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/567b6a87-15f7-4409-be6a-2a4baf9b3ffb/image.png" style="zoom:50%;" /></p>

<p>HTTP 프로토콜의 정의이기 때문이다.</p>

<ol>
  <li>클라이언트가 “/” 요청을 보낸다.</li>
  <li>서버는 접근을 할 수 있는지 확인하고, 없으면 401을 보낸다.</li>
  <li>여기서는 basic이라는 방식으로 토큰을 검증하고 있다. 잘못되었으니 다시 요청해!</li>
</ol>

<h3 id="http-인증-스킴">HTTP 인증 스킴</h3>

<h4 id="basic">Basic</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e9a8db3-4221-43a8-84fa-c2f81f371ab1/image.png" style="zoom:33%;" /></p>

<ul>
  <li>base64를 이용해 인코딩된 사용자의 id/pw 쌍의 인증 정보를 전달</li>
  <li>안전을 위해 HTTPS(TLS) 연결 위에서 발생되어야 함</li>
</ul>

<h4 id="bearer">Bearer</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d631b9a8-b41d-438e-8038-6299f044616a/image.png" style="zoom:33%;" /></p>

<ul>
  <li>bearer token이라는 보안 토큰을 활용하는 인증 스킴</li>
  <li>Outh2.0에서 사용하기 위해 만들어짐</li>
</ul>

<h2 id="jwt">JWT</h2>

<ul>
  <li>Json Web Token</li>
  <li>웹 표준 (RFC 7519)</li>
  <li>자체적으로 검증되었음을 증명해주는 signature를 포함</li>
  <li>생성시 검증이나 권한 인가 시 필요한 값을 넣어 상태를 따로 관리하지 않아도 됨</li>
</ul>

<h3 id="토큰의-구성">토큰의 구성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1bcb51b5-e245-4389-9b50-a6d91bc27d2d/image.png" style="zoom:50%;" /></p>

<h4 id="1-header">1. Header</h4>

<ul>
  <li>토큰에 대한 해석 방법</li>
  <li>alg : 시그니처에서 사용할 알고리즘 방법</li>
  <li>typ : 토큰의 타입</li>
</ul>

<h4 id="2-payload">2. Payload</h4>

<ul>
  <li>토큰의 내용, 전달할 내용</li>
  <li>payload의 각각의 값을 클레임이라고 함</li>
  <li>sub : 클레임의 제목</li>
  <li>name :</li>
  <li>iat : 생성 시간</li>
  <li>이 역시도 base64로 인코딩</li>
</ul>

<h4 id="3-signature">3. Signature</h4>

<ul>
  <li>헤더와 페이로드가 변조되지 않았음을 검즌</li>
  <li>base64로 인코딩을 하고, 알고리즘과 키값으로 해독</li>
</ul>

<p><strong>basic과 bearer 둘 다 base64로 인코딩 하면 어떻게 구별하나요?</strong></p>

<p>이는 서버에서 페이크처럼 쓸 수 있지!</p>

<p><strong>payload가 같으면 토큰 값도 같아지나요?</strong></p>

<p>근데 아마 iat가 달라서 다를 수 밖에 없을 듯</p>

<hr />

<h2 id="dispatcher-servlet">Dispatcher Servlet</h2>

<h3 id="요청에-따라-수행할-로직-분기">요청에 따라 수행할 로직 분기</h3>

<h3 id="dispatcherservlet-위치">DispatcherServlet 위치</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a3187c31-d891-43dc-af7a-bb4cde6ab4b0/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Handler 앞에 Interceptor가 있음</li>
</ul>

<p>MVC Config 객체도 모두 빈이었다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Kotlin을 정복해봅시다 2</title>
	  <link>//kotlin2</link>
	  <author></author>
	  <pubDate>2021-05-26T19:18:00+09:00</pubDate>
	  <guid>//kotlin2</guid>
	  <description><![CDATA[
	     <h2 id="코틀린-dsl">코틀린 DSL</h2>

<h3 id="dls란">DLS란?</h3>

<ul>
  <li>도메인 특화 언어 (Domain-specific language) ↔️ 범용 프로그래밍 언어</li>
  <li>선언적 언어</li>
  <li>세부 실행은 언어를 해석하는 엔진에 맡김</li>
  <li>컴파일 시점에 제대로 검증하는 것이 어려움</li>
</ul>

<h3 id="코틀린-dsl이란">코틀린 DSL이란?</h3>

<ul>
  <li>범용 언어(= 코틀린)로 작성된 프로그램의 일부</li>
  <li>범용 언어와 동일한 문법 사용</li>
  <li>호출 결과를 객체로 변환하기 위해 노력할 필요 없음</li>
  <li>타입 안정성 보장</li>
</ul>

<h3 id="코틀린은-간결한-구문을-어떻게-지원하는가">코틀린은 간결한 구문을 어떻게 지원하는가?</h3>

<ul>
  <li>확장 함수</li>
  <li>중위 호출</li>
  <li>연산자 오버로딩</li>
  <li>get 메서드에 대한 관례</li>
  <li>람다를 괄호 밖으로 빼는 관례</li>
  <li>수신 객체 지정 람다</li>
</ul>

<h3 id="확장-함수-extension-functions">확장 함수 Extension functions</h3>

<ul>
  <li>코틀린은 클래스를 확장해서 새로운 기능을 개발할 수 있도록 지원</li>
  <li><code class="highlighter-rouge">상속</code> 과는 조금 다른 개념</li>
  <li>ex) 외부 라이브러리를 사용할 때 이 자체 클래스는 변경할 수  없지만 이를 확장해 원하는 새로운 함수를 만들 수 있음</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"Kotlin"</span><span class="p">.</span><span class="n">lastChar</span><span class="p">()</span>

<span class="k">fun</span> <span class="nf">String</span><span class="p">.</span><span class="n">lastChar</span><span class="p">():</span> <span class="n">Char</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">length</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="중위-표기-infix-notation">중위 표기 Infix notation</h3>

<h4 id="중위표기법">중위표기법?</h4>

<p><strong>infix(중위표기법)</strong> : 일상생활에서의 수식 표기법으로 두 개의 피연산자 사이에 연산자가 존재하는 표현방식이다.  ex) X + Y</p>

<p>Kotlin에서 <code class="highlighter-rouge">infix</code> 키워드를 사용하여 중위표기법으로 함수를 호출할 수 있다. 단, 아래 요건을 충족해야 한다.</p>

<ul>
  <li>They must be member functions or extension functions. (멤버 함수 혹은 확장 함수일 때)</li>
  <li>They must have a single parameter. (단일 매개 변수일 때)</li>
  <li>The parameter must not accept a variable number of arguments and must have no default value. (가변인자를 받으면 안되고 기본 값을 가지면 안된다.)</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">1</span> <span class="n">to</span> <span class="s">"one"</span>

<span class="k">infix</span> <span class="k">fun</span> <span class="nf">Any</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">=</span> <span class="n">Pair</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="연산자-오버로딩-operator-overloading">연산자 오버로딩 Operator overloading</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Point</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span> <span class="n">Point</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>

<span class="kd">data class</span> <span class="nc">Point</span><span class="p">(</span><span class="kd">val</span> <span class="py">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">plus</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="n">Point</span><span class="p">):</span> <span class="n">Point</span> <span class="p">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="p">+</span> <span class="n">other</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">+</span> <span class="n">other</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>plus 함수 앞에 <code class="highlighter-rouge">operator</code> 키워드를 붙여 연산자 오버로딩을 하는 함수임을 명시</li>
  <li>확장 함수로 정의할 수도 있음</li>
</ul>

<h4 id="이항-산술-연산-오버로딩">이항 산술 연산 오버로딩</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center">연산 우선순위</th>
      <th style="text-align: center">식</th>
      <th style="text-align: center">함수 이름</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a * b</td>
      <td style="text-align: center">times</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a / b</td>
      <td style="text-align: center">div</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a % b</td>
      <td style="text-align: center">mod(1.1부터 rem)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">a + b</td>
      <td style="text-align: center">plus</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">a - b</td>
      <td style="text-align: center">minus</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>더 많은 연산자에 대한 메서드는 <strong><a href="https://kotlinlang.org/docs/operator-overloading.html#unary-prefix-operators">공식문서</a></strong> 참고</li>
</ul>

<h3 id="get-메서드에-대한-관례-indexed-access-operator">get 메서드에 대한 관례 Indexed access operator</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">"am"</span><span class="p">,</span> <span class="s">"mazzi"</span><span class="p">)</span>
<span class="n">names</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
<span class="n">names</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>get이 아닌 인덱스로 접근한다.</li>
</ul>

<h3 id="람다를-괄호-밖으로-빼내는-관례-passing-a-lambda-to-the-last-parameter">람다를 괄호 밖으로 빼내는 관례 Passing a lambda to the last parameter</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Check failed."</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="수신-객체-지정-람다-lambda-with-receiver">수신 객체 지정 람다 Lambda with receiver</h3>

<ul>
  <li>람다 함수를 쓸 때 내가 자주 쓰고싶은 객체를 미리 지정해서 사용하는 람다</li>
</ul>

<h4 id="수신-객체">수신 객체?</h4>

<ul>
  <li>확장 함수에서의 this는 확장된 클래스의 객체</li>
  <li>즉 확장 함수를 사용하는 그 객체를 의미하는데 이 객체가 바로 수신 객체</li>
</ul>

<h4 id="with">with</h4>

<ul>
  <li>첫 번째 인자로 받은 객체를 두 번째 인자로 받은 람다의 수신 객체로 만듦</li>
</ul>

<p><strong>with를 사용하지 않을 경우</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">result</code> 의 중복이 발생</li>
</ul>

<h4 id="with를-사용한-경우">with를 사용한 경우</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">stringBuilder</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">with</span><span class="p">(</span><span class="n">stringBuilder</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="k">this</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\n amazzi~~~!"</span><span class="p">)</span>
        <span class="k">this</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 불필요한 stringBuilder 변수를 없애면 alpabet 함수가 식의 결과를 바로 반환하게 된다.
// 람다 식의 본문에 있는 마지막 식의 값을 반환
</span><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">StringBuilder</span><span class="p">())</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
        <span class="n">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>with(stringBuilder, { … }) 와 같은 람다 함수</li>
</ul>

<h4 id="apply">apply</h4>

<ul>
  <li>with와 유사</li>
  <li>유일한 차이는 항상 자신에게 전달된 객체를 반환</li>
  <li>객체의 인스턴스를 만들면서 즉시 프로퍼티 중 일부를 초기화해야되는 경우 유용</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
    <span class="p">}.</span><span class="n">toString</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="초기화를-지연하는-방법">초기화를 지연하는 방법</h3>

<ul>
  <li>코틀린에서는 변수 선언을 먼저하고, 초기회는 뒤로 미루는 기능들을 제공</li>
  <li>사용할지 모른는 데이터를 미리 초기화할 필요가 없어 성능 향상에 도움</li>
</ul>

<h4 id="lateinit">lateInit</h4>

<ul>
  <li>필요할 때 초기화하고 사용</li>
  <li>초기화 하지 않고 사용하면 예외 발생</li>
  <li><code class="highlighter-rouge">var</code> 에만 사용 가능</li>
  <li>원시 타입에는 적용할 수 없음</li>
  <li>custom getter/setter 사용 불가
    <ul>
      <li></li>
    </ul>
  </li>
  <li>non-null 프로퍼티만 사용 가능</li>
</ul>

<h4 id="lazy">lazy</h4>

<ul>
  <li>변수를 선언할 때 초기화 코드도 함께 정의</li>
  <li>변수가 사용될 때 초기화 코드도 동작하여 변수가 초기화 됨</li>
</ul>

<hr />

<h2 id="0602-코드리뷰">0602 코드리뷰</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="kd">class</span> <span class="nc">Symbol</span><span class="p">(</span><span class="kd">val</span> <span class="py">symbol</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DIAMOND</span><span class="p">(</span><span class="s">"다이아몬드"</span><span class="p">),</span>
    <span class="n">SPADE</span><span class="p">(</span><span class="s">"스페이드"</span><span class="p">),</span>
    <span class="n">HEART</span><span class="p">(</span><span class="s">"하트"</span><span class="p">),</span>
    <span class="n">CLOVER</span><span class="p">(</span><span class="s">"클로버"</span><span class="p">),</span>
  <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>1.4부터 <code class="highlighter-rouge">,</code> 로 끝나도 컴파일 에러가 안남</li>
</ul>

<h3 id="property와-field">Property와 Field</h3>

<h4 id="field">Field</h4>

<ul>
  <li>단순히 값만 가짐</li>
  <li>값을 가져오거나 변경할 때는 직접 참조</li>
  <li>함수나 블록 내부에 선언된 지역 변수는 모두 필드로 간주</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">count</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 메모리가 할당되고 값이 저장됨
</span><span class="n">println</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="c1">// count 변수값을 직접 참조하여 가져옴
</span><span class="n">count</span> <span class="p">+=</span> <span class="m">200</span> <span class="c1">// count 변수값을 직접 변경
</span></code></pre></div></div>

<h4 id="property">Property</h4>

<ul>
  <li>최상위 변수(함수나 클래스 외부에 정의됨)나 클래스의 멤버 변수로 선언됨</li>
  <li>선언 시 해당 속성의 getter/ setter가 자동으로 생성됨</li>
  <li><code class="highlighter-rouge">val</code> 로 선언시 getter 만 생성됨</li>
  <li>값을 가지지만 속성의 값을 가져오거나 변경할 때는 자동으로 관련 함수가 호출됨
    <ul>
      <li>이를 <strong>접근자</strong> 라고 함</li>
    </ul>
  </li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">count</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 메모리가 할당되고 값이 저장됨
</span><span class="n">println</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="c1">// count 속성의 접근자가 호출되어 속성값을 반환
</span><span class="n">count</span> <span class="p">+=</span> <span class="m">200</span> <span class="c1">// count 속성의 접근자가 호출되어 속성값을 변환
</span></code></pre></div></div>

<p><strong>엥 근데 필드와 동일하게 코드를 작성하는데? 🤔</strong></p>

<ul>
  <li>프로그래머가 보는 관점에서는 같지만, 코틀린 컴파일러는 다르게 동작함</li>
  <li>다음과 같이 count  속성의 접근자를 자동으로 생성</li>
  <li>count 속성의 값을 가져오거나 변경할 때 자동으로 호출 됨</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">couhnt</span> <span class="p">=</span> <span class="m">100</span>
	<span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">field</span>
	<span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">get()</code> 과 <code class="highlighter-rouge">set()</code> 이 접근자</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="n">pro1</span> <span class="p">+=</span> <span class="n">pro2</span>
  <span class="n">println</span><span class="p">(</span><span class="n">pro1</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="py">pro1</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 최상위 수준의 변수이므로 속성임
</span><span class="kd">var</span> <span class="py">pro2</span> <span class="p">=</span> <span class="m">200</span> <span class="c1">// 최상위 수준의 변수이므로 속성임
</span></code></pre></div></div>

<ul>
  <li>pro2의 게터가 호출되어 값을 가져옴</li>
  <li>pro1의 게터에서 반환된 값과 더함</li>
  <li>이 값이 pro1의 세터의 인자로 전달되어 pro1의 값이 변경됨</li>
  <li>pro1 게터에서 반환된 값을 출력</li>
</ul>

<p>프로퍼티에 <code class="highlighter-rouge">=</code> 을 이용해서 할당하는거랑 get을 사용해서</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">shouldDraw</span>  <span class="p">=</span> <span class="n">cards</span><span class="p">.</span><span class="n">score</span><span class="p">()</span>
<span class="kd">val</span> <span class="py">shouldDraw2</span> <span class="p">:</span> <span class="n">Boolean</span>
<span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">cards</span><span class="p">.</span><span class="n">scroe</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>get을 쓰는 것은 매번 돌때마다 계산이 됨</li>
  <li>프로퍼티에 접근은 계산되어 있는 값을 씀</li>
</ul>

<h3 id="backing-fields">Backing fields﻿</h3>

<ul>
  <li>커스텀 getter와 setter를 제공할 경우 사용</li>
  <li>속성이 필드의 값을 필요로 할 때 코틀린은 지원 필드 키워드를 제공</li>
  <li>getter와 setter 범위에서만 사용 가능</li>
  <li><code class="highlighter-rouge">field</code> 지시자를 통해 속성의 게터나 세터에서 사용</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">0</span> <span class="c1">// the initializer assigns the backing field directly
</span>    <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="c1">// counter = value // ERROR StackOverflow: Using actual name 'counter' would make setter recursive
</span>    <span class="p">}</span>
</code></pre></div></div>

<p>아래 예제의 <code class="highlighter-rouge">this</code>는 backing field가 아님</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">isEmpty</span><span class="p">:</span> <span class="n">Boolean</span>
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">size</span> <span class="p">==</span> <span class="m">0</span>
</code></pre></div></div>

<h3 id="backing-properties">Backing properties﻿</h3>

<ul>
  <li>Backing fields﻿의 체계에 맞지 않는 작업을 수행할 경우 이는 Backing properties﻿가 됨</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Skills</span><span class="p">(</span><span class="n">skills</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_skills</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">skills</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">skills</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_skills</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">soft</span><span class="p">(</span><span class="n">soft</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_skills</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">soft</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">hard</span><span class="p">(</span><span class="n">hard</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_skills</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hard</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="as-키워드-사용해도-되나여"><code class="highlighter-rouge">as</code> 키워드 사용해도 되나여?</h3>

<ul>
  <li><code class="highlighter-rouge">val results = resultBoard.values as List&lt;GameResult&gt;</code></li>
  <li>자바의 타입 변환과 같은 것</li>
</ul>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://itandhumanities.tistory.com/28">코틀린 수신 객체 지정 람다 : with와 apply</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Configuration 강의</title>
	  <link>//spring-configuration-lec</link>
	  <author></author>
	  <pubDate>2021-05-25T19:18:00+09:00</pubDate>
	  <guid>//spring-configuration-lec</guid>
	  <description><![CDATA[
	     <h2 id="배경-지식-강의">배경 지식 강의</h2>

<p>스프링 컨테이너와 스프링빈</p>

<h3 id="컨테이너">컨테이너</h3>

<p>스프링 컨테이너에 빈을 등록하기 위해서는 Configuration이 필요하다.</p>

<ul>
  <li>XML</li>
  <li>Annotation 기반의 configuration</li>
  <li>java bean  configuration</li>
</ul>

<h3 id="xml로-configuration-설정하는-예시">XML로 Configuration 설정하는 예시</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userRepository"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserRepository"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userRepository"</span> <span class="na">ref=</span><span class="s">"userRepository"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<ul>
  <li>userRepository와 userService를 빈으로 등록함</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application-config.xml"</span><span class="o">);</span>

<span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">ClassPathXmlApplicationContext</code>로 해당 XML파일을 로드해온다.</li>
  <li><code class="highlighter-rouge">getBeanDefinitionNames()</code> : 등록된 빈이름을 가져온다.</li>
</ul>

<h3 id="java-bean-configuration">java bean configuration</h3>

<h4 id="학습-테스트-코드">학습 테스트 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JavaConfigTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">javaConfig</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

        <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">authService</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>HelloApplication 클래스를 기반으로 빈 등록을 할 것이다.</li>
</ul>

<h4 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="o">{</span>

    <span class="c1">// AuthService 빈을 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthService</span> <span class="nf">authService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthService</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// AuthenticationPrincipalArgumentResolver를 빈 등록하고 authService에 대한 의존성을 주입하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">authenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Configuration</code> : 메타 데이터를 설정할 수 있는 클래스가 된다.</li>
  <li><code class="highlighter-rouge"> @Bean</code> 과 특정 객체를 반환하는 메서드로 해당 객체를 빈으로 등록할 수 있다.</li>
  <li>빈들의 의존성 또한 직접 맺어줄 수 있다.</li>
</ul>

<p><strong>@Configuration 클래스도 빈 등록이 되나요?</strong></p>

<p>🙆‍♀️</p>

<p><strong>@Configuration 클래스의 메서드 순서와 빈 등록 순서는 상관이 없나요?</strong></p>

<p>🙆‍♀️</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">useSpringBean</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// 싱글톤 // new AuthService()이니까</span>
    <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthenticationPrincipalArgumentResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">resolver</span><span class="o">.</span><span class="na">getAuthService</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>resolver에 있는 AuthService 객체와 빈으로 등록된 AuthService가 같은 객체인가?</strong></p>

<p>🙆‍♀️</p>

<hr />

<h2 id="외부-파일의-값을-이용하기">외부 파일의 값을 이용하기</h2>

<h3 id="properties-파일-접근">properties 파일 접근</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PropertySourceConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PropertySourceConfig</span><span class="o">(</span><span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">env</span> <span class="o">=</span> <span class="n">env</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// application.properties의 security-jwt-token-secret-key 값을 활용하여 JwtTokenKeyProvider를 빈으로 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">JwtTokenKeyProvider</span> <span class="nf">jwtTokenKeyProvider</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JwtTokenKeyProvider</span><span class="o">(</span><span class="s">"security-jwt-token-secret-key"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Environment 라는 필드가 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">key</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">PropertySourceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">JwtTokenKeyProvider</span> <span class="n">jwtTokenKeyProvider</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JwtTokenKeyProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jwtTokenKeyProvider</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.ih1aovtQShabQ7l0cINw4k1fagApg3qLWiB8Kt59Lno"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">PropertySourceConfig</code> 클래스로 컨텍스트를 만든다.</li>
  <li>사실 이 properties를 객체로 만들어 접근할 수도 있다.</li>
</ul>

<h3 id="value-주입">@Value 주입</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴포넌트 스캔을 통한 빈 등록</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenExpireProvider</span> <span class="o">{</span>
    <span class="c1">// application.properties의 security-jwt-token-expire-length 값을 활용하여 validityInMilliseconds값 초기화 하기</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtTokenExpireProvider</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${security-jwt-token-expire-length}"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">validityInMilliseconds</span> <span class="o">=</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getValidityInMilliseconds</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="c1">// nextstep.helloworld.core.environment 내에 있는 스프링 빈을 스캔하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"nextstep.helloworld.core.environment"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>환경에 따라 properties 설정이 가능한가요?</strong></p>

<p>🙆‍♀️ 환경에 맞게 deploy하기 - profile</p>

<hr />

<h2 id="스프링-컨테이너-설정-방법-히스토리">스프링 컨테이너 설정 방법 히스토리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/55f6f1f7-1e78-4099-814c-d884510efb89/image.png" style="zoom:67%;" /></p>

<p>컨테이너 설정을 할 때는 메타정보를 통해 이루어진다.</p>

<p>맨 처음에는 <strong>XML기반</strong>으로 진행되었다.<br />
이러면 프로덕션 코드와 의존 관계, 빈 등록 정보를 분리할 수 있었다.</p>

<p>이후 <strong>어노테이션 기반</strong>이 등장하면서 XML과 혼용하여 사용하였다.<br />
등록할 빈들을 어노테이션으로 관리하였다.</p>

<p>Spring 3.0부터는 <strong>Java Bean 기반</strong>으로 이루어졌다.<br />
XML로 관리하던 내용들을 Bean 등록을 통해 관리하였다.</p>

<hr />

<h3 id="auto-configuration">Auto Configuration?</h3>

<ul>
  <li><strong>jar dependency 기반</strong>으로 스프링 애플리케이션을 자동으로 설정해준다.</li>
</ul>

<p>별다른 설정을 하지 않았는데도, DB 등에 관련한 것들을 마음 껏 쓸 수 있었다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/01ebb7bc-6306-49f3-9b00-5f4e9e62682e/image.png" style="zoom:67%;" /></p>

<p>그 이유는 <code class="highlighter-rouge">@SpringBootApplication</code> 에 있는 <code class="highlighter-rouge">@EnableAutoConfiguration</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2b3a167-8bab-45e0-ae77-20ac1ee0521e/image.png" style="zoom:33%;" /></p>

<p>컨텍스트를 로드하면 이정도의 AutoConfiguration들이 등록된다.</p>

<p>ex) jdbcTemplate을 생성해주지 않았는데도 자동으로 주입된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a4b8b58e-311e-4c72-8f15-8f3c3287666d/image.png" style="zoom:50%;" /></p>

<p><strong>빈으로 등록되지 않은 클래스를 사용하면 컴파일 에러가 떠야하는데 나지 않는 이유는?</strong></p>

<p><code class="highlighter-rouge">@ConditionalOnClass</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a24ebfbc-d8dd-4cca-9e92-07163b4e6e85/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DataSource, JdbcTemplate이 로드가 되면 동작한다.</li>
</ul>

<h4 id="h2consoleautoconfiguration">H2ConsoleAutoConfiguration</h4>

<p>h2 DB설정을 해주지 않았는데도 h2와 관련된 설정이 자동으로 된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/95850513-5786-4b7a-b2e0-efc5d5680cf2/image.png" style="zoom:67%;" /></p>

<p>이것도 이미 등록되어있기 때문에 가능하다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Kotlin을 정복해봅시다 1</title>
	  <link>//kotlin1</link>
	  <author></author>
	  <pubDate>2021-05-16T19:18:00+09:00</pubDate>
	  <guid>//kotlin1</guid>
	  <description><![CDATA[
	     <h2 id="코틀린이란">코틀린이란?</h2>

<ul>
  <li>자바 플랫폼에서 돌아가는 새로운 프로그래밍 언어</li>
  <li>간결하고 실용적</li>
  <li>자바 코드와의 상호 운용성을 중시</li>
  <li>코틀린 컴파일러가 생성한 바이트코드는 일반적인 자바 코드와 똑같이 효율적으로 실행</li>
</ul>

<h3 id="정적-타입-지정-언어">정적 타입 지정 언어</h3>

<p>정적 타입 지정이란 모든 프로그램 구성 요소의 타입을 컴파일 시점에 알 수 있다.<br />
프로그램 안에서 객체의 필드나 메서드를 사용할 때마다 컴파일러가 타입을 검증해준다.</p>

<p>코틀린은 타입추론을 지원하여 개발자가 타입 선언해야하는 불편함이 줄어든다.<br />
매개 변수 이름 뒤에 매개 변수의 자료형을 쓴다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">val</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//(.)\n(.*)"</span><span class="o">)</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">FIRST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"//"</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">LAST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"\n"</span>
</code></pre></div></div>

<h3 id="변수-선언">변수 선언</h3>

<ul>
  <li>val : 값이 변경되지 않는 변수</li>
  <li>var : 값이 변경될 수 있는 변수</li>
</ul>

<h4 id="블록이-본문인-함수">블록이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="식이-본문인-함수">식이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
</code></pre></div></div>

<hr />

<h2 id="코틀린-학습-테스트">코틀린 학습 테스트</h2>

<h3 id="named-arguments">named arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Crew</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="s">"아마찌"</span><span class="p">)</span>
</code></pre></div></div>

<p>Crew 객체에 name과 nickname 필드가 있을 때 생성자에 전달하는 인자만을 보고는 어떤 문자열이 어떤 역할인지 헷갈릴 수 있다.<br />
이는 함수의 시그니처를 살펴보지 않고는 알아내기 어려운데,<br />
코틀린으로 작성한 함수를 호출할 때는 가독성을 높이기 위해 전달하는 인자의 이름을 명시해줄 수 있다.  <br />
이때 인자 중 어느 하나라도 이름을 명시하면 그 뒤로 오는 모든 인자는 이름을 명시해야 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">),</span>
<span class="n">Person</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"신지혜"</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">,</span> <span class="n">age</span> <span class="p">=</span> <span class="m">20</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="nullable-types">nullable types</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span>
</code></pre></div></div>

<p>null이 될수 있는 type을 명시적으로 표시할 수 있다. <br />
type에 ?를 붙임으로서 null이 가능한 변수임을 명시적으로 표현한다.</p>

<h3 id="default-arguments">default arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<p>자바는오버로딩을 하여 인자가 다른 같은 메서드를 만든다.</p>

<p>하지만 코틀린은 기본 인자를 지원하기 때문에, 1개의 메소드만 정의하여 메서드 오버로딩 기능을 한다. 
기본 인자를 설정하는 방법은, 다음과 같이 인자 이름 다음에 <code class="highlighter-rouge">인자 = 기본값</code>처럼 정의하면 된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">add</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 메소드는 아래처럼 인자의 개수가 다르게 호출될 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>      <span class="c1">// num2 = 0 은 기본인자로 전달
</span><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="data-classe">data classe</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>수리 피셜 데이터 클래스는 DTO다.</li>
  <li>딱히 비즈니스 로직을 갖고 있지않다.</li>
  <li>생성자부터 getter &amp; setter, 심지어 canonical methods까지 알아서 생성해준다.</li>
</ul>

<h4 id="제한-사항">제한 사항</h4>

<ul>
  <li>기본 생성자에는 최소 하나의 파라미터가 있어야 한다.</li>
  <li>기본 생성자의 파라미터는 val이나 var여야만 한다.</li>
  <li>데이터 클래스는 abstract, open, sealed, inner가 되면 안 된다.</li>
</ul>

<h4 id="-canonical-methods">🤔 Canonical Methods?</h4>

<p>캐노니컬 메소드는 Any에 선언된 메소드 (Any는 자바의 Object처럼 코틀린에서 모든 객체의 조상이 되는 객체)<br />
따라서 코틀린의 모든 인스턴스가 갖고 있는 메소드를 뜻한다.</p>

<p>코틀린의 data class는 모든 Canonical 메서드를 올바르게 구현하고 있다.</p>

<ul>
  <li><strong>equlas(other: Any?): Boolean</strong> - 이 메소드는 참조가 아니라 데이터 클래스 간 값의 일치를 비교한다.</li>
  <li><strong>hashCode(): Int</strong> - 해쉬코드는 인스턴스의 숫자 표현이다. hashCode()가 같은 인스턴스에서 여러 번 호출될 때 항상 동일한 값을 반환해야 한다. equals()로 비교할 때 참을 반환하는 두 인스턴스는 같은 hashCode()를 가져야만 한다.</li>
  <li><strong>toString(): String</strong> - 인스턴스의 문자열 표현이다. 데이터 클래스는 이를 멤버 변수의 값을 나열하도록 자동으로 재정의 한다.</li>
  <li><strong>copy()</strong> : 객체를 복사하여 새 객체 생성</li>
  <li><strong>componentsN()</strong> : 속성을 순서대로 반환</li>
</ul>

<hr />

<h2 id="2단계-문자열-계산기-구현하면서-배운-사실들">2단계 문자열 계산기 구현하면서 배운 사실들</h2>

<h3 id="메서드-정의">메서드 정의</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="err">메서드명(</span><span class="nf">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="err">반환타입</span> <span class="p">{</span>
    <span class="n">retunr</span> <span class="m">2</span> <span class="p">*</span> <span class="n">x</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="unit--nothing">Unit / Nothing</h3>

<p>코틀린은 원시타입과 wrapper type을 구분하지 않는다.</p>

<h4 id="unit">Unit</h4>

<p>함수의 반환 구문이 없다는 것을 표현한다. (자바의 void에 해당).<br />
void와는 다르게 인자로도 사용할 수 있다.</p>

<h4 id="nothing">Nothing</h4>

<p>함수가 정상적으로 끝나지 않는다라는걸 명시적으로 표현한다.</p>

<h4 id="firstornull">firstOrNull</h4>

<p>컬렉션 내 첫 번째 인자를 반환한다. 단순히 리스트 내에서 첫 번째에 위치하는 인자를 반환하는 것뿐 아니라, 특정 조건을 만족하는 첫 번째 인자를 반환하도록 구성하는 것도 가능하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">operator</span> <span class="p">=</span> <span class="n">values</span><span class="p">().</span><span class="n">firstOrNull</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">op</span> <span class="p">==</span> <span class="n">op</span> <span class="p">}</span>
    <span class="o">?:</span> <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">"존재하지 않는 연산자입니다."</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="자동차-경주-피드백">자동차 경주 피드백</h2>

<h3 id="코틀린의-코딩-컨벤션">코틀린의 코딩 컨벤션</h3>

<h4 id="클래스">클래스</h4>

<ul>
  <li>프로퍼티</li>
  <li>초기화 블록</li>
  <li>부 생성자</li>
  <li>함수</li>
  <li>동반 객체</li>
</ul>

<p>순으로 작성한다.</p>

<h4 id="-ktlint-적용하기">➕ ktlint 적용하기</h4>

<p><strong>ktlint</strong>란 코틀린을 위한 정적 분석 도구로, 코틀린으로 작성한 코드의 스타일 검사와, 형식에 맞지 않는 부분을 수정하는 기능을 제공한다.</p>

<p>사용하기 위해서는 다음과 같이 플러그인을 추가해준다.</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
    <span class="n">id</span> <span class="s1">'org.jetbrains.kotlin.jvm'</span> <span class="n">version</span> <span class="s1">'1.3.72'</span>
    <span class="n">id</span> <span class="s1">'org.jmailen.kotlinter'</span> <span class="n">version</span> <span class="s2">"3.2.0"</span> <span class="c1">// 추가</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/709c90c9-2cac-4eb0-8a48-a20ec4156ed6/image.png" style="zoom:33%;" /></p>

<p>플러그인을 추가하면 gradle-Tasks-formating이 생성되는데 lintKotlin을 눌러주면 lint로 코틀린 컨벤션이 틀린 부분을 잡아준다.</p>

<h3 id="주생성자-부-생성자">주생성자, 부 생성자</h3>

<h4 id="주-생성자">주 생성자</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>클래스 이름 뒤에 오는 생성자가 바로 주 생성자이다.<br />
주 생성자는 생성자 파라미터를 지정하고, 이에 의해 초기화되는 프로퍼티를 정의하는데 사용된다.<br />
또한 주 생성자는 객체 초기화를 시작하는 유일한 곳이기 때문에 제공되는 인자들이 완전해야 한다.</p>

<p>주 생성자에는 별도의 코드를 포함시킬 수 없다.<br />
이때 코틀린은 <code class="highlighter-rouge">init</code> 키워드로 초기화 블록을 선언할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">init</span> <span class="p">{</span>
        <span class="n">require</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;=</span> <span class="n">MAX_NAME_LENGTH</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"자동차의 이름은 5글자를 초과할 수 없습니다."</span>
        <span class="p">}</span>
    <span class="c1">// ...
</span></code></pre></div></div>

<h4 id="부-생성자">부 생성자</h4>

<p>파라미터 목록이 다른 여러 생성자를 만들 경우 부 생성자를 둘 수 있다.<br />
부 생성자에서는 <code class="highlighter-rouge">this</code> 키워드를 사용해 주 생성자를 호출하도록 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 경우보다는 <strong><code class="highlighter-rouge">default</code>키워드를 사용하여 매개변수의 기본값을 사용</strong>하자.</p>

<p><strong>주 생성자 호출 시점</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constructor</span><span class="p">(</span><span class="n">carNUm</span> <span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">ArryaList</span><span class="p">())</span> <span class="p">{</span>
	<span class="n">createList</span><span class="p">(</span><span class="n">carName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 부 생성자에서 주 생성자를 호출할 때 <code class="highlighter-rouge">createList()</code>가 실행되는 순서는 다음과 같다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">Cars</span><span class="p">(</span><span class="n">int</span> <span class="n">carNUm</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">(</span><span class="n">new</span> <span class="n">ArrayList</span><span class="p">())</span>
  <span class="k">this</span><span class="p">.</span><span class="n">createList</span><span class="p">(</span><span class="n">carNum</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="require-check---조건-확인-함수">require(), check() - 조건 확인 함수</h3>

<ul>
  <li>
    <p><strong>require()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalArgumentException</code> 발생</p>
  </li>
  <li>
    <p><strong>check()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalStateException</code> 발생</p>

    <p>위 예제처럼 <code class="highlighter-rouge">{}</code> 블록에 예외 메시지를 작성할 수도 있다.</p>
  </li>
</ul>

<h3 id="setter만-private으로---가시성-변경자">setter만 private으로 - 가시성 변경자</h3>

<p>자바를 생각하면 필드를 <code class="highlighter-rouge">private</code> 로 만들고,  getter를 통해 값을 꺼내도록 하였지만,<br />
코틀린에서는 필드를 private으로 두기보다는 setter 함수만 private으로 지정한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
        <span class="k">private</span> <span class="k">set</span>
<span class="p">}</span>
</code></pre></div></div>

<p>자바는 필드 기반  언어인데 코틀린은 프로퍼티 기반 언어이다.<br />
팁을 준다면 코틀린에서 프로퍼티에 무언가 연산이 들어간다면 함수를 만들고,<br />
값 자체만 반환한다면 위와 같이 쓰자.</p>

<h3 id="상수">상수</h3>

<p>기본 자료형의 상수는 <code class="highlighter-rouge">const val</code> 키워드로 표현한다.<br />
기본 자료형 외에는 <code class="highlighter-rouge">const</code> 키워드를 사용할 수 없다.</p>

<p>상수는 클래스 외부에다가도 선언할 수 있다.<br />
하지만 이 경우 확장자가 파일로 변경되니 사람 취향껏 하면 된다.</p>

<h4 id="companion-object---동반-객체">companion object - 동반 객체</h4>

<p>코틀린에서는 <code class="highlighter-rouge">static</code> 키워드가 없는데, 이 대신 사용할 수 있는 것이 companion object 이다.<br />
이는 객체이며, <code class="highlighter-rouge">companion object</code> 내에 선언된 속성과 함수는 <code class="highlighter-rouge">{클래스 이름}.{필드/함수 이름}</code> 형태로 바로 호출할 수 있다.  <br />
클래스의 맨 하단에 작성한다.</p>

<h4 id="jvmstatic">@JvmStatic</h4>

<p><code class="highlighter-rouge">ompanion object</code>를 사용하여 구성한 코드를 자바에서 사용하려면 속성 및 함수가 자바의 필드/메서드로 해석되도록 알려주어야 한다.</p>

<p><code class="highlighter-rouge">const</code> 선언이 되어 있는 프로퍼티는 별도의 처리 없이 자바에서도 사용 가능하며, 
함수는 <code class="highlighter-rouge">@JvmStatic</code> 어노테이션을 사용하여 자바에서 정적 메서드로 사용할 수 있게 한다.</p>

<h4 id="jvmfield">@JvmField</h4>

<p><code class="highlighter-rouge">const</code> 키워드는 기본 자료형에만 사용이 가능하다.<br />
이외의 타입 객체를 자바에서 정적 필드처럼 사용하려면 <code class="highlighter-rouge">@JvmField</code> 어노테이션을 사용해야 한다.</p>

<h3 id="utility-클래스">Utility 클래스</h3>

<p>자바에서는 모든 메서드를 클래스 내부에 작성해야했지만, 코틀린에서는 그럴 필요가 없다.<br />
필요한 유틸리티 메서드만 모아놓은 파일만을 만들고 이를 파일 최상위에 위치시키면 된다.</p>

<h3 id="스마트-캐스트">스마트 캐스트</h3>

<p>코틀린에서는 컴파일러가 대신 캐스팅을 해준다.<br />
원하는 타입을 검사하고 나면, 개발자가 변수를 원하는 타입으로 캐스팅하지 않아도 해당 변수가 원하는 타입으로 선언된 것처럼 사용할 수 있다.<br />
이는 컴파일러가 캐스팅을 수행해주어 가능한 일이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">isNullOrBlank</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kd">val</span> <span class="py">tokens</span> <span class="p">=</span> <span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
    <span class="c1">// ...
</span><span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="코드-리뷰-중-짤막한-배움">코드 리뷰 중 짤막한 배움</h2>

<h4 id="maxby">maxBy{}</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">findMaxPosition</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">maxBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">position</span> <span class="p">}</span><span class="o">!!</span><span class="p">.</span><span class="n">position</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>가장 큰 원소를 찾기 위해 비교에 사용할 값을 인자로 받는다. <br />
모든 컬렉션에 대해 maxBy 함수를 호출할 수 있다.</p>

<p><code class="highlighter-rouge">{ it.position }</code> 는 비교에 사용할 값을 돌려주는 함수이다.<br />
<code class="highlighter-rouge">maxBy{}</code> 의 반환 값은 nullable인데, 반환된 값의 프로퍼티를 사용하고 싶은 경우 <code class="highlighter-rouge">!!</code> 키워드를 통해 null이 아님을 선언하여 꺼낸다.</p>

<p><strong>참고</strong></p>

<p><code class="highlighter-rouge">?:</code>(엘비스 오퍼레이터 ) : null인 경우 설정한 default 값을 넣는다.</p>

<h4 id="pair">Pair</h4>

<p>Kotlin에서 제공하는 객체 타입 중 연관 타입끼리 관계가 없어도 2개를 쌍으로 가지고 있는 객체</p>

<p><strong>getter</strong>는 <strong>.first  .second</strong> 또는 <strong>.component1() / .component2()</strong>로 접근할 수 있다.</p>

<p><strong>RacingCar 일부</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">race</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">:</span> <span class="n">MoveStrategy</span><span class="p">):</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">carsGroup</span> <span class="p">=</span> <span class="n">arrayListOf</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;()</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">tryNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">cars</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">.</span><span class="n">moveAll</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span>
        <span class="n">carsGroup</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">carsGroup</span><span class="p">,</span> <span class="n">findWinners</span><span class="p">())</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">fun</span> <span class="nf">findWinners</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">maxPosition</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">findMaxPosition</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">findCarsBySamePosition</span><span class="p">(</span><span class="n">maxPosition</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="과-">==과 ===</h4>

<ul>
  <li>
    <p><code class="highlighter-rouge">==</code> 연산자는 자바의 equal와 같다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">===</code> 연산자는 자바의 <code class="highlighter-rouge">==</code>와 같다.</p>
  </li>
</ul>

<h4 id="list-mutablelist">List, MutableList</h4>

<p>코틀린에서는 읽기 전용 리스트(List)와 수정할 수 있는 리스트(MutableList)가 있다.<br />
<code class="highlighter-rouge">arrayListOf()</code> 를 쓰기보다는 코틀린이 제공하는 List 또는 MutableList를 사용하자</p>

<p><strong>List</strong></p>

<p>데이터를 읽기만 가능하고 리스트를 선언할 때 넣은 데이터들을 수정, 삭제, 변경할 수 없다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">cars</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">),</span> <span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span>

<span class="n">println</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span>
<span class="n">cars</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span> <span class="c1">// X 컴파일에러
</span><span class="n">cars</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>   <span class="c1">// X 컴파일에러
</span></code></pre></div></div>

<p><strong>MutableList</strong></p>

<p>기존 자바에서 사용하던 ArrayList와 유사하므로 ArrayList의 함수들을 모두 사용할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c1">// O
</span><span class="n">println</span><span class="p">(</span><span class="n">carsMutable</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span></code></pre></div></div>

<p>List와 MutalbeList 서로의 타입으로 변경도 가능하다. 이 때 서로 새로운 리스트를 반환한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> 
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> 

<span class="kd">var</span> <span class="py">arrNotMutable</span> <span class="p">=</span> <span class="n">carsMutable</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span> <span class="c1">//mutable -&gt; list 변경
</span>
<span class="kd">var</span> <span class="py">arrReMutable</span> <span class="p">=</span> <span class="n">arrNotMutable</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span> <span class="c1">// list -&gt; mutable 변경
</span><span class="n">arrReMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span>
<span class="n">println</span><span class="p">(</span><span class="n">arrReMutable</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="assertthrows">assertThrows</h4>

<p>자바처럼 <code class="highlighter-rouge">assertThatThrownBy</code> 를 쓰지 말고 아래와 같이 쓰자.<br />
이유는 <code class="highlighter-rouge">assertThatThrownBy</code> 를 사용할 경우 <code class="highlighter-rouge">isInstanceOf()</code> 를 사용하는데 여기에는 <code class="highlighter-rouge">.java.class</code> 를 붙여주어야 해 코틀린 스럽지 못하기 때문이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">IllegalArgumentException</span><span class="p">&gt;</span> <span class="p">{</span><span class="n">Car</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="n">input</span><span class="p">)}</span>
</code></pre></div></div>

<h4 id="object">object</h4>

<p>클래스를 만듦과 동시에 인스턴스로 만든다. (싱글턴)</p>

<h4 id="람다-작성">람다 작성</h4>

<p>코틀린은 람다식을 작성할 때 <code class="highlighter-rouge">{}</code>로 표현한다. <br />
람다의 인자가 하나라면 람다식 내부에서 <code class="highlighter-rouge">it</code>으로 받을 수 있다.<br />
함수의 인자로 람다가 넘어올 때, 맨 마지막 순번이라면 <code class="highlighter-rouge">()</code> 밖에 쓸 수 있다.<br />
만약 람다 하나만 받는 거라면 <code class="highlighter-rouge">()</code>를 생략할 수 있겠죠?</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">newCars</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<h4 id="associate"><code class="highlighter-rouge">associate{}</code></h4>

<p>map을 기본적으로 반환한다.</p>

<h4 id="input을-재귀적으로">Input을 재귀적으로</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tailrec</span> <span class="k">fun</span> <span class="nf">inputCarNames</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="n">println</span><span class="p">(</span><span class="s">"경주할 자동차 이름을 입력하세요(이름은 쉼표(,)를 기준으로 구분)."</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">readLine</span><span class="p">()</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span><span class="o">?.</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="o">?:</span> <span class="n">inputCarNames</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">tailrec</span> <span class="k">fun</span> <span class="nf">inputTryNumber</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="n">println</span><span class="p">(</span><span class="s">"시도할 횟수는 몇 회인가요?"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">readLine</span><span class="p">()</span><span class="o">?.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="n">inputTryNumber</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="highlighter-rouge">tailrec</code></strong> : 꼬리재귀(tail recursive)라는 의미로, 추가적인 연산이 없이 자신 스스로 재귀적으로 호출하다가 어떤 값을 리턴하는 함수
    <ul>
      <li>해당 키워드를 붙이면 재귀적인 함수 호출의 최적화가(?) 일어남</li>
    </ul>
  </li>
</ul>

<h4 id="중위-함수-to-키워드">중위 함수 (to 키워드)</h4>

<ul>
  <li><strong>중위 표현법</strong> : 변수와 변수사이에 함수를 넣어 연산자 처럼 사용하는 것</li>
</ul>

<p><strong>조건</strong></p>

<ul>
  <li>멤버 메서드 또는 확장 함수여야 함</li>
  <li>하나의 매개변수를 가져야함</li>
  <li><strong>infix</strong> 키워드를 사용하여 정의</li>
</ul>

<p><strong>ex) Pair 객체를 생성할 때 to</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/7377057b-c283-4102-8e00-d704ae58d308/image.png" style="zoom:33%;" /></p>

<h4 id="by-키워드">by 키워드</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/da1ab914-04bb-4128-ae3d-3393fa9ec579/image.png" style="zoom:33%;" /></p>

<p>위 코드에서 Car의 일급 컬렉션인 Cars를 순회할 때 현재는 <code class="highlighter-rouge">List&lt;Car&gt;</code>에 접근하여 순회하고 있다.<br />
하지만 코틀린에서는 다음과 같이 변경할 수 있다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4ed5d81e-1003-4aaa-aead-6cfe5f7cc4df/image.png" style="zoom:33%;" /></p>

<p>위와 같이 cars 일급 컬렉션을 바로 순회할 수 있는 이유는 Cars가 다음과 같이 <code class="highlighter-rouge">List&lt;Car&gt;</code> 인터페이스를 구현하고 있기 때문이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4ebb7070-a1b5-4d4b-a5b7-0d2c56524246/image.png" style="zoom:33%;" /></p>

<p>뭐야 완전 신기해….  <br />
제이슨이 일단 지금은 “와 뭐야” 이정도까지만 알아두어도 된다고 하였다.<br />
코틀린 짱</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 4. MVC 프레임워크 만들기</title>
	  <link>//spring-mvc-4</link>
	  <author></author>
	  <pubDate>2021-05-04T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-4</guid>
	  <description><![CDATA[
	     <h2 id="mvc-프레임워크-만들기">MVC 프레임워크 만들기</h2>

<h2 id="프론트-컨트롤러-패턴">프론트 컨트롤러 패턴</h2>

<p>프론트 컨트롤러도 서블릿이다.<br />
요청을 모두 받고 요청에 맞는 컨트롤러를 호출한다.</p>

<h3 id="특징">특징</h3>

<p>프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받고, 요청에 맞는 컨트롤러를 찾아서 호출한다.<br />
입구를 하나로 묶는다.<br />
프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.</p>

<h3 id="스프링-웹-mvc와-프론트-컨트롤러">스프링 웹 MVC와 프론트 컨트롤러</h3>

<p>스프링 웹 MVC의 핵심도 바로 FrontController이다. (DispatcherServlet이 프론트 컨트롤러 패턴으로 되어있다.)</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2493682-0c37-4a1c-93c4-f2ffd02e7862/image.png" style="zoom: 67%;" /></p>

<p>ControllerV1을 인터페이스로 만들고 이를 구현한 Controller들을 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV1</span> <span class="kd">implements</span> <span class="n">ControllerV1</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="frontcontrollerservletv1">FrontControllerServletV1</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV1"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v1/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV1</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV1</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV1</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Controller 정보를 가진 서블릿인 FrontContoller를 구현한다.</p>

<ul>
  <li><strong>urlPatterns</strong> :  “/front-controller/v1/”를 포함한 하위 모든 요청을 하나의 서블릿에서 받아들인다.</li>
  <li><strong>controllerMap</strong> : key-매핑 URL, value-호출될 컨트롤러</li>
  <li><strong>service()</strong> : reqeustURI를 조회하여 실제 호출할 컨트롤러를 찾고 해당 컨트롤러를 실행(<code class="highlighter-rouge">process()</code>)한다.</li>
</ul>

<p>여러 Controller와 서블릿이 하나의 JSP를 재사용하고 있다.</p>

<hr />

<h2 id="view-분리">View 분리</h2>

<p>Controller에서 View로 이동하는 부분이 중복된다.<br />
Controller는 MyView만 반환해주면 된다.</p>

<h4 id="controllerv2">ControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV2</span> <span class="o">{</span>
    <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스를 구현하므로 반환 타입을 맞출 수 있다.</li>
</ul>

<h4 id="myview">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewPath</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewPath</span> <span class="o">=</span> <span class="n">viewPath</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="memberformcontrollerv2">MemberFormControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV2</span> <span class="kd">implements</span> <span class="n">ControllerV2</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>viewPath를 가지고 있는 MyView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv2">FrontControllerServletV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV2"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV2</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV2</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV2</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="model-추가">Model 추가</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9a6ede47-f242-4b1f-a88e-08f055df0508/image.png" style="zoom:67%;" /></p>

<h3 id="서블릿-종속성-추가">서블릿 종속성 추가</h3>

<p>컨트롤러 입장에서 <code class="highlighter-rouge">HttpServletRequest</code>, <code class="highlighter-rouge">HttpServletResponse</code>가 필요하지 않다.<br />
요청 파라미터를 Map으로 넘기면 컨트롤러가 서블릿이 아니어도 동작할 수 있다.</p>

<h3 id="뷰-이름-중복-제거">뷰 이름 중복 제거</h3>

<p>현재 컨트롤러에서 지정하는 뷰 이름에는 중복(<code class="highlighter-rouge">/WEB-INF/views/</code>)이 존재한다.<br />
컨트롤러는 뷰의 논리 이름을 반환하고, 물리 이름은 프론트 컨트롤러에서 처리하도록 변경해보자.<br />
논리적 물리적 이름을 구분하면 나중에 변경할 때 컨트롤러를 변경할 일이 없다.</p>

<h3 id="modelview">ModelView</h3>

<p>Model을 전달하기 위해서 <code class="highlighter-rouge">request.setAttribute()</code> 를 사용하여 데이터를 저장하고 뷰에 전달했다.<br />
서블릿의 종속성을 제거하기 위해, Model을 따로 만들고 View 이름까지 전달하는 객체를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">ModelView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewName</span> <span class="o">=</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controllerv3">ControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV3</span> <span class="o">{</span>
    <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>ModelView를 반환하도록 한다.</li>
</ul>

<h4 id="membersavecontrollerv3">MemberSaveControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV3</span> <span class="kd">implements</span> <span class="n">ControllerV3</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="s">"save-result"</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>논리 이름을 ModelView 객체에 넣어 생성하도록 한다.</li>
  <li>모델에 뷰에 필요한 객체를 담고 ModelView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv3-일부">FrontControllerServletV3 일부</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">createParamMap()</code> : HttpServletRequest의 파라미터 정보를 Map으로 변경한다.</li>
  <li><code class="highlighter-rouge">viewResolver()</code> : 컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.</li>
  <li><code class="highlighter-rouge">view.render(mv.getModel(), req, resp)</code> : 뷰 객체를 통해  HTML 화면을 렌더링한다.</li>
</ul>

<h4 id="myview-1">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">modelToRequestAttribute</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
    <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
    <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="단순하고-실용적인-컨트롤러">단순하고 실용적인 컨트롤러</h2>

<p>컨트롤러 인터페이스를 구현하면서 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 번거롭다.<br />
컨트롤러는 View의 이름만 변경하도록, 실용성 있도록 변경한다.</p>

<h4 id="controllerv4">ControllerV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV4</span> <span class="o">{</span>
    <span class="cm">/**
     *
     * @param paramMap
     * @param model
     * @return viewName
     */</span>

    <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>view 이름을 반환하도록 변경한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV4</span> <span class="kd">implements</span> <span class="n">ControllerV4</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"save-result"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Controller에서는 필요한 값을 꺼내고, 비즈니스 로직을 호출한 후 viewName만을 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv4">FrontControllerServletV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV4"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV4</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV4</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV4</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
      	<span class="c1">// model </span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>프론트 컨트롤러에서 model을 만들고 각 Controller에 paramMap과 model을 넘겨 처리를 하고, viewName을 반환받는다.</li>
  <li>modelView에서 model을 꺼낼 필요가 없다.</li>
</ul>

<p>하지만, 지금 ControllerV4 인터페이스로 받을 수 있는 컨트롤러를 제한하고 있다.</p>

<hr />

<h2 id="유연한-controller---어댑터-패턴">유연한 Controller - 어댑터 패턴</h2>

<p>지금까지의 프론트 컨트롤러는 한가지 인터페이스만 사용이 가능했었다. <br />
어떠한 컨트롤러도 호환이 가능하도록 어댑터 패턴을 사용한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0f169df9-469c-4e38-b61c-2cf42f872444/image.png" alt="" /></p>

<ul>
  <li>핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었다. 이 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.</li>
  <li>기존에는 프론트 컨트롤러가 바로 컨트롤러를 호출하였지만, 이제는 어댑터를 통해서 호출한다.</li>
  <li>핸들러 : 컨트롤러의 좀 더 넓은 범위. 어댑터가 있기 때문에 컨트롤러 개념 뿐만 아니라 해당하는 어댑터만 있으면 처리가 가능하다.</li>
</ul>

<h4 id="myhandleradapter">MyHandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">);</span>
    <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">supports(Object handler)</code> : 어댑터가 해당 컨트롤러를 처리할 수 있는지 반환</li>
  <li><code class="highlighter-rouge">handle(...)</code> : 어댑터는 실제 컨트롤러를 호출하고 결과로 ModelView를 반환한다.</li>
  <li>만약 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 직접 생성한다.</li>
  <li>프론트 컨트롤러가 아닌 어댑터가 실제 컨트롤러를 호출한다.</li>
</ul>

<h4 id="controllerv3handleradapter">ControllerV3HandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV3HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV3</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>supports()로 ControllerV3 타입인지 확인하고 맞다면 호출한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV5"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v5/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV5</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">handlerMappingMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MyHandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV5</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">initHandlerMappingMap</span><span class="o">();</span>
        <span class="n">initHandlerAdapters</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerMappingMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV3</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerAdapters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ControllerV3HandlerAdapter</span><span class="o">());</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// 요청 정보로 핸들러를 가져온다.</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 어댑터를 찾는다.</span>
        <span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyHandlerAdapter</span> <span class="nf">getHandlerAdapter</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">:</span> <span class="n">handlerAdapters</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">adapter</span><span class="o">.</span><span class="na">supports</span><span class="o">(</span><span class="n">handler</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">adapter</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"handler adapter를 찾을 수 없습니다. handler "</span> <span class="o">+</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 : 핸들러 매핑과 어댑터를 초기화한다.</li>
  <li>매핑 정보인 handlerMappingMap 이 Object Map으로 아무 타입이나 받을 수 있다.</li>
  <li>핸들러 매핑</li>
  <li>핸들러를 처리할 수 있는 어댑터 조회</li>
  <li>어댑터 호출</li>
</ul>

<h4 id="controllerv4handleradapter-예제">ControllerV4HandlerAdapter 예제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV4HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV4</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
      
        <span class="c1">//  viewName만 반환할 경우 ModelView 객체로 만들어주는 역할도 한다.</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>어댑터가 호출하는 ControllerV4는 viewName만 반환하는데, 이때 어댑터에서 이를 ModelView 객체로 만들어 반환한다.</li>
</ul>

<p>프론트 컨트롤러 입장에서는 핸들러 어댑터에만 의존하고 있다.</p>

<p>이 MVC 프레임 워크는 역할과 구현이 분리되어 있다.  <br />
모든 것을 인터페이스로 만들고 구현하고 싶은 부분만 주입하면 완벽! (스프링 MVC는 뷰와 뷰리졸버 다 인터페이스로 구현되어있다.)
어떤 핸들러를 추가하고 싶어도 우리는 핸들러어댑터만 구현해주면 된다!</p>

<h4 id="ex-requestmapping">ex) @RequestMapping()</h4>

<p>RequestMappingHandlerAdapter : 위 어노테이션이 붙은 핸들러를 처리해주는 어댑터</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-5</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-5</guid>
	  <description><![CDATA[
	     <h2 id="스프링-mvc-전체-구조">스프링 MVC 전체 구조</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/6b0d1860-915b-4819-9d2f-9521353e2142/image.png" style="zoom:80%;" /></p>

<h4 id="지금껏-만들었던-프레임-워크---스프링-mvc">지금껏 만들었던 프레임 워크 &lt;-&gt; 스프링 MVC</h4>

<ul>
  <li>FrontController - DispatcherServlet</li>
  <li>HandlerMappingMap - HandlerMapping</li>
  <li>MyHandlerAdapter - HandlerAdapter</li>
  <li>ModelView - ModelAndView</li>
  <li>ViewResolver - ViewResolver</li>
  <li>MyView - View</li>
</ul>

<h3 id="dispatcherservlet">DispatcherServlet</h3>

<p>DispacherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/630a4870-d2a9-4dec-a4c3-ccfe49db023a/image.png" style="zoom:67%;" /></p>

<p>스프링 부트는 DispatcherServlet를 자동으로 등록하면서 모든 경로에 대해서 매핑한다.</p>

<h4 id="요청의-흐름">요청의 흐름</h4>

<p>DispatcherServlet이 호출되면 <code class="highlighter-rouge">service()</code> 가 호출된다.<br />
최종적으로는 DispatcherServlet.doDispatch()` 가 호출된다.</p>

<h4 id="dodispatch">doDispatch()</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/cbfe84c7-a2f8-4bf1-a082-42c141b2e287/image.png" style="zoom:67%;" /></p>

<p>DispatcherServlet의 doDispatch()의 주요 부분들을 살펴보자!</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e644c4e-cd85-405a-a1ea-f063768df8a1/image.png" alt="" /></p>

<ul>
  <li>ModelAndView</li>
  <li>getHandler() : 핸들러를 가져온다.
    <ul>
      <li>핸들러가 없으면 404로 셋팅을 한다.</li>
    </ul>
  </li>
  <li>getHandlerAdapter() : 핸들러 어댑터를 가져온다.</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/536712af-32f3-41fc-af6f-5d885365747d/image.png" style="zoom:67%;" /></p>

<ul>
  <li>핸들러 어댑터로 핸들러 호출하고 ModelAndView 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/eef62fa6-513d-4ed3-b7a3-18ad10ae0074/image.png" style="zoom:67%;" /></p>

<ul>
  <li>view 렌더링 호출</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5a04d84a-5b0c-456c-baa1-ddf4401c2f36/image.png" alt="" /></p>

<ul>
  <li>ViewResolver를 통해서 view를 찾아 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/56d8ddca-3457-4b3a-a7b8-c462504d98d8/image.png" alt="" /></p>

<ul>
  <li>View 렌더링</li>
</ul>

<h3 id="스프링-mvc-구조">스프링 MVC 구조</h3>

<ol>
  <li>핸들러 조회 : 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러 조회</li>
  <li>핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터 조회</li>
  <li>핸들러 어댑터 실행 : 핸들러 어댑터 실행</li>
  <li>핸들러 실행 : 핸들러 어댑터가 실제 핸들러 실행</li>
  <li>ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환</li>
  <li>viewResolver 호출 : JSP의 경우 <code class="highlighter-rouge">InternalResourceViewResolver</code> 가 자동으로 등록되고 사용됨</li>
  <li>view 반환 : 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고 렌더링 역할을 담당하는 뷰 객체 반환
    <ul>
      <li>JSP의 경우 InternalResourceViewResolver(JstlView) 를 반환하고 내부에 forward() 로직이 있다.</li>
    </ul>
  </li>
  <li>뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.</li>
</ol>

<p>가장 큰 장점은 DispatcherServlet  코드의 변경 없이 원하는 기능을 변경하거나 확장할 수 있다.<br />
대부분 확장 가능하도록 인터페이스로 제공한다.</p>

<p>하지만 사실 우리가 확장할 컨트롤러는 거의 없다.</p>

<hr />

<h2 id="핸들러-매핑과-핸들러-어댑터">핸들러 매핑과 핸들러 어댑터</h2>

<h3 id="과거-controller-인터페이스">과거 Controller 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Controller</span> <span class="o">{</span>
    <span class="n">ModelAndView</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Component</code> :  ““/springmvc/old-controller: 라는 이름의 스프링 빈으로 등록</li>
  <li>빈의 이름으로<strong>URL</strong>을 매핑</li>
</ul>

<h4 id="위-컨트롤러가-호출되는-방식">위 컨트롤러가 호출되는 방식</h4>

<ul>
  <li><strong>HandlerMapping</strong>(핸들러 매핑)
    <ul>
      <li>핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 함
 ex) <strong>스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑</strong> 필요</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>(핸들러 어댑터)
    <ul>
      <li>핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요
 ex) Controller 인터페이스를 실행할 수 있는 핸들러 어댑터를 찾고 실행해야 함</li>
    </ul>
  </li>
  <li>스프링은 이미 필요한 핸들러 매핑과 핸들러 어댑터를 대부분 구현해두었다.</li>
</ul>

<h4 id="스프링-부트가-자동으로-등록하는-핸들러-매핑과-핸들러-어댑터">스프링 부트가 자동으로 등록하는 핸들러 매핑과 핸들러 어댑터</h4>

<ul>
  <li><strong>HandlerMapping</strong>
    <ul>
      <li>RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 핸들러를 찾는다. 
(위 예제의 @Component)</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>
    <ul>
      <li>RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>HttpRequestHandlerAdapter : HttpRequestHandler 처리</li>
      <li>SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용) 처리</li>
    </ul>
  </li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로핸들러를찾아주는 BeanNameUrlHandlerMapping가 실행에 성공하고 핸들러인 OldController 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다. SimpleControllerHandlerAdapter 가 Controller 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 SimpleControllerHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>SimpleControllerHandlerAdapter 는 핸들러인 OldController 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<h3 id="httprequesthandler"><strong>HttpRequestHandler</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HttpRequestHandler</span> <span class="o">{</span>
         <span class="kt">void</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><strong>서블릿과 가장 유사한 형태</strong>의 핸들러</li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회-1"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로 핸들러를찾아주는 BeanNameUrlHandlerMapping 가 실행에 성공하고 핸들러인 MyHttpRequestHandler 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회-1"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다.
HttpRequestHandlerAdapter 가 HttpRequestHandler 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행-1"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 HttpRequestHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>HttpRequestHandlerAdapter 는 핸들러인 MyHttpRequestHandler 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<hr />

<h2 id="뷰-리졸버">뷰 리졸버</h2>

<h4 id="application-properties">application-properties</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
</code></pre></div></div>

<p>스프링 부트는 <code class="highlighter-rouge">InternalResourceViewResolver</code> 라는 뷰 리졸버를 자동으로 등록한다.<br />
이때 <code class="highlighter-rouge">application.properties</code> 에 등록한 <code class="highlighter-rouge">spring.mvc.view.prefix</code> , <code class="highlighter-rouge">spring.mvc.view.suffix</code> 설정 정보를 사용해서 등록한다.</p>

<h4 id="스프링-부트가-자동으로-등록하는-뷰-리졸버">스프링 부트가 자동으로 등록하는 뷰 리졸버</h4>

<ul>
  <li>BeanNameViewResolver : 빈 이름으로 뷰를 찾아서 반환</li>
  <li>InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환</li>
</ul>

<p><strong>1.</strong> <strong>핸들러 어댑터 호출</strong><br />
핸들러 어댑터를 통해 논리 뷰 이름을 획득</p>

<p><strong>2. ViewResolver 호출</strong></p>

<p>new-form 이라는 뷰 이름으로 viewResolver를 순서대로 호출
InternalResourceViewResolver 가 호출됨</p>

<h5 id="3-internalresourceviewresolver"><strong>3. InternalResourceViewResolver</strong></h5>

<p>내부에서 자원을 찾을 수 있음을 의미한다.<br />
이 뷰 리졸버는 InternalResourceView 를 반환</p>

<h5 id="4-뷰---internalresourceview">4. <strong>뷰</strong> <strong>- InternalResourceView</strong></h5>

<p>InternalResourceView 는 JSP처럼 포워드 forward() 를 호출해서 처리할 수 있는 경우에 사용</p>

<h5 id="5-viewrender">5. view.render()</h5>

<p>view.render() 가 호출되고 InternalResourceView 는 forward() 를 사용해서 JSP를 실행한다</p>

<p>Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver 를 등록해야 한다. <br />
최근에는 라이브러리만 추가하면 스프링 부트가 이런 작업도 모두 자동화해준다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-3</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-3</guid>
	  <description><![CDATA[
	     <h2 id="서블릿-jsp-mvc-패턴">서블릿, JSP, MVC 패턴</h2>

<p>서블릿으로 만들어보고, JSP로 만들어보고 마지막으로 MVC로 만들어 볼 것이다!</p>

<h3 id="서블릿으로-만들었을-때-일부-예제">서블릿으로 만들었을 때 일부 예제</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"memberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">PrintWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;meta charset=\"UTF-8\"&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;title&gt;Title&lt;/title&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;a href=\"/index.html\"&gt;메인&lt;/a&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;id&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;username&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;age&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tbody&gt;"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Member</span> <span class="n">member</span> <span class="o">:</span> <span class="n">members</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tr&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tr&gt;"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tbody&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>복잡하지만… 동적으로 원하는 HTML을 만들 수 있다.</li>
  <li>각 요청마다 Servlet을 만들어야 한다.</li>
  <li>응답할 HTML을 자바 코드 내에 작성해야한다.</li>
</ul>

<hr />

<h2 id="jsp">JSP</h2>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<h5 id="import문-작성">import문 작성</h5>

<pre><code class="language-jsp">&lt;%@ page import="hello.servlet.domain.member.MemberRepository" %&gt;
&lt;%@ page import="hello.servlet.domain.member.Member" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<pre><code class="language-jsp">&lt;%
    // request, response 사용 가능
    MemberRepository memberRepository = MemberRepository.getInstance();
    System.out.println("save.jsp");
    String username = request.getParameter("username");
    int age = Integer.parseInt(request.getParameter("age"));
    Member member = new Member(username, age);
    System.out.println("member = " + member);
    memberRepository.save(member);

%&gt;
</code></pre>

<p><code class="highlighter-rouge">&lt;% %&gt;</code> 안에 자바코드를 작성할 수 있다.</p>

<ul>
  <li>비즈니스 로직과 뷰가 연결되어 있다.</li>
  <li>요구사항이 변경되면 뷰를 수정하다가 비즈니스 로직도 같이 수정될 수 있다.</li>
  <li>유지보수성이 떨어진다.</li>
</ul>

<hr />

<h2 id="mvc">MVC</h2>

<h3 id="servlet-jsp의-문제점">Servlet, JSP의 문제점</h3>

<h4 id="너무-많은-역할">너무 많은 역할</h4>

<p>하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하고, 또한 유지보수가 어려워진다.</p>

<h4 id="변경의-라이프-사이클">변경의 라이프 사이클</h4>

<p>비즈니스 로직과 뷰의 변경의 라이프 사이클이 다르다.<br />
예를 들어서 UI 를 일부 수정하는 일과 비즈니스 로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분 서로에게 영향을 주지 않는다. <br />
이렇게 변경의 라이프 사이클이 다른 부분을 하나의 코드로 관리하는 것은 유지보수하기 좋지 않다.<br />
레이어를 분리하는 기준은 변경 주기가 다를 때라고 생각하면 편하다.</p>

<h4 id="기능-특화">기능 특화</h4>

<p>뷰 템플릿은 화면을 렌더링 하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.</p>

<h3 id="model-view-controller">Model View Controller</h3>

<p>MVC 패턴은 서블릿이나, JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다.<br />
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.</p>

<h4 id="controller">Controller</h4>

<p>HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.<br />
중앙에서 조종하는 역할. (비즈니스 로직을 담을 수 있지만, 역할이 너무 많아지기 때문에 비즈니스 로직을 호출한다고 하자.)</p>

<h4 id="model">Model</h4>

<p>뷰에 출력할 데이터를 담아둔다.<br />
뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.</p>

<h4 id="view">View</h4>

<p>모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.</p>

<h3 id="mvc-적용하기">MVC 적용하기</h3>

<ul>
  <li>서블릿을 컨트롤러로 사용</li>
  <li>JSP를 뷰로 사용</li>
  <li>HttpServletRequest 객체를 모델로 사용 (<code class="highlighter-rouge">request.setAttribute()</code> , <code class="highlighter-rouge">request.getAttribute() </code>사용)</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1fa7cead-0d71-4afc-a391-a7b7932c9541/image.png" style="zoom:67%;" /></p>

<h4 id="mvcmemberformservlet">MvcMemberFormServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberFormServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/new-form"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberFormServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">dispatcher.forward()</code> : 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.<br />
클라이언트에게 갔다가 오는게 아닌(리다이렉트가 아닌), 서버 내부에서 호출한 것이다.</li>
  <li><code class="highlighter-rouge">/WEB-INF</code> :  이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없어 컨트롤러를 통해서만 접근이 가능하도록 한다.</li>
</ul>

<h4 id="redirect-vs-forward">redirect vs forward</h4>

<ul>
  <li>redirect : 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다.<br />
클라이언트가 인지할 수 있고, URL 경로도 실제로 변경된다.</li>
  <li>forward : 서버 내부에서 일어나는 호출이기 때문에 클라이언트가 인지하지 못한다.</li>
</ul>

<h4 id="mvcmembersaveservlet">MvcMemberSaveServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberSaveServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/save"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberSaveServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="c1">// 비즈니스 로직</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// Model에 데이터를 보관한다. - req 객체에 Map이 있는데 여기에 저장한다.</span>
        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/save-result.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="save-resultjsp">save-result.jsp</h4>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt; 성공
&lt;ul&gt;
    &lt;li&gt;id=${member.id}&lt;/li&gt;
    &lt;li&gt;username=${member.username}&lt;/li&gt;
    &lt;li&gt;age=${member.age}&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="/index.html"&gt;메인&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">${}</code> : jsp가 제공하는 프로퍼티 접근법으로, req에 담겨있는 attribute에 있는 데이터를 가져올 수 있다.</li>
</ul>

<h4 id="mvcmemberlistservlet">MvcMemberListServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/members.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membersjsp-일부">members.jsp 일부</h4>

<pre><code class="language-jsp">&lt;c:forEach var="item" items="${members}"&gt;
    &lt;tr&gt;
        &lt;td&gt;${item.id}&lt;/td&gt;
        &lt;td&gt;${item.username}&lt;/td&gt;
        &lt;td&gt;${item.age}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">&lt;c:forEach&gt;</code> : <code class="highlighter-rouge">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code> 를 선언해야한다.</li>
</ul>

<h3 id="mvc-패턴의-한계">MVC 패턴의 한계</h3>

<h3 id="forward의-중복">forward의 중복</h3>

<p>메서드를 추출해도 되지만, 메서드 호출마저 중복으로 일어난다.</p>

<h4 id="viewpath에-중복">ViewPath에 중복</h4>

<p>prefix인 <code class="highlighter-rouge">/WEB-INF/views/</code> 와 suffix인 <code class="highlighter-rouge">.jsp</code> 가 중복으로 발생한다.<br />
만약 jsp가 아닌 thymeleaf 같은 다른 뷰로 변경한다면 전체 코드를 다 변경해야 한다.</p>

<h4 id="사용하지-않는-코드">사용하지 않는 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span>
</code></pre></div></div>

<p>위 객체는 사용할 수도 있고, 안할수도 있다.</p>

<h4 id="공통-처리가-어렵다">공통 처리가 어렵다.</h4>

<p>컨트롤러에서 공통으로 처리해야 하는 부분이 점점 증가하는 경우를 생각해보자.<br />
단순히 공통 기능을 메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 된다. <br />
또한 호출하는 것 자체도 중복이다.</p>

<h4 id="프론트-컨트롤러front-controller-패턴을-도입하면-이런-문제를-깔끔하게-해결할-수-있다">프론트 컨트롤러(Front Controller) <strong>패턴</strong>을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.</h4>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 2. 서블릿</title>
	  <link>//spring-mvc-2</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-2</guid>
	  <description><![CDATA[
	     <h2 id="예제">예제</h2>

<p>스프링을 사용하지는 않지만 스프링 부트 프로젝트를 만든다. <br />
서블릿은 톰캣 같은 WAS를 직접 설치하고, 그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린 다음 톰캣 서버를 실행해야 했는데,<br />
스프링 부트는 톰캣 서버를 내장하고 있으니, 이로 진행한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9e7d412-01b4-4131-9aed-28fbf9acbe6e/image.png" alt="" /></p>

<p>보통은 Jar를 선택하지만, JSP를 돌리기 위해 War를 선택한다.</p>

<h4 id="helloservlet">HelloServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 서블릿이 호출되면 이 service가 호출된다.</span>
<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"helloServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"HelloServlet"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Request : "</span> <span class="o">+</span> <span class="n">req</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Response : "</span> <span class="o">+</span> <span class="n">resp</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello"</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HelloServlet
Request : org.apache.catalina.connector.RequestFacade@de1a8e6
Response : org.apache.catalina.connector.ResponseFacade@2b3735f6
amazzi
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@WebServlet</code> : 서블릿 어노테이션</li>
  <li><code class="highlighter-rouge">@ServletComponentScan</code> : 스프링이 자동으로 서블릿을 찾아 등록해준다.</li>
  <li>HTTP 요청이 오면 서블릿 컨테이너인 WAS가 HTTP 요청, 응답 객체를 서블릿에 던져준다.</li>
  <li><code class="highlighter-rouge">req.getParameter()</code> :  요청에서 해당 Parameter를 가져온다.</li>
  <li><code class="highlighter-rouge">resp.setCharacterEncoding("utf-8");</code> : 헤더에 CharacterEncoding을 지정한다.</li>
  <li><code class="highlighter-rouge">resp.getWriter().write();</code> : <code class="highlighter-rouge">write()</code> 에 바디에 담을 데이터를 넣어준다.</li>
</ul>

<h4 id="-requestfacade">🤔 RequestFacade?</h4>

<p>HttpServletRequest는 인터페이스이다.<br />
여러가지 WAS 서버들이 이 인터페이스의 구현체를 구현하고 있어 다양한 WAS를 사용할 수 있는 것이다.</p>

<h4 id="http-요청-메시지-로그로-확인하기">HTTP 요청 메시지 로그로 확인하기</h4>

<p>application-properties에 다음을 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logging.level.org.apache.coyote.http11=debug
</code></pre></div></div>

<h4 id="웹-애플리케이션-서버의-요청-응답-구조">웹 애플리케이션 서버의 요청 응답 구조</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d33b3a2-3565-4487-b17d-c7af286c3c30/image.png" style="zoom:80%;" /></p>

<hr />

<h2 id="httpservletrequest">HttpServletRequest</h2>

<p>서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. <br />
그리고 결과를 HttpServletRequest 객체에 담아서 제공한다.</p>

<ul>
  <li>START LINE
    <ul>
      <li>HTTP 메소드</li>
      <li>URL</li>
      <li>쿼리 스트링</li>
      <li>스키마, 프로토콜</li>
    </ul>
  </li>
  <li>HEADER
    <ul>
      <li>헤더 조회</li>
    </ul>
  </li>
  <li>BODY
    <ul>
      <li>form 파라미터의 형식 조회</li>
      <li>message body 데이터 직접 조회</li>
    </ul>
  </li>
  <li>부가 기능
    <ul>
      <li>임시 저장소 기능
        <ul>
          <li>해당 HTTP 요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능</li>
          <li>저장: request.setAttribute(name, value)</li>
          <li>조회: request.getAttribute(name)</li>
        </ul>
      </li>
      <li>세션 관리 기능
        <ul>
          <li>request.getSession(create: true)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="기본-사용">기본 사용</h4>

<h4 id="start-line">Start Line</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="o">=</span> <span class="n">GET</span>
<span class="n">request</span><span class="o">.</span><span class="na">getProtocal</span><span class="o">()</span> <span class="o">=</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">request</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()</span> <span class="o">=</span> <span class="n">http</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">()</span> <span class="o">=</span> <span class="nl">http:</span><span class="c1">//localhost:8080/request-header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">()</span> <span class="o">=</span> <span class="o">/</span><span class="n">request</span><span class="o">-</span><span class="n">header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">()</span> <span class="o">=</span> <span class="n">username</span><span class="o">=</span><span class="n">hello</span>
<span class="n">request</span><span class="o">.</span><span class="na">isSecure</span><span class="o">()</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre></div></div>

<h4 id="헤더-정보">헤더 정보</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getHeaderNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
        <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">headerName</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">headerName</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span>
                <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">headerName</span><span class="o">)));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Headers - end ---"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</code></pre></div></div>

<p>이 외에도 Header 정보를 추출하는 메서드들이 있다.</p>

<ul>
  <li>request.getServerName()</li>
  <li>request.getServerPort()</li>
  <li>request.getLocale()</li>
  <li>request.getCookies()</li>
  <li>request.getContentType()</li>
  <li>request.getCharacterEncoding()</li>
</ul>

<hr />

<h2 id="http-요청-데이터---get-쿼리-파라미터">HTTP 요청 데이터 - GET 쿼리 파라미터</h2>

<p>메시지 바디 없이, URL의 <strong>쿼리 파라미터</strong>를 사용해서 데이터를 전달하는 방법. <br />
예) 검색, 필터, 페이징등에서 많이 사용</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/request-param?username=hello&amp;age=20
</code></pre></div></div>

<p>쿼리파라미터는URL에다음과같이 ?를시작으로보낼수있다.추가파라미터는 &amp;로구분하면된다.</p>

<h4 id="requestparamservlet">RequestParamServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 파라미터 전송 기능
 * http://localhost:8080/request-param?username=hello&amp;age=20
 */</span>

<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestParamServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-param"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. 전체 파라미터 조회"</span><span class="o">);</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">()</span>
                <span class="o">.</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">paramName</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. 단일 파라미터 조회 (더 많이 쓰는 방식)"</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. 파라미터 이름이 같은 여러개 값이 있을 경우"</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">usernames</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터---post-html-form">HTTP 요청 데이터 - POST HTML Form</h2>

<p>메시지 바디에 데이터가 들어가기 때문에 content-type이 있다. <br />
<code class="highlighter-rouge">content-type : application/x-www-form-urlencoded </code><br />
바디에 쿼리 파리미터 형식으로 데이터를 전달한다. <code class="highlighter-rouge">username=hello&amp;age=20</code></p>

<h4 id="hello-formhtml-일부">hello-form.html 일부</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/request-param"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    username: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span><span class="nt">/&gt;</span> age: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"age"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>전송<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>이전에 만들었던 <strong>requestParamServlet</strong>에 요청을 보내면,</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3d6eaa71-b5b2-4166-9aa3-6b3aaf8bf97a/image.png" style="zoom: 50%;" /></p>

<p>다음과 같은 결과를 얻는다! <br />
그런데 <strong>requestParamServlet</strong>는 쿼리 파라미터만 조회하는데 ?</p>

<p>application/x-www-form-urlencoded 형식은 쿼리 파라미터 형식과 같다.<br />
따라서 <strong>쿼리 파라미터 조회 메서드를 그대로 사용</strong>하면 된다.
서버 입장에서는 둘의 형식이 동일하므로, request.getParameter() 로 편리하게 구분없이 조회할 수 있다.</p>

<p>request.getParameter() 는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다.</p>

<h4 id="-postman으로-테스트할-경우">💡 POSTMAN으로 테스트할 경우</h4>

<p>Form 데이터를 입력하기 귀찮은데, 이때 <strong>Content-type</strong>을 <code class="highlighter-rouge">application/x-www-form-urlencoded</code> 로 설정한다.</p>

<hr />

<h2 id="http-요청-데이터---api-메시지-바디">HTTP 요청 데이터 - API 메시지 바디</h2>

<p><strong>HTTP message body</strong>에 데이터를 직접 담아서 요청한다. <br />
HTTP API에서 주로 JSON을 사용한다.</p>

<h3 id="단순-텍스트">단순 텍스트</h3>

<h4 id="requestbodystringservlet---raw한-string">RequestBodyStringServlet - Raw한 String</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyStringServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-string"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyStringServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>HTML form도 이렇게 조회할 수 있지만 번거로우니 쿼리 파라미터 조회를 사용하자!</p>

<h3 id="json">JSON</h3>

<ul>
  <li>content-type: <strong>application/json</strong></li>
</ul>

<h4 id="hellodata">HelloData</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloData</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="requestbodyjsonservlet">RequestBodyJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>

        <span class="n">HelloData</span> <span class="n">helloData</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">messageBody</span><span class="o">,</span> <span class="n">HelloData</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JSON 결과를 파싱해서 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다. <br />
스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리( ObjectMapper)를 제공한다.</p>

<hr />

<h2 id="httpservletresponse---기본-사용법">HTTPServletResponse - 기본 사용법</h2>

<p>개발자가 직접 응답 객체를 만들기는 번거롭지 않게 서블릿이 제공해준다!</p>

<ul>
  <li>HTTP 응답코드 지정</li>
  <li>헤더 생성</li>
  <li>바디 생성 등등…</li>
</ul>

<h4 id="responseheaderservlet">ResponseHeaderServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHeaderServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-header"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseHeaderServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//[status-line] 상태코드 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">);</span> <span class="c1">//200</span>
        <span class="c1">//[response-headers] 응답 헤더 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"text/plain;charset=utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"no-cache, no-store, must-revalidate"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Pragma"</span><span class="o">,</span> <span class="s">"no-cache"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"my-header"</span><span class="o">,</span> <span class="s">"hello"</span><span class="o">);</span>
        <span class="c1">//[Header 편의 메서드] content(response); cookie(response); redirect(response);</span>
        <span class="c1">//[message body] 응답 바디 지정</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ok"</span><span class="o">);</span>

        <span class="c1">//Content-Type: text/plain;charset=utf-8</span>
        <span class="c1">//Content-Length: 2</span>
        <span class="c1">//response.setHeader("Content-Type", "text/plain;charset=utf-8");</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/plain"</span><span class="o">);</span> 
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span> 
        <span class="c1">//response.setContentLength(2); //(생략시 자동 생성)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="쿠키-설정하기">쿠키 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Set-Cookie: myCookie=good; Max-Age=600; </span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Set-Cookie"</span><span class="o">,</span> <span class="s">"myCookie=good; Max-Age=600"</span><span class="o">);</span> 

<span class="c1">// 또는 </span>
<span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">"myCookie"</span><span class="o">,</span> <span class="s">"good"</span><span class="o">);</span> 
<span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span> <span class="c1">//600초</span>
<span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="redirect-설정하기">Redirect 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Status Code 302</span>
<span class="c1">//Location: /basic/hello-form.html</span>
<span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FOUND</span><span class="o">);</span> <span class="c1">//302</span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Location"</span><span class="o">,</span> <span class="s">"/basic/hello-form.html"</span><span class="o">);</span>

<span class="c1">// 또는</span>
<span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/basic/hello-form.html"</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터">HTTP 요청 데이터</h2>

<h3 id="단순-텍스트-html">단순 텍스트, HTML</h3>

<h4 id="httpservletresponse">HttpServletResponse</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHtmlServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-html"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletResponse</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// Content-Type: text:html; charset=utf-8</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text:html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" &lt;div&gt;이건 아니지&lt;/div&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>간단하지만, HTML을 일일히 작성해주어야 한다?</p>

<h3 id="api-json">API JSON</h3>

<h4 id="responsejsonservlet">ResponseJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//Content-Type: application/json</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"content-type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">HelloData</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HelloData</span><span class="o">();</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">"mazzi"</span><span class="o">);</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        
        <span class="c1">// JSON으로 변환</span>
        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>(사실 스프링 쓰면 이렇게 길어지지도 않는다.)</p>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>


	  ]]></description>
	</item>


</channel>
</rss>
