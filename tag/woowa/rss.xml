<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📚 atdd-subway-fare 미션 정리</title>
	  <link>//atdd-subway-fare-note</link>
	  <author></author>
	  <pubDate>2021-06-16T10:01:01+09:00</pubDate>
	  <guid>//atdd-subway-fare-note</guid>
	  <description><![CDATA[
	     <h2 id="요금-정책">요금 정책</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/cd715abe-edce-405a-811a-2b9cff62398b/image.png" style="zoom:33%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/9b90163c-02c0-4f7a-8801-0c1d74a5e47e/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>로그인 사용자와 비로그인 사용자를 구별하여 요금 정책을 적용</li>
  <li>PathController에서는 토큰이 없어도 예외가 아니었고</li>
  <li>MemberController에서는 토큰이 없으면 예외였기에 Resolver에서는 각각에 맞는 처리를 해주어야 했음</li>
  <li>맨 처음 페어랑 기능만 돌아가게 구현했을 때는 기존에 있는 로그인된 사용자에 대한 인가 과정을 거치는 Resolver를 재사용하도록 구현</li>
  <li>이러기 위해서는 이 각각에 맞는 처리를 일간 Controller로 옮겨야 했음</li>
</ul>

<h4 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
    <span class="n">LoginMember</span> <span class="n">member</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membercontroller에서-loginmember에-대한-처리">MemberController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">unAuthorizedThrowException</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 없으면 (존재하지 않는 사용자이면) 예외</li>
</ul>

<h4 id="pathcontroller에서-loginmember에-대한-처리">PathController에서 LoginMember에 대한 처리</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">LoginMember</span> <span class="nf">unLoginMemberWrapper</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">LoginMember</span> <span class="n">loginMember</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">loginMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">loginMember</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>id가 존재하지 않으면 age를 <code class="highlighter-rouge">-1</code> 로 wrap</li>
</ul>

<h5 id="그런데-이렇게-구현하고-생각한-문제점이">그런데 이렇게 구현하고 생각한 문제점이…</h5>

<ul>
  <li>Controller에서 이미 리졸빙된 LoginMember에 대한 처리를 또 건드리고 있다는 느낌</li>
  <li>Controller에서 LoginMember에 대한 비즈니스 로직을 알고 있는 느낌이라 개선이 필요하다고 느낌</li>
  <li>age를 -1로 감싸서 이 경우 비로그인자로 가정하는 로직이 괜찮은지 의문을 품고 있었음</li>
</ul>

<h4 id="페어의-리뷰어에게-온-피드백">페어의 리뷰어에게 온 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/8c7d30b2-c0f7-45af-b31f-dfd6a6ef247d/image.png" style="zoom:50%;" /></p>

<ul>
  <li>일단 <code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code> 와 <code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 두개로 분리하였음</li>
  <li><code class="highlighter-rouge">AgeAuthenticationPrincipalArgumentResolver</code> 에서는 요금 정책에 필요한 값인 <code class="highlighter-rouge">age</code> 만 반환하도록 리팩토링</li>
</ul>

<h4 id="ageauthenticationprincipalargumentresolver">AgeAuthenticationPrincipalArgumentResolver</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AgeAuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AgeAuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AgeAuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">credentials</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
        <span class="n">LoginMember</span> <span class="n">memberByToken</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">credentials</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberByToken</span><span class="o">.</span><span class="na">getAge</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">Integer</code> 형인 age를 반환하도록….
    <ul>
      <li>반환타입을 명시적으로 적어줄걸 그랬네</li>
    </ul>
  </li>
</ul>

<h4 id="pathservice의-findpath">PathService의 findPath()</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="n">Long</span> <span class="n">source</span><span class="o">,</span> <span class="n">Long</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineService</span><span class="o">.</span><span class="na">findLines</span><span class="o">();</span>
        <span class="n">Station</span> <span class="n">sourceStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
        <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">stationService</span><span class="o">.</span><span class="na">findStationById</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">SubwayPath</span> <span class="n">subwayPath</span> <span class="o">=</span> <span class="n">pathFinder</span><span class="o">.</span><span class="na">findPath</span><span class="o">(</span><span class="n">lines</span><span class="o">,</span> <span class="n">sourceStation</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">calculateDistance</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">lineFare</span> <span class="o">=</span> <span class="n">subwayPath</span><span class="o">.</span><span class="na">getMaxLineFare</span><span class="o">();</span>
        <span class="n">SubwayPathFare</span> <span class="n">subwayPathFare</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayPathFare</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">distance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">PathResponseAssembler</span><span class="o">.</span><span class="na">assemble</span><span class="o">(</span><span class="n">subwayPath</span><span class="o">,</span> <span class="n">subwayPathFare</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidPathException</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="subwaypathfare">SubwayPathFare</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayPathFare</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayPathFare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">wrapAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">lineFare</span> <span class="o">=</span> <span class="n">lineFare</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">wrapAge</span><span class="o">(</span><span class="n">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFare</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">fareByDistance</span> <span class="o">=</span> <span class="n">FareCalculatorByDistance</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">distance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">FareAdjusterByAge</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">age</span><span class="o">,</span> <span class="n">fareByDistance</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요금 정책을 해당 도메인에서 Enum인 <code class="highlighter-rouge">FareCalculatorByDistance</code> 와 <code class="highlighter-rouge">FareAdjusterByAge</code> 를 통해 계산하고 있었음</li>
  <li><code class="highlighter-rouge">wrapAge()</code> 를 통해 null 값으로 age가 들어오면 <code class="highlighter-rouge">FareAdjusterByAge.of()</code>에서 스트림을 돌리는데, 이에 예외가 발생하지 않도록 -1로 포장</li>
</ul>

<h5 id="참고---fareadjusterbyageof">참고 - FareAdjusterByAge.of()</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">of</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fare</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">values</span><span class="o">())</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">ageRange</span> <span class="o">-&gt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">&lt;=</span> <span class="n">age</span> <span class="o">&amp;&amp;</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="n">ageRange</span><span class="o">.</span><span class="na">maxExclusive</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">calculator</span> <span class="o">-&gt;</span> <span class="n">calculator</span><span class="o">.</span><span class="na">adjuster</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">))</span>
            <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
            <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="farecalculatorbydistance---거리별-요금-정책">FareCalculatorByDistance - 거리별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareCalculatorByDistance</span> <span class="o">{</span>
    <span class="n">BASE</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">distance</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span><span class="o">),</span>
    <span class="n">FIRST_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">5</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">),</span>
    <span class="n">SECOND_ADDITIONAL</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span>
            <span class="o">(</span><span class="n">distance</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Constants</span><span class="o">.</span><span class="na">BASE_FARE</span> <span class="o">+</span> <span class="mi">800</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">((</span><span class="n">distance</span> <span class="o">-</span> <span class="n">Constants</span><span class="o">.</span><span class="na">FIRST_ADDITIONAL_MAX_BOUNDARY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">8</span><span class="o">))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">Constants</span><span class="o">.</span><span class="na">EXTRA_FARE</span><span class="o">);</span>


    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">;</span>

    <span class="n">FareCalculatorByDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">minExclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxInclusive</span><span class="o">,</span> <span class="n">UnaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">calculator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minExclusive</span> <span class="o">=</span> <span class="n">minExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxInclusive</span> <span class="o">=</span> <span class="n">maxInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">calculator</span> <span class="o">=</span> <span class="n">calculator</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="fareadjusterbyage---나이별-요금-정책">FareAdjusterByAge - 나이별 요금 정책</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="n">FareAdjusterByAge</span> <span class="o">{</span>
    <span class="n">PRE_SCHOOLED</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="mi">0</span><span class="o">)),</span>
    <span class="n">SCHOOL_AGED</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">PRE_SCHOOL_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_RATE</span><span class="o">)),</span>
    <span class="n">ADOLESCENT</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">SCHOOL_AGED_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_MAX_BOUNDARY</span><span class="o">,</span> <span class="n">getIntegerBinaryOperator</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">ADOLESCENT_RATE</span><span class="o">));</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">minInclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">;</span>

    <span class="n">FareAdjusterByAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">minInclusive</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxExclusive</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">adjuster</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">minInclusive</span> <span class="o">=</span> <span class="n">minInclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxExclusive</span> <span class="o">=</span> <span class="n">maxExclusive</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">adjuster</span> <span class="o">=</span> <span class="n">adjuster</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getIntegerBinaryOperator</span><span class="o">(</span><span class="kt">double</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">fare</span><span class="o">,</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(((</span><span class="n">fare</span> <span class="o">+</span> <span class="n">lineFare</span><span class="o">)</span> <span class="o">-</span> <span class="mi">350</span><span class="o">)</span> <span class="o">*</span> <span class="n">rate</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<h4 id="리뷰어에게-받은-피드백">리뷰어에게 받은 피드백</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a9f5ac3d-548f-4f90-ad43-e3af67abc64a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>리뷰어의 의도는 Member를 나타내는 도메인에서 age를 nullable하게 두고 이를 처리하는 것이 더 명확할 것 같다하심</li>
</ul>

<h3 id="아쉬운-점">아쉬운 점</h3>

<h4 id="나이별-요금정책을-적용할-때-member-도메인을-사용해볼걸">나이별 요금정책을 적용할 때 Member 도메인을 사용해볼걸!</h4>

<p>현재 경로 조회를 할 때는 member 도메인이 넘어오지 않고 age 값만 넘어오도록 구현했었다.<br />
그런데 Age는 Member에 종속되는 필드인데 이를 빼서 독립적으로 처리하고 있는게 지금보니 마음에 들지 않는다.<br />
만약 Member의 다른 필드들도 요금정책에 영행을 주게 된다면 유지보수가 어려운 코드가 된다.<br />
크루들이랑 이야기를 해보니 한 리졸버에서 Member를 반환해주는데, 이 반환 도메인을 한 인터페이스(예를 들면 Member)를 만들고 이를 구현한 <code class="highlighter-rouge">Guest</code>, <code class="highlighter-rouge">LoginMember</code> 로 로그인, 비로그인 사용자를 구별하여 로직을 수행하는 방법도 있다고 한다.</p>

<p>이러면 리졸버를 나눌 필요도 없고 Member가 age를 가지고 나이에 관한 요금 정책을 수행할 때 해당 도메인에게 물어서 처리할 수 있을 것 같다.</p>

<h4 id="enum에-predicate를-가직-할걸">Enum에 Predicate를 가직 할걸!</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/a53fbb31-926c-4123-813c-72f4d7fda9ca/image.png" style="zoom: 50%;" /></p>

<p>또한 각각 요금 정책을 Enum으로 구현하였는데, 여기서 상수를 쓰니 가독성이 매우 떨어지는 느낌이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d4bfdf8-ddba-44dc-83be-af5f15860ae8/image.png" style="zoom:33%;" /></p>

<p>상수를 쓴 이유는 위의 피드백으로 매직 넘버에 의미를 부여하고 싶었으나… <br />
이렇게 하니 오히려 가독성을 헤치는 느낌이었고 마지막 리뷰대로 Enum 안에 범위를 판단하는 <code class="highlighter-rouge">Predicate</code> 를 가지도록 할걸 그랬다.</p>

<h2 id="프론트엔드와의-협업">프론트엔드와의 협업</h2>

<ul>
  <li>백엔드 4, 프론트엔드 2명 정도씩 팀을 이루어 협업하는 미션이었음</li>
  <li><a href="https://www.notion.so/4b3b784386a246babcdef0bda179babb">해당 문서</a> 에 있는 프론트엔드 요구사항을 뼈대코드에 반영해 나감</li>
</ul>

<h2 id="api-문서화">API 문서화</h2>

<ul>
  <li>Spring Rest Docs를 통해 API 문서화 작업을 진행</li>
  <li>기존에 있는 RestAssured 테스트를 이용해 API를 만들수도 있는데, 페어랑 같이 시도하다가 계속 오류나서….</li>
  <li>결국 MockMvc로 테스트 코드 다시짜서 API 문서를 만들었음</li>
  <li>다른 크루가 RestAssured로 문서를 만들었던데 그거 보고 시도해봐야지…</li>
  <li>또 리뷰어가 제시한 방향으로 API 문서 만드는 테스트 코드를 조금 수정했더니 더 좋은 문서를 만들 수 있었음</li>
</ul>

<h4 id="controllertest">ControllerTest</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@AutoConfigureRestDocs</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationRequestPreprocessor</span> <span class="nf">getDocumentRequest</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessRequest</span><span class="o">(</span>
                <span class="n">modifyUris</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="s">"https"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">host</span><span class="o">(</span><span class="s">"newwisdom-subway.p-e.kr"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">removePort</span><span class="o">(),</span>
                <span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kd">static</span> <span class="n">OperationResponsePreprocessor</span> <span class="nf">getDocumentResponse</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessResponse</span><span class="o">(</span><span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>API 문서 만드는데 필요한 MockMvc 테스트들은 위 클래스를 상속받고 있음</li>
  <li>리뷰어의 제안을 통해 <code class="highlighter-rouge">getDocumentRequest()</code>와 <code class="highlighter-rouge">getDocumentResponse()</code> 을 추가</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/d4396804-6e9e-4046-a749-99c2cbe085db/image.png" style="zoom: 50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/edaba672-3c4a-481f-984e-e08fa2ba6f20/image.png" style="zoom:50%;" /></p>

<h2 id="테스트-코드의-가독성">테스트 코드의 가독성</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/ab0ebe3f-3560-4b80-a470-781c1731354f/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/24757641-e6c6-4a74-b84a-7a014edfc99c/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이번 리뷰어가 테스트 코드에서 가독성을 지키지 못한 부분들을 많이 피드백 해주었음</li>
  <li>테스트 코드도 하나의 문서이며 유지보수 대상이기 때문에 가독성을 고려해야 한다는 것을 느꼈음</li>
  <li>서로 다른 테스트에서 공통으로 쓰이는 메서드들은 상위 클래스인 AcceptanceTest로 끌어 올림</li>
  <li>테스트에 쓰이는 변수명들도 맥락을 파악하기 쉽도록 변경</li>
  <li>상수처리도 신경씀</li>
</ul>

<h2 id="예외-처리">예외 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2518ddc4-c4ce-4a7a-8ee1-49becedb7936/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>“일단 프론트의 요구사항 다 반영하도록 구현해보자!”로 잡고 했더니 무수한 커스텀 예외가 만들어졌다…^ㅠ^</li>
  <li>이를 개선할 방법을 찾다가… 크루들한테 들은 <a href="https://cheese10yun.github.io/spring-guide-exception/">Spring Guide - Exception 전략</a> 을 적용해보기로~</li>
  <li>RuntimeException을 상속받는 BuisnessException을 만들고 필드에 상태코드와 ErrorMessage(DTO)를 가지도록 구현</li>
  <li>이를 상속하는 상태코드 400인 BusinessException과 상태코드 401인 AuthorizationException을 만듦</li>
  <li>또 이를 상속받는 각각의 클라이언트의 요구사항에 맞는 커스텀 예외 만듦</li>
  <li>
    <p>ControllerAdvice에서는 다음과 같이 BuisnessException을 잡고 이 예외에서 상태코드와 예외 메시지를 꺼내도록 구현</p>
  </li>
  <li>이렇게 되면 어드바이스에서 수많은 커스텀 예외들을 BuisnessException 하나만 잡고 처리할 수 있음</li>
  <li>상태코드에 따른 클래스를 두어 이가 변경되어도 유지보수가 쉬움</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">BusinessException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorMessage</span><span class="o">&gt;</span> <span class="nf">handleRuntimeException</span><span class="o">(</span><span class="n">BusinessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getHttpStatus</span><span class="o">()).</span><span class="na">body</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="businessexception">BusinessException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">httpStatus</span><span class="o">,</span> <span class="k">new</span> <span class="n">ErrorMessage</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">BusinessException</span><span class="o">(</span><span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">httpStatus</span> <span class="o">=</span> <span class="n">httpStatus</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">errorMessage</span> <span class="o">=</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">HttpStatus</span> <span class="nf">getHttpStatus</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">httpStatus</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ErrorMessage</span> <span class="nf">getErrorMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">errorMessage</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="authorizationexception">AuthorizationException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>401 상태코드</li>
</ul>

<h4 id="badrequestexception">BadRequestException</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BadRequestException</span> <span class="kd">extends</span> <span class="n">BusinessException</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">BadRequestException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>BusinessException을 상속</li>
  <li>400 상태코드</li>
</ul>

<h2 id="배포-스크립트">배포 스크립트</h2>

<ul>
  <li>실제 API 사용이 가능하도록 EC2에 배포하여야 했음</li>
  <li>프로젝트가 업데이트되면 프로세스를 재시동해야했음</li>
  <li>이러면 여러가지 명령어를 실행해야 함….</li>
  <li>이를 스크립트로 만들어 한번에 처리하도록 구현!</li>
</ul>

<h4 id="deploy-prodsh">deploy-prod.sh</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c">#!/bin/bash in the top of your scripts then you are telling your system to use bash as a default shell.</span>

<span class="nv">REPOSITORY</span><span class="o">=</span>/home/ubuntu/ <span class="c"># 경로 설정</span>
<span class="nv">PROJECT_NAME</span><span class="o">=</span>atdd-subway-fare

<span class="nb">cd</span> <span class="nv">$REPOSITORY</span>/<span class="nv">$PROJECT_NAME</span>/ <span class="c"># 경로로 접근</span>

<span class="nb">echo</span> <span class="s2">"&gt; git reset --hard"</span> 

git reset <span class="nt">--hard</span> <span class="c"># 깃허브 초기화</span>

<span class="nb">echo</span> <span class="s2">"&gt; git pull origin step1"</span>

git pull origin step1 <span class="c"># pull 땡겨오기</span>

<span class="nb">echo</span> <span class="s2">"&gt; 프로젝트 Build 시작"</span>

./gradlew clean build <span class="c"># 빌드</span>

<span class="nb">echo</span> <span class="s2">"&gt; Build 파일 경로 복사"</span>

<span class="nv">JAR_LOCATION</span><span class="o">=</span><span class="k">$(</span>find ./<span class="k">*</span> <span class="nt">-name</span> <span class="s2">"*jar"</span> | <span class="nb">grep </span>atdd-subway-fare<span class="k">)</span>

<span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 pid 확인"</span>

<span class="nv">CURRENT_PID</span><span class="o">=</span><span class="k">$(</span>pgrep <span class="nt">-f</span> <span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="o">[</span><span class="nt">-A-z0-9</span>.]<span class="k">*</span>.jar<span class="nv">$)</span> <span class="c"># 실행시켜져있는 jar pid 받기 </span>


<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$CURRENT_PID</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># -z 플래그는 null인것을 체크함, PID가 null인 경우 if절 안으로 들어감</span>
    <span class="nb">echo</span> <span class="s2">"&gt; 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."</span>
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"&gt; 현재 구동중인 애플리케이션 종료(pid : </span><span class="nv">$CURRENT_PID</span><span class="s2">)"</span>
    <span class="nb">echo</span> <span class="s2">"&gt; kill -15 </span><span class="nv">$CURRENT_PID</span><span class="s2">"</span>
    <span class="nb">kill</span> <span class="nt">-15</span> <span class="nv">$CURRENT_PID</span>
    sleep 5
<span class="k">fi

</span><span class="nb">echo</span> <span class="s2">"&gt; 새 애플리케이션 배포"</span>
<span class="nb">echo</span> <span class="s2">"&gt; JAR Location: </span><span class="nv">$JAR_LOCATION</span><span class="s2">"</span> 해당 jar파일 실행

<span class="c">#nohup java -jar 실행</span>
nohup java <span class="nt">-jar</span> <span class="nt">-Dspring</span>.profiles.active<span class="o">=</span>prod <span class="k">${</span><span class="nv">JAR_LOCATION</span><span class="k">}</span> 1&gt; log-prod.md 2&gt;&amp;1  &amp;
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-path 미션 정리</title>
	  <link>//atdd-subway-path-note</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-path-note</guid>
	  <description><![CDATA[
	     <h2 id="step1-2">STEP1, 2</h2>

<h3 id="jwttokenprovider">JwtTokenProvider</h3>

<ul>
  <li>jwt 토큰 생성, 토큰 검증, 토큰에서 인증 정보 추출하는 유틸 클래스</li>
</ul>

<h3 id="authorizationextractor">AuthorizationExtractor</h3>

<ul>
  <li>HTTP의 <code class="highlighter-rouge">Authorization</code> Header에서 Bearer 타입인 경우 Access Token을 추출하는 유틸 클래스</li>
</ul>

<h3 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="kd">implements</span> <span class="n">WebMvcConfigurer</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalConfig</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addArgumentResolvers</span><span class="o">(</span><span class="n">List</span> <span class="n">argumentResolvers</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">argumentResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createAuthenticationPrincipalArgumentResolver</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">createAuthenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>AuthenticationPrincipalArgumentResolver는 빈 등록이 되어있지 않음</li>
  <li>해당 리졸버를 활용할 수 있도록 등록해주는 java config</li>
  <li><code class="highlighter-rouge">AuthenticationPrincipalArgumentResolver</code>를 만들고 등록</li>
</ul>

<h3 id="authenticationprincipalargumentresolver">AuthenticationPrincipalArgumentResolver</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// resolveArgument 메서드가 동작하는 조건을 정의하는 메서드</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 파라미터 중 @AuthenticationPrincipal이 붙은 경우 동작하게 설정</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// supportsParameter가 true인 경우 동작</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Member</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>컨트롤러 메서드에서 특정 조건에 맞는 파라미터가 있을 때 원하는 값을 바인딩해주는 인터페이스</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">resolveArgument</code> 에서 <code class="highlighter-rouge">Member</code> 도메인 자체를 반환했었음</p>
  </li>
</ul>

<h4 id="관련-정리">관련 정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/13">Spring MVC Config 학습 테스트</a></li>
</ul>

<h3 id="authinterceptor">AuthInterceptor</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthInterceptor</span> <span class="kd">implements</span> <span class="n">HandlerInterceptor</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthInterceptor</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">authService</span><span class="o">.</span><span class="na">validateToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>인증 / 인가에 대한 토큰 검증을 담당</p>
  </li>
  <li>
    <p>토큰이 유효하면 true를 반환하도록</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">AuthorizationExtractor.extract()</code> 가 리졸버랑 중복이 되는데?</p>

    <ul>
      <li>어쩔 수 없음. 이 둘은 서로 모르는 관계로 독립적이니</li>
      <li>변경의 영향도 최소화를 위해 JwtProvider가 아닌 JwtProvider를 포함한 AuthService를 가지도록</li>
    </ul>
  </li>
</ul>

<h2 id="step3">STEP3</h2>

<h4 id="graph---그래프-역할을-하는-도메인">Graph - 그래프 역할을 하는 도메인</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Graph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="kd">public</span> <span class="nf">Graph</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initPath</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Section</span> <span class="n">section</span> <span class="o">:</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">initEdge</span><span class="o">(</span><span class="n">section</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initEdge</span><span class="o">(</span><span class="n">Section</span> <span class="n">section</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">());</span>
        <span class="n">addVertex</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">());</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">setEdgeWeight</span><span class="o">(</span><span class="n">graph</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="n">section</span><span class="o">.</span><span class="na">getUpStation</span><span class="o">(),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDownStation</span><span class="o">()),</span> <span class="n">section</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addVertex</span><span class="o">(</span><span class="n">Station</span> <span class="n">station</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">graph</span><span class="o">.</span><span class="na">containsVertex</span><span class="o">(</span><span class="n">station</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">addVertex</span><span class="o">(</span><span class="n">station</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">shortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DijkstraShortestPath</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">dijkstraShortestPath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">graph</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">(),</span> <span class="n">dijkstraShortestPath</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="path---사실상-dto-느낌">Path - 사실상 DTO 느낌…</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Path</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Path</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="n">stations</span><span class="o">,</span> <span class="kt">double</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stations</span> <span class="o">=</span> <span class="n">stations</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">stations</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stations</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">distance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="처음-구현한-로직---모든-line을-불러와-최단-거리-조회">처음 구현한 로직 - 모든 Line을 불러와 최단 거리 조회</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Line</span><span class="o">&gt;</span> <span class="n">lines</span> <span class="o">=</span> <span class="n">lineDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">lines</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/452f11f4-a8e7-4365-a71c-9c2be5f6435a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>사실 처음에는 sections만 가져와서 그래프를 그렸으나, 이렇게 되면 해당 역의 이름들을 가져올 수 없었음</li>
  <li>기존 코드를 사용하려고 일단 LineDao를 이용했었는데, 재연링의 리뷰대로 모든 Line을 조회하기 보다 필요한 Sections만 조회하도록 리팩토링</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/88d775c4-942a-4437-8f62-a7b0215a96a1/image.png" style="zoom:50%;" /></p>

<ul>
  <li>이 부분은 DM으로 이야기를 나눴는데,</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PathService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PathService</span><span class="o">(</span><span class="n">SectionDao</span> <span class="n">sectionDao</span><span class="o">,</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sectionDao</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationDao</span> <span class="o">=</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
        <span class="n">Graph</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Graph</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
        <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="n">graph</span><span class="o">.</span><span class="na">shortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">path</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">path</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="cors-이슈-해결-법">CORS 이슈 해결 법</h2>

<ul>
  <li>나같은 경우는 front쪽에 프록시 서버를 두어 해당 이슈가 발생하지 않도록 하였음</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/54">내가 CORS 이슈를 해결한 방법 - Proxy </a></li>
</ul>

<h2 id="cookie-vs-localstorage">Cookie vs LocalStorage</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4d9503c2-642a-4ed5-9531-acfc39e6f29b/image.png" style="zoom:50%;" /></p>

<ul>
  <li><a href="https://woowacourse.github.io/javable/post/2020-08-31-where_to_store_token/">토큰을 어디에 저장할까?</a> 글을 보고 토큰을 쿠키에 저장</li>
  <li>재연링의 리뷰로 쿠키를 사용했을 때의 문제점을 알아봄</li>
  <li>XSS 공격을 막을 수 있는 HTTP-Only 쿠키를 고려</li>
  <li>하지만 이는 JS에서 꺼내 쓸 수 없어 헤더에 토큰을 실어 보낼 수 없는 이슈</li>
  <li>(미션 요구사항과 OAuth 표준 등을 고려해) 재연링과 나눈 DM 내용과 같이 다음과 같은 문제들로 쿠키 대신 LocalStorage에 토큰을 저장하도록 변경</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 웹 이외의 클라이언트까지 고려하는 것이 좋다고 생각
* OAuth 표준을 지키기 위함
* 사실 HttpOnly를 통해 보호하여도, 하이재킹 등 많은 보안적 위험이 존재하기 때문에 악의적인 의도를 가진 사람이 불편해질 뿐 보안적으로 완벽하게 처리되지 않음
* MDN에서도 HTML5 이후부터 Cookie를 저장소와 같은 용도로 사용하지 않을 것을 권장
</code></pre></div></div>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/21">XSS, CSRF</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/22">SameSite Cookie</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/33">Cookie VS Local Storage</a></li>
</ul>

<h2 id="front">Front</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a00c23b4-79f3-46f2-891d-863f25e8a418/image.png" style="zoom:50%;" /></p>

<ul>
  <li><code class="highlighter-rouge">vue.config</code>를 통해 중복되는 URL에 대한 설정</li>
  <li>중복되는 fetch는 모듈로 따로 만들어서(fetch.js) 사용하도록 변경</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/4b5e5a10-0ebf-4d5b-8750-b6a5ccf92652/image.png" style="zoom:50%;" /></p>

<h2 id="argumentresolver와-authinterceptor">ArgumentResolver와 AuthInterceptor</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/336584ce-5eaf-45d6-ab2f-c4066eb03ab1/image.png" style="zoom:50%;" /></p>

<h4 id="argumentresolver">ArgumentResolver</h4>
<blockquote>
  <p>Strategy interface for resolving method parameters into argument values in the context of a given request.</p>
  <ul>
    <li>매개변수의 리졸빙</li>
    <li>컨트롤러에서 파라미터를 바인딩 해주는 역할
      <h4 id="authinterceptor-1">AuthInterceptor</h4>
      <p>Workflow interface that allows for customized handler execution chains. Applications can register any number of existing or custom interceptors for certain groups of handlers, to add common preprocessing behavior without needing to modify each handler implementation.
A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers the execution of the handler itself. This mechanism can be used for a large field of preprocessing aspects, e.g. for authorization checks, or common handler behavior like locale or theme changes. Its main purpose is to allow for factoring out repetitive handler code.</p>
    </li>
    <li>권한 확인 또는 로케일 또는 테마 변경과 같은 일반적인 핸들러 동작과 같은 전처리 측면의 넓은 분야에 사용</li>
    <li>인증 / 인가에 대한 검사</li>
    <li>주요 목적은 반복적 인 핸들러 코드를 제거하는 것</li>
    <li>Spring doc에서 공식적으로 authorization checks를 하는 애라고 지정해준 존재</li>
    <li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/HandlerInterceptor.html">공식문서</a></li>
  </ul>
</blockquote>

<p><strong>인터셉터와 리졸버는 서로를 모르는 관계이고 독립적으로 가야함</strong></p>
<h4 id="참고할-글">참고할 글</h4>
<ul>
  <li><a href="https://velog.io/@sa833591/Spring-Filter-Interceptor-AOP-%EC%B0%A8%EC%9D%B4-yvmv4k96">Filter, Interceptor, AOP 차이
</a></li>
</ul>

<h4 id="정리-2">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/28">HandlerInterceptor</a></li>
</ul>

<h2 id="다시-구현한다면">다시 구현한다면?</h2>

<h4 id="argumentresolver-에서-dto인-loginmember를-반환하게-할걸">ArgumentResolver 에서 DTO인 LoginMember를 반환하게 할걸!</h4>

<ul>
  <li>도메인을 반환하면 뷰와 컨트롤러에 노출시키고 도메인을 조작할 가능성이 있음</li>
  <li>또 불필요한 pw 필드도 가지게 됨</li>
</ul>

<h4 id="비번-암호화와-member-객체에서-비번을-확인하게-할걸">비번 암호화와 member 객체에서 비번을 확인하게 할걸!</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmailAndPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>비번을 암호화 할 때는 Spring Security의 <code class="highlighter-rouge">BCryptPasswordEncoder()</code> 를 사용</li>
  <li>회원가입할 때 입력한 비번을 인코딩하여 저장</li>
  <li>그런데 만약 여기서 로그인할 때 입력한 비번을 <code class="highlighter-rouge">encoder.encode()</code> 하여 조회하면 실패</li>
  <li>왜냐면 동일한 원문이어도 각기 다른 인코딩된 값을 내뱉기 때문</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PasswordEncoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
<span class="n">String</span> <span class="err">원문</span> <span class="o">=</span> <span class="s">"qwe123"</span><span class="o">;</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>
<span class="n">String</span> <span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="n">_2</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="err">원문</span><span class="o">);</span>

<span class="n">encorder</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="err">원문</span><span class="o">,</span> <span class="err">암호화된</span> <span class="err">원문</span><span class="o">);</span> <span class="c1">// true</span>
<span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="err">암호화된</span><span class="n">_</span><span class="err">원문</span><span class="mi">2</span><span class="o">);</span> <span class="c1">//false</span>
</code></pre></div></div>

<ul>
  <li>때문에 쿼리로 Member를 받아오고 이 객체에서 <code class="highlighter-rouge">encorder.matches()</code>를 이용해 비번을 확인하자</li>
</ul>

<h4 id="최단거리-찾는-로직을-전략-패턴으로-구현할걸">최단거리 찾는 로직을 전략 패턴으로 구현할걸!</h4>

<ul>
  <li>도메인에 외부 라이브러리를 가지고 있는 것이 옳은가?</li>
  <li>만약 알고리즘이 변경되면 도메인에도 영향이 감</li>
  <li>전략패턴으로 Dijkstra 알고리즘을 주입하자</li>
</ul>

<hr />

<h2 id="2021-06-16-위-사항들을-반영하여-다시-구현">2021-06-16 위 사항들을 반영하여 다시 구현</h2>

<h3 id="argumentresolver에서-dto인-loginmember-반환하도록-리팩토링">ArgumentResolver에서 DTO인 LoginMember 반환하도록 리팩토링</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalArgumentResolver</span> <span class="kd">implements</span> <span class="n">HandlerMethodArgumentResolver</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthService</span> <span class="n">authService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">AuthService</span> <span class="n">authService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authService</span> <span class="o">=</span> <span class="n">authService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsParameter</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">parameter</span><span class="o">.</span><span class="na">hasParameterAnnotation</span><span class="o">(</span><span class="n">AuthenticationPrincipal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">LoginMember</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="n">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">AuthorizationExtractor</span><span class="o">.</span><span class="na">extract</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authService</span><span class="o">.</span><span class="na">findLoginMemberByToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="loginmember">LoginMember</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginMember</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LoginMember</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>로직에 필요한 정보만 담고 있는 DTO 생성</p>
  </li>
  <li>아 참고로 Interceptor에서는 토큰 검증만 하도록 함
    <ul>
      <li>차피 이미 로그인으로 아이디 비번을 검증했잖아?</li>
    </ul>
  </li>
  <li>리졸버에서는 토큰을 통해 진짜 매개변수 리졸빙만 담당</li>
</ul>

<h3 id="member-객체에서-비번을-확인하도록">member 객체에서 비번을 확인하도록</h3>

<h4 id="authservice">AuthService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">TokenResponse</span> <span class="nf">createToken</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findMember</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">isInvalidPassword</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()))</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenProvider</span><span class="o">.</span><span class="na">createToken</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenResponse</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">Member</span> <span class="nf">findMember</span><span class="o">(</span><span class="n">TokenRequest</span> <span class="n">tokenRequest</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">memberDao</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">tokenRequest</span><span class="o">.</span><span class="na">getEmail</span><span class="o">())</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">AuthorizationException</span><span class="o">(</span><span class="s">"로그인 실패입니다."</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>추후 단방향 비번 암호화를 위해 객체에서 비번을 비교하도록 변경</li>
</ul>

<h3 id="최단거리-찾는-로직을-전략-패턴으로">최단거리 찾는 로직을 전략 패턴으로</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/923976a2-131b-45c4-8911-c8a0b3da1e0c/image.png" style="zoom:33%;" /></p>

<ul>
  <li>최단 경로 찾기 전략을 인터페이스로, 이를 다익스트라로 구현한 클래스를 만듦</li>
  <li>알고리즘을 코드의 영향없이 변경할 수 있도록</li>
</ul>

<h4 id="subwaygraph">SubwayGraph</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubwayGraph</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SubwayGraph</span><span class="o">(</span><span class="n">WeightedMultigraph</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="o">;</span>
        <span class="n">initPath</span><span class="o">(</span><span class="n">sections</span><span class="o">);</span>
    <span class="o">}</span>
   <span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>그래프 도메인</li>
</ul>

<h4 id="shortestpathstrategy-인터페이스">ShortestPathStrategy 인터페이스</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>

    <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>전략마다 <code class="highlighter-rouge">getVertexList()</code> 와 <code class="highlighter-rouge">getPathWeight()</code> 를 계산하도록 명세</li>
</ul>

<h4 id="dijkstrashortestpathstrategy">DijkstraShortestPathStrategy</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DijkstraShortestPathStrategy</span> <span class="kd">implements</span> <span class="n">ShortestPathStrategy</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathAlgorithm</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">,</span> <span class="n">DefaultWeightedEdge</span><span class="o">&gt;</span> <span class="n">shortestPathAlgorithm</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">SubwayGraph</span> <span class="n">subwayGraph</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathAlgorithm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DijkstraShortestPath</span><span class="o">&lt;&gt;(</span><span class="n">subwayGraph</span><span class="o">.</span><span class="na">getGraph</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">getVertexList</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">).</span><span class="na">getVertexList</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getPathWeight</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">shortestPathAlgorithm</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>SubwayGraph를 받아서 최단 경로를 구할 수 있음</li>
</ul>

<h4 id="shortestpathfinder">ShortestPathFinder</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShortestPathFinder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ShortestPathFinder</span><span class="o">(</span><span class="n">ShortestPathStrategy</span> <span class="n">shortestPathStrategy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">shortestPathStrategy</span> <span class="o">=</span> <span class="n">shortestPathStrategy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Path</span> <span class="nf">findShortestPath</span><span class="o">(</span><span class="n">Station</span> <span class="n">source</span><span class="o">,</span> <span class="n">Station</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Path</span><span class="o">(</span><span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getVertexList</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">),</span> <span class="n">shortestPathStrategy</span><span class="o">.</span><span class="na">getPathWeight</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>최단 경로를 찾는 역할</li>
  <li>전략을 주입받아 최단 경로를 구하고 싶어 도메인을 분리하였음…</li>
</ul>

<h4 id="변경된-pathservice">변경된 PathService</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">PathResponse</span> <span class="nf">findPath</span><span class="o">(</span><span class="n">Long</span> <span class="n">sourceId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">targetId</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Section</span><span class="o">&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">sectionDao</span><span class="o">.</span><span class="na">findByStationIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">sourceId</span><span class="o">,</span> <span class="n">targetId</span><span class="o">));</span>
    <span class="n">SubwayGraph</span> <span class="n">subwayGraph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SubwayGraph</span><span class="o">(</span><span class="k">new</span> <span class="n">WeightedMultigraph</span><span class="o">&lt;&gt;(</span><span class="n">DefaultWeightedEdge</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">sections</span><span class="o">);</span>
    <span class="n">ShortestPathFinder</span> <span class="n">shortestPathFinder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShortestPathFinder</span><span class="o">(</span><span class="k">new</span> <span class="n">DijkstraShortestPathStrategy</span><span class="o">(</span><span class="n">subwayGraph</span><span class="o">));</span>
    <span class="n">Path</span> <span class="n">shortestPath</span> <span class="o">=</span> <span class="n">shortestPathFinder</span><span class="o">.</span><span class="na">findShortestPath</span><span class="o">(</span><span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">sourceId</span><span class="o">),</span> <span class="k">new</span> <span class="n">Station</span><span class="o">(</span><span class="n">targetId</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">PathResponse</span><span class="o">(</span><span class="n">StationResponse</span><span class="o">.</span><span class="na">listOf</span><span class="o">(</span><span class="n">combineStationById</span><span class="o">(</span><span class="n">shortestPath</span><span class="o">)),</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">shortestPath</span><span class="o">.</span><span class="na">distance</span><span class="o">());</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Station</span><span class="o">&gt;</span> <span class="nf">combineStationById</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">stationIds</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">stations</span><span class="o">()</span>
            <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Station:</span><span class="o">:</span><span class="n">getId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">stationDao</span><span class="o">.</span><span class="na">findByIds</span><span class="o">(</span><span class="n">stationIds</span><span class="o">).</span><span class="na">sortedStation</span><span class="o">(</span><span class="n">stationIds</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="반영된-코드는-여기에-"><a href="https://github.com/NewWisdom/atdd-subway-path/tree/step5">반영된 코드는 여기에 👻</a></h4>


	  ]]></description>
	</item>

	<item>
	  <title>📚 atdd-subway-map 미션 정리</title>
	  <link>//atdd-subway-map</link>
	  <author></author>
	  <pubDate>2021-06-11T10:01:00+09:00</pubDate>
	  <guid>//atdd-subway-map</guid>
	  <description><![CDATA[
	     <h2 id="중복되는-테스트-메서드">중복되는 테스트 메서드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/73cdc1c4-063d-4a4e-af29-6520fecb721e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>중복되는 테스트 메서드는 추출하자</li>
  <li>테스트코드도 유지보수의 대상이며 하나의 문서이기 때문에 가독성을 고려하자</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">ExtractableResponse</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">addSection</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">RestAssured</span><span class="o">.</span><span class="na">given</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
    <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
    <span class="o">.</span><span class="na">when</span><span class="o">()</span>
    <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/lines/{id}/sections"</span><span class="o">,</span> <span class="mi">1L</span><span class="o">)</span>
    <span class="o">.</span><span class="na">then</span><span class="o">().</span><span class="na">log</span><span class="o">().</span><span class="na">all</span><span class="o">()</span>
    <span class="o">.</span><span class="na">extract</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="예외-처리는-dao에서">예외 처리는 DAO에서</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/004aa497-1875-4a85-ba7d-2ab1c0f4f40e/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DAO에서 예외를 체크해주고 있었음</li>
  <li>DAO는 말그대로 DB에 어세스하는 역할만 할 뿐</li>
  <li>이 결과에 대한 예외는 서비스가 알아서 하도록 하자</li>
</ul>

<h2 id="valid와-validated로-dto-검증">@Valid와 @Validated로 DTO 검증</h2>

<ul>
  <li><code class="highlighter-rouge">@Valid</code> 를 통해 DTO에서 요청에 대한 검증을 하게 해줌</li>
  <li>Validation을 group화 할 수 있는 점을 이용해서 각기 요청마다 group을 지어 한 DTO를 사용해도 각각 요청에 맞는 검증을 진행</li>
</ul>

<h4 id="정리">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/30">@Valid / @Validation으로 요청값 검증</a></li>
</ul>

<h2 id="valid로-잡은-예외-메시지-처리">Valid로 잡은 예외 메시지 처리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/2ca1114f-98c3-4ce6-b968-0212fcbbc658/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>Valid 어노테이션으로 잡은 MethodArgumentNotValidException의 메시지를 제대로 출력하고 있지 않았음</li>
  <li>게이츠가 제안해준 방법을 적용하니 BindingResult에 있는 예외 메시지들을 추출하여 던져줄 수 있었음</li>
</ul>

<h2 id="service-레이어에서-도메인이-아닌-dto를-반환하자">Service 레이어에서 도메인이 아닌 DTO를 반환하자</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2e62828-da05-401f-bad8-e1e86f9b7c9a/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Controller에서 도메인을 가져다 써서 화면에 필요한 데이터를 표현하기 위해 도메인 자체나 도메인의 getter를 노출시키고 있었음</li>
  <li>도메인의 정보를 외부(view)에 노출하는 경우, interface인 DTO를 통해 서비스 레이어에서 반환하도록 리팩토링</li>
  <li><a href="https://github.com/HomoEfficio/dev-tips/blob/master/DTO-DomainObject-Converter.md">참고</a></li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/26">Service Layer에서 도메인 객체가 아닌 DTO를 반환해야하는 이유? (feat.Open Session In View) </a></li>
</ul>

<h2 id="restassured에-대해">RestAssured에 대해</h2>

<ul>
  <li>전 단계까지는 MockMVC 등으로 컨트롤러단을 단위테스트로 진행했음</li>
  <li>E2E 테스트를 한다는 것은 말 그대로 끝부터 끝까지,요청부터 내가 원하는 응답을 테스트 하는 것인데 <br />
이렇게되면 단위 테스트를 하는 이유가 있을까라는 고민을 했음</li>
  <li>고민한 결과 “단위 테스트는 구현 단계에서 내가 구현한 레이어(단위)가 정상 동작하는지를 테스트하기 위해,
이후 모든 단위들이 조합되었을 때 통합테스트를 통해 애플리케이셔이 원하는 기능을 잘 수행하는지 테스트한다”
이렇게 결론을 내림</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/191d92fe-c4e1-4595-b67f-ee1d37e1d9a6/image.png" style="zoom:33%;" /></p>

<h2 id="구간-추가-로직">구간 추가 로직</h2>

<ul>
  <li>구간을 추가할 때 상행역, 하행역이 존재하는지 또 이를 찾고 수정해주기 위한 많은 로직을 작성해야했음</li>
  <li>그런데 사실 비슷한 로직인데 상행인지 하행인지 대상만 달랐음</li>
  <li>아래와 같이 일단 구현을 목적으로 했을 때는 엄청난 분기가 생겨버림</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithUpStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">downStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">toAddSection</span><span class="o">.</span><span class="na">hasDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithDownStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">);</span>
    <span class="n">checkAddableByDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">);</span>
    <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span>
                                 <span class="k">new</span> <span class="nf">Section</span><span class="o">(</span><span class="n">targetSection</span><span class="o">.</span><span class="na">id</span><span class="o">(),</span> <span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">toAddSection</span><span class="o">.</span><span class="na">upStation</span><span class="o">(),</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">subtractDistance</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">)));</span>
  <span class="o">}</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이는 상행구간 찾기, 하행구간 찾기를 전략패턴을 이용해 리팩토 해버렸음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LineService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LineRepository</span> <span class="n">lineRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">;</span>
<span class="c1">// ...</span>
</code></pre></div></div>

<ul>
  <li>일단 LineService가 구간을 찾는 전략을 가지고 있음</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSection</span><span class="o">(</span><span class="kd">final</span> <span class="n">Long</span> <span class="n">lineId</span><span class="o">,</span> <span class="kd">final</span> <span class="n">SectionRequest</span> <span class="n">sectionRequest</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Line</span> <span class="n">line</span> <span class="o">=</span> <span class="n">lineRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">toAddSection</span> <span class="o">=</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">toSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">);</span>
  <span class="n">Station</span> <span class="n">targetStation</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">registeredStation</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">);</span>
  <span class="n">Section</span> <span class="n">targetSection</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="na">findSectionWithStation</span><span class="o">(</span><span class="n">targetStation</span><span class="o">,</span> <span class="n">findSectionStrategies</span><span class="o">);</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">updateSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">targetSection</span><span class="o">.</span><span class="na">updateToAdd</span><span class="o">(</span><span class="n">toAddSection</span><span class="o">));</span>
  <span class="n">lineRepository</span><span class="o">.</span><span class="na">addSection</span><span class="o">(</span><span class="n">lineId</span><span class="o">,</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getUpStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDownStationId</span><span class="o">(),</span> <span class="n">sectionRequest</span><span class="o">.</span><span class="na">getDistance</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>대상 구간을 찾을 때 전략들을 주입하고</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">Section</span> <span class="nf">findSectionWithStation</span><span class="o">(</span><span class="n">Station</span> <span class="n">targetStation</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">FindSectionStrategy</span><span class="o">&gt;</span> <span class="n">findSectionStrategies</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">findSectionStrategies</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">findSectionStrategy</span> <span class="o">-&gt;</span> <span class="n">findSectionStrategy</span><span class="o">.</span><span class="na">findSection</span><span class="o">(</span><span class="n">sections</span><span class="o">,</span> <span class="n">targetStation</span><span class="o">))</span>
    <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">isPresent</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Optional:</span><span class="o">:</span><span class="n">get</span><span class="o">)</span>
    <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
    <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">EMPTY</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Sections에서 다음과 같이 해당 구간을 찾음</li>
</ul>

<h2 id="pr-링크">PR 링크</h2>

<ul>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/86">STEP1</a></li>
  <li><a href="https://github.com/woowacourse/atdd-subway-map/pull/162">STEP2</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 스프링 부트 Profile로 다른 환경 구성</title>
	  <link>//profile</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//profile</guid>
	  <description><![CDATA[
	     <h2 id="profile">Profile?</h2>

<ul>
  <li>애플리케이션 일부 configuration을 분리하고 싶을 때 사용</li>
  <li>애플리케이션 일부 configuration을 특정 환경에서만 가능하게 하고 싶을 때 사용</li>
  <li>개발 환경에 따라 설정값을 달르게 로딩할 때</li>
</ul>

<h2 id="profile-1">@Profile</h2>

<ul>
  <li><code class="highlighter-rouge">@Component, @Configuration, @ConfigurationProperties</code>을 <code class="highlighter-rouge">@Profile</code>와 함께 선언</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"production"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductionConfiguration</span> <span class="o">{</span>

    <span class="c1">// ...</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>어플리케이션 실행시 <code class="highlighter-rouge">spring.profiles.active</code> 프로퍼티로 프로파일을 지정하면 해당 프로파일이 적용된 빈만 등록됨</li>
</ul>

<p><strong>application-properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev,hsqldb
</code></pre></div></div>

<h4 id="example">Example</h4>

<ol>
  <li>application-properties에 다음과 같이 정의
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=prod
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">@Profile</code> 어노테이션과 함께 <code class="highlighter-rouge">@Configuration</code> 등록</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311111-0f322800-c93f-11eb-9455-436a99434869.png" alt="image" style="zoom:50%;" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121311125-13f6dc00-c93f-11eb-8a93-3923630d84fa.png" alt="image" style="zoom:50%;" /></p>

<ol>
  <li>어플리케이션 실행시 active한 prod에 등록된 hello 빈이 출력됨</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311276-3a1c7c00-c93f-11eb-9698-9abf9172184f.png" alt="image" /></p>

<h3 id="profile과-activeprofiles">@Profile과 @ActiveProfiles</h3>
<ul>
  <li>서로 다른 환경에서 서로 다른 profile을 활성화하여 필요한 빈만 등록하도록 하는 어노테이션</li>
  <li><code class="highlighter-rouge">@Profile</code>은 SpringBootApplication을 실행할 때 사용</li>
  <li><code class="highlighter-rouge">@ActiveProfiles</code>은 테스트 환경에서 사용</li>
</ul>

<h2 id="applicationproperties">application.properties</h2>

<ul>
  <li>application-{profile}.properties 형식으로 파일 생성</li>
  <li>이는 <code class="highlighter-rouge">@ConfigurationProperties</code>로 간주되고 로드됨
    <ul>
      <li>*.properties , *.yml 파일에 있는 property를 자바 클래스에 값을 가져와서(바인딩) 사용할 수 있게 해주는 어노테이션</li>
    </ul>
  </li>
  <li>application-{profile}.properties은 application.properties 보다 우선순위가 높게됨</li>
  <li>빌드할 때 다음과 같은 명령어와 함께 특정 환경설정을 적용할 수 있음
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=production
</code></pre></div>    </div>
  </li>
  <li>properties 파일에 <code class="highlighter-rouge">spring.profiles.include</code>를 통해 추가할 프로파일을 설정할 수 있음</li>
</ul>

<h4 id="example-1">Example</h4>

<p><strong>application-properties</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev
profile-common.name = default_name_mazzi
defaultonly.name = defualt_name
</code></pre></div></div>
<p><strong>application-prod.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = test_name_mazzi
testonly.name = test_name
</code></pre></div></div>
<p><strong>application-dev.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = dev_name_mazzi
devonly.name = dev_name
</code></pre></div></div>
<p><strong>AppRunner</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="n">ApplicationRunner</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"spring.profiles.active : "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">getOptionValues</span><span class="o">(</span><span class="s">"spring.profiles.active"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Enviroment's Active Profile : "</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">()));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"defaultonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"defaultonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"testonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"testonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"devonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"devonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"profile-common.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"profile-common.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>실행 결과</strong></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121315869-b6b15980-c943-11eb-83a9-7e4214b18fe6.png" alt="image" style="zoom:50%;" /></p>

<ul>
  <li>profile-common.name는 모든 프로퍼티 파일이 공통으로 가진 프로퍼티</li>
  <li>dev 프로파일을 활성화</li>
  <li>공통 속성인 <code class="highlighter-rouge">profile-common.name</code>은 우선순위가 높은 dev 프로파일의 것으로 오버라이드 됨</li>
</ul>

<hr />
<h3 id="참고자료">참고자료</h3>
<ul>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">공식문서</a></li>
  <li><a href="https://yangbox.tistory.com/35">스프링부트 프로파일(Springboot Profile)로 다른 환경 구성하기</a></li>
  <li><a href="https://engkimbs.tistory.com/766">스프링 부트 프로파일(Spring Boot Profile)</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📚 jwp-chess 미션 정리</title>
	  <link>//jwp-chess-note</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//jwp-chess-note</guid>
	  <description><![CDATA[
	     <h2 id="controlleradvice">@ControllerAdvice</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9838b28-b9fd-4cd3-9f8f-f19229e5da70/image.png" style="zoom: 50%;" /></p>

<ul>
  <li>전역 예외를 처리하는데 사용</li>
</ul>

<h4 id="정리">정리</h4>

<p><a href="https://github.com/NewWisdom/TIL/issues/1">@ControllerAdvice, @RestControllerAdvice</a></p>

<h2 id="rest-api">REST API</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/b7428bd8-737e-489a-a59d-d3e8a1adcfd2/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3dbc03af-5e1c-4be6-a1e0-7332517831ec/image.png" style="zoom:50%;" /></p>

<ul>
  <li>REST API 설계 방법을 찾아보고 고민하여 반영</li>
</ul>

<h4 id="정리-1">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/2">REST API 디자인</a></li>
</ul>

<h2 id="profile">Profile</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/4fdbb04e-3c16-4a59-954f-b0020d245842/image.png" style="zoom:50%;" /></p>

<ul>
  <li>실제 애플리케이션에서 사용하는 DB는 Mysql 그대로 냅두고</li>
  <li>테스트에서는 h2를 사용하여 h2 의 장점을 극대화해서 사용하도록 리팩또</li>
  <li>테스트 DB를 따로 설정하기 위해 열심히 찾아보다가 application-properties를 활용하는 방안 학습</li>
  <li>처음에는 application-{환경}-properties로 각각 파일을 만들어주었음</li>
  <li>아래와 같은 리뷰를 받고 test.resource에 application-properties를 만들어줌</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5dc4b405-47bc-4422-83f8-eedaa3b7732e/image.png" style="zoom:50%;" /></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4aa931db-0a73-4ada-9ba2-2bb0e3b3ea3b/image.png" style="zoom:33%;" /></p>

<h4 id="정리-2">정리</h4>

<ul>
  <li>Profile에 대해 추가적으로 학습하고 정리</li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/47">Profile</a></li>
</ul>

<h2 id="테스트에-관하여">테스트에 관하여</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/03a3dc16-07b5-48d0-bf51-fbea7bacc9f6/image.png" style="zoom:50%;" /></p>

<ul>
  <li>지난 레벨 체스 코드 옮겨오면서 테스트 코드는 빼고 옮겨왔었음 🥲</li>
  <li>데이브의 권유대로 각 레이어별 테스트 코드 작성</li>
  <li>처음에는 단순히 <code class="highlighter-rouge">@SpringBootTest</code> (통합테스트)로 진행하려 했음</li>
  <li>찾아보니 각 레이어를 단위 테스트로도 구현할 수 있음을 깨달음</li>
  <li><code class="highlighter-rouge">@WebMvcTest, @jdbcTest</code>을 통해 Controller와 Repository 레이어에 대한 단위 테스트를 구현</li>
</ul>

<h4 id="정리-3">정리</h4>

<ul>
  <li><a href="https://newwisdom.github.io/unit-test-vs">통합 테스트 VS 단위 테스트</a></li>
</ul>

<h2 id="학습하라고-던져주신-키워드">학습하라고 던져주신 키워드</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9147f41d-e48f-479d-8573-2f23fcbff416/image.png" style="zoom:50%;" /></p>

<h4 id="정리-4">정리</h4>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues/3#issue-862548280">@Responsebody는 어떤 역할을 해줄까?</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/4#issue-862590487">@Componentscan</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/5#issue-862591289">스프링의 DI 방법</a></li>
  <li><a href="https://github.com/NewWisdom/TIL/issues/6">Spring에서 request 처리 과정</a></li>
</ul>

<h2 id="이번-미션에서-이런-키워드들을-학습했음-">이번 미션에서 이런 키워드들을 학습했음 👻</h2>

<ul>
  <li><a href="https://github.com/NewWisdom/TIL/issues?q=is%3Aissue+is%3Aopen+label%3Ajwp-chess">내 깃헙 issue에 등록했지롱</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Auth 강의</title>
	  <link>//lecture-auth</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//lecture-auth</guid>
	  <description><![CDATA[
	     <h2 id="피드백-강의">피드백 강의</h2>

<h3 id="인증-헤더">인증 헤더</h3>

<p>로그인을 통해 토큰을 발급 받은 후 헤더에 Authorization에 토큰을 실어보낸다.<br />
왜 굳이 이 헤더에 토큰을 넣어 보낼까?</p>

<h3 id="http-인증">HTTP 인증</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/567b6a87-15f7-4409-be6a-2a4baf9b3ffb/image.png" style="zoom:50%;" /></p>

<p>HTTP 프로토콜의 정의이기 때문이다.</p>

<ol>
  <li>클라이언트가 “/” 요청을 보낸다.</li>
  <li>서버는 접근을 할 수 있는지 확인하고, 없으면 401을 보낸다.</li>
  <li>여기서는 basic이라는 방식으로 토큰을 검증하고 있다. 잘못되었으니 다시 요청해!</li>
</ol>

<h3 id="http-인증-스킴">HTTP 인증 스킴</h3>

<h4 id="basic">Basic</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e9a8db3-4221-43a8-84fa-c2f81f371ab1/image.png" style="zoom:33%;" /></p>

<ul>
  <li>base64를 이용해 인코딩된 사용자의 id/pw 쌍의 인증 정보를 전달</li>
  <li>안전을 위해 HTTPS(TLS) 연결 위에서 발생되어야 함</li>
</ul>

<h4 id="bearer">Bearer</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d631b9a8-b41d-438e-8038-6299f044616a/image.png" style="zoom:33%;" /></p>

<ul>
  <li>bearer token이라는 보안 토큰을 활용하는 인증 스킴</li>
  <li>Outh2.0에서 사용하기 위해 만들어짐</li>
</ul>

<h2 id="jwt">JWT</h2>

<ul>
  <li>Json Web Token</li>
  <li>웹 표준 (RFC 7519)</li>
  <li>자체적으로 검증되었음을 증명해주는 signature를 포함</li>
  <li>생성시 검증이나 권한 인가 시 필요한 값을 넣어 상태를 따로 관리하지 않아도 됨</li>
</ul>

<h3 id="토큰의-구성">토큰의 구성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1bcb51b5-e245-4389-9b50-a6d91bc27d2d/image.png" style="zoom:50%;" /></p>

<h4 id="1-header">1. Header</h4>

<ul>
  <li>토큰에 대한 해석 방법</li>
  <li>alg : 시그니처에서 사용할 알고리즘 방법</li>
  <li>typ : 토큰의 타입</li>
</ul>

<h4 id="2-payload">2. Payload</h4>

<ul>
  <li>토큰의 내용, 전달할 내용</li>
  <li>payload의 각각의 값을 클레임이라고 함</li>
  <li>sub : 클레임의 제목</li>
  <li>name :</li>
  <li>iat : 생성 시간</li>
  <li>이 역시도 base64로 인코딩</li>
</ul>

<h4 id="3-signature">3. Signature</h4>

<ul>
  <li>헤더와 페이로드가 변조되지 않았음을 검즌</li>
  <li>base64로 인코딩을 하고, 알고리즘과 키값으로 해독</li>
</ul>

<p><strong>basic과 bearer 둘 다 base64로 인코딩 하면 어떻게 구별하나요?</strong></p>

<p>이는 서버에서 페이크처럼 쓸 수 있지!</p>

<p><strong>payload가 같으면 토큰 값도 같아지나요?</strong></p>

<p>근데 아마 iat가 달라서 다를 수 밖에 없을 듯</p>

<hr />

<h2 id="dispatcher-servlet">Dispatcher Servlet</h2>

<h3 id="요청에-따라-수행할-로직-분기">요청에 따라 수행할 로직 분기</h3>

<h3 id="dispatcherservlet-위치">DispatcherServlet 위치</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a3187c31-d891-43dc-af7a-bb4cde6ab4b0/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Handler 앞에 Interceptor가 있음</li>
</ul>

<p>MVC Config 객체도 모두 빈이었다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Kotlin을 정복해봅시다 2</title>
	  <link>//kotlin2</link>
	  <author></author>
	  <pubDate>2021-05-26T19:18:00+09:00</pubDate>
	  <guid>//kotlin2</guid>
	  <description><![CDATA[
	     <h2 id="코틀린-dsl">코틀린 DSL</h2>

<h3 id="dls란">DLS란?</h3>

<ul>
  <li>도메인 특화 언어 (Domain-specific language) ↔️ 범용 프로그래밍 언어</li>
  <li>선언적 언어</li>
  <li>세부 실행은 언어를 해석하는 엔진에 맡김</li>
  <li>컴파일 시점에 제대로 검증하는 것이 어려움</li>
</ul>

<h3 id="코틀린-dsl이란">코틀린 DSL이란?</h3>

<ul>
  <li>범용 언어(= 코틀린)로 작성된 프로그램의 일부</li>
  <li>범용 언어와 동일한 문법 사용</li>
  <li>호출 결과를 객체로 변환하기 위해 노력할 필요 없음</li>
  <li>타입 안정성 보장</li>
</ul>

<h3 id="코틀린은-간결한-구문을-어떻게-지원하는가">코틀린은 간결한 구문을 어떻게 지원하는가?</h3>

<ul>
  <li>확장 함수</li>
  <li>중위 호출</li>
  <li>연산자 오버로딩</li>
  <li>get 메서드에 대한 관례</li>
  <li>람다를 괄호 밖으로 빼는 관례</li>
  <li>수신 객체 지정 람다</li>
</ul>

<h3 id="확장-함수-extension-functions">확장 함수 Extension functions</h3>

<ul>
  <li>코틀린은 클래스를 확장해서 새로운 기능을 개발할 수 있도록 지원</li>
  <li><code class="highlighter-rouge">상속</code> 과는 조금 다른 개념</li>
  <li>ex) 외부 라이브러리를 사용할 때 이 자체 클래스는 변경할 수  없지만 이를 확장해 원하는 새로운 함수를 만들 수 있음</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"Kotlin"</span><span class="p">.</span><span class="n">lastChar</span><span class="p">()</span>

<span class="k">fun</span> <span class="nf">String</span><span class="p">.</span><span class="n">lastChar</span><span class="p">():</span> <span class="n">Char</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">length</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="중위-표기-infix-notation">중위 표기 Infix notation</h3>

<h4 id="중위표기법">중위표기법?</h4>

<p><strong>infix(중위표기법)</strong> : 일상생활에서의 수식 표기법으로 두 개의 피연산자 사이에 연산자가 존재하는 표현방식이다.  ex) X + Y</p>

<p>Kotlin에서 <code class="highlighter-rouge">infix</code> 키워드를 사용하여 중위표기법으로 함수를 호출할 수 있다. 단, 아래 요건을 충족해야 한다.</p>

<ul>
  <li>They must be member functions or extension functions. (멤버 함수 혹은 확장 함수일 때)</li>
  <li>They must have a single parameter. (단일 매개 변수일 때)</li>
  <li>The parameter must not accept a variable number of arguments and must have no default value. (가변인자를 받으면 안되고 기본 값을 가지면 안된다.)</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">1</span> <span class="n">to</span> <span class="s">"one"</span>

<span class="k">infix</span> <span class="k">fun</span> <span class="nf">Any</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="p">=</span> <span class="n">Pair</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="연산자-오버로딩-operator-overloading">연산자 오버로딩 Operator overloading</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Point</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">+</span> <span class="n">Point</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>

<span class="kd">data class</span> <span class="nc">Point</span><span class="p">(</span><span class="kd">val</span> <span class="py">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">y</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">operator</span> <span class="k">fun</span> <span class="nf">plus</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="n">Point</span><span class="p">):</span> <span class="n">Point</span> <span class="p">=</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span> <span class="p">+</span> <span class="n">other</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">+</span> <span class="n">other</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>plus 함수 앞에 <code class="highlighter-rouge">operator</code> 키워드를 붙여 연산자 오버로딩을 하는 함수임을 명시</li>
  <li>확장 함수로 정의할 수도 있음</li>
</ul>

<h4 id="이항-산술-연산-오버로딩">이항 산술 연산 오버로딩</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center">연산 우선순위</th>
      <th style="text-align: center">식</th>
      <th style="text-align: center">함수 이름</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a * b</td>
      <td style="text-align: center">times</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a / b</td>
      <td style="text-align: center">div</td>
    </tr>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">a % b</td>
      <td style="text-align: center">mod(1.1부터 rem)</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">a + b</td>
      <td style="text-align: center">plus</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">a - b</td>
      <td style="text-align: center">minus</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>더 많은 연산자에 대한 메서드는 <strong><a href="https://kotlinlang.org/docs/operator-overloading.html#unary-prefix-operators">공식문서</a></strong> 참고</li>
</ul>

<h3 id="get-메서드에-대한-관례-indexed-access-operator">get 메서드에 대한 관례 Indexed access operator</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">names</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="s">"am"</span><span class="p">,</span> <span class="s">"mazzi"</span><span class="p">)</span>
<span class="n">names</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="m">0</span><span class="p">)</span>
<span class="n">names</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>get이 아닌 인덱스로 접근한다.</li>
</ul>

<h3 id="람다를-괄호-밖으로-빼내는-관례-passing-a-lambda-to-the-last-parameter">람다를 괄호 밖으로 빼내는 관례 Passing a lambda to the last parameter</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">check</span><span class="p">(</span><span class="k">false</span><span class="p">)</span> <span class="p">{</span> <span class="s">"Check failed."</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="수신-객체-지정-람다-lambda-with-receiver">수신 객체 지정 람다 Lambda with receiver</h3>

<ul>
  <li>람다 함수를 쓸 때 내가 자주 쓰고싶은 객체를 미리 지정해서 사용하는 람다</li>
</ul>

<h4 id="수신-객체">수신 객체?</h4>

<ul>
  <li>확장 함수에서의 this는 확장된 클래스의 객체</li>
  <li>즉 확장 함수를 사용하는 그 객체를 의미하는데 이 객체가 바로 수신 객체</li>
</ul>

<h4 id="with">with</h4>

<ul>
  <li>첫 번째 인자로 받은 객체를 두 번째 인자로 받은 람다의 수신 객체로 만듦</li>
</ul>

<p><strong>with를 사용하지 않을 경우</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">result</code> 의 중복이 발생</li>
</ul>

<h4 id="with를-사용한-경우">with를 사용한 경우</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">stringBuilder</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">with</span><span class="p">(</span><span class="n">stringBuilder</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="k">this</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\n amazzi~~~!"</span><span class="p">)</span>
        <span class="k">this</span><span class="p">.</span><span class="n">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 불필요한 stringBuilder 변수를 없애면 alpabet 함수가 식의 결과를 바로 반환하게 된다.
// 람다 식의 본문에 있는 마지막 식의 값을 반환
</span><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">=</span> <span class="n">with</span><span class="p">(</span><span class="n">StringBuilder</span><span class="p">())</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
        <span class="n">toString</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>with(stringBuilder, { … }) 와 같은 람다 함수</li>
</ul>

<h4 id="apply">apply</h4>

<ul>
  <li>with와 유사</li>
  <li>유일한 차이는 항상 자신에게 전달된 객체를 반환</li>
  <li>객체의 인스턴스를 만들면서 즉시 프로퍼티 중 일부를 초기화해야되는 경우 유용</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">alphabet</span><span class="p">():</span> <span class="n">String</span> <span class="p">=</span> <span class="n">StringBuilder</span><span class="p">().</span><span class="n">apply</span> <span class="p">{</span>
    	<span class="k">for</span> <span class="p">(</span><span class="n">letter</span> <span class="k">in</span> <span class="sc">'A'</span><span class="o">..</span><span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
    		<span class="n">append</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    	<span class="p">}</span>
        <span class="n">append</span><span class="p">(</span><span class="s">"\nNow I know this alphabet!"</span><span class="p">)</span>
    <span class="p">}.</span><span class="n">toString</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="초기화를-지연하는-방법">초기화를 지연하는 방법</h3>

<ul>
  <li>코틀린에서는 변수 선언을 먼저하고, 초기회는 뒤로 미루는 기능들을 제공</li>
  <li>사용할지 모른는 데이터를 미리 초기화할 필요가 없어 성능 향상에 도움</li>
</ul>

<h4 id="lateinit">lateInit</h4>

<ul>
  <li>필요할 때 초기화하고 사용</li>
  <li>초기화 하지 않고 사용하면 예외 발생</li>
  <li><code class="highlighter-rouge">var</code> 에만 사용 가능</li>
  <li>원시 타입에는 적용할 수 없음</li>
  <li>custom getter/setter 사용 불가</li>
  <li>non-null 프로퍼티만 사용 가능</li>
</ul>

<h4 id="lazy">lazy</h4>

<ul>
  <li>변수를 선언할 때 초기화 코드도 함께 정의</li>
  <li>변수가 사용될 때 초기화 코드도 동작하여 변수가 초기화 됨</li>
</ul>

<hr />

<h2 id="0602-코드리뷰">0602 코드리뷰</h2>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">enum</span> <span class="kd">class</span> <span class="nc">Symbol</span><span class="p">(</span><span class="kd">val</span> <span class="py">symbol</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DIAMOND</span><span class="p">(</span><span class="s">"다이아몬드"</span><span class="p">),</span>
    <span class="n">SPADE</span><span class="p">(</span><span class="s">"스페이드"</span><span class="p">),</span>
    <span class="n">HEART</span><span class="p">(</span><span class="s">"하트"</span><span class="p">),</span>
    <span class="n">CLOVER</span><span class="p">(</span><span class="s">"클로버"</span><span class="p">),</span>
  <span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>1.4부터 <code class="highlighter-rouge">,</code> 로 끝나도 컴파일 에러가 안남</li>
</ul>

<h3 id="property와-field">Property와 Field</h3>

<h4 id="field">Field</h4>

<ul>
  <li>단순히 값만 가짐</li>
  <li>값을 가져오거나 변경할 때는 직접 참조</li>
  <li>함수나 블록 내부에 선언된 지역 변수는 모두 필드로 간주</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">count</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 메모리가 할당되고 값이 저장됨
</span><span class="n">println</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="c1">// count 변수값을 직접 참조하여 가져옴
</span><span class="n">count</span> <span class="p">+=</span> <span class="m">200</span> <span class="c1">// count 변수값을 직접 변경
</span></code></pre></div></div>

<h4 id="property">Property</h4>

<ul>
  <li>최상위 변수(함수나 클래스 외부에 정의됨)나 클래스의 멤버 변수로 선언됨</li>
  <li>선언 시 해당 속성의 getter/ setter가 자동으로 생성됨</li>
  <li><code class="highlighter-rouge">val</code> 로 선언시 getter 만 생성됨</li>
  <li>값을 가지지만 속성의 값을 가져오거나 변경할 때는 자동으로 관련 함수가 호출됨
    <ul>
      <li>이를 <strong>접근자</strong> 라고 함</li>
    </ul>
  </li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">count</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 메모리가 할당되고 값이 저장됨
</span><span class="n">println</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="c1">// count 속성의 접근자가 호출되어 속성값을 반환
</span><span class="n">count</span> <span class="p">+=</span> <span class="m">200</span> <span class="c1">// count 속성의 접근자가 호출되어 속성값을 변환
</span></code></pre></div></div>

<p><strong>엥 근데 필드와 동일하게 코드를 작성하는데? 🤔</strong></p>

<ul>
  <li>프로그래머가 보는 관점에서는 같지만, 코틀린 컴파일러는 다르게 동작함</li>
  <li>다음과 같이 count  속성의 접근자를 자동으로 생성</li>
  <li>count 속성의 값을 가져오거나 변경할 때 자동으로 호출 됨</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">couhnt</span> <span class="p">=</span> <span class="m">100</span>
	<span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">field</span>
	<span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">get()</code> 과 <code class="highlighter-rouge">set()</code> 이 접근자</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Array</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="n">pro1</span> <span class="p">+=</span> <span class="n">pro2</span>
  <span class="n">println</span><span class="p">(</span><span class="n">pro1</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="py">pro1</span> <span class="p">=</span> <span class="m">100</span> <span class="c1">// 최상위 수준의 변수이므로 속성임
</span><span class="kd">var</span> <span class="py">pro2</span> <span class="p">=</span> <span class="m">200</span> <span class="c1">// 최상위 수준의 변수이므로 속성임
</span></code></pre></div></div>

<ul>
  <li>pro2의 게터가 호출되어 값을 가져옴</li>
  <li>pro1의 게터에서 반환된 값과 더함</li>
  <li>이 값이 pro1의 세터의 인자로 전달되어 pro1의 값이 변경됨</li>
  <li>pro1 게터에서 반환된 값을 출력</li>
</ul>

<p>프로퍼티에 <code class="highlighter-rouge">=</code> 을 이용해서 할당하는거랑 get을 사용해서</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">shouldDraw</span>  <span class="p">=</span> <span class="n">cards</span><span class="p">.</span><span class="n">score</span><span class="p">()</span>
<span class="kd">val</span> <span class="py">shouldDraw2</span> <span class="p">:</span> <span class="n">Boolean</span>
<span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">cards</span><span class="p">.</span><span class="n">scroe</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>get을 쓰는 것은 매번 돌때마다 계산이 됨</li>
  <li>프로퍼티에 접근은 계산되어 있는 값을 씀</li>
</ul>

<h3 id="backing-fields">Backing fields﻿</h3>

<ul>
  <li>커스텀 getter와 setter를 제공할 경우 사용</li>
  <li>속성이 필드의 값을 필요로 할 때 코틀린은 지원 필드 키워드를 제공</li>
  <li>getter와 setter 범위에서만 사용 가능</li>
  <li><code class="highlighter-rouge">field</code> 지시자를 통해 속성의 게터나 세터에서 사용</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">0</span> <span class="c1">// the initializer assigns the backing field directly
</span>    <span class="k">set</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
            <span class="n">field</span> <span class="p">=</span> <span class="n">value</span>
            <span class="c1">// counter = value // ERROR StackOverflow: Using actual name 'counter' would make setter recursive
</span>    <span class="p">}</span>
</code></pre></div></div>

<p>아래 예제의 <code class="highlighter-rouge">this</code>는 backing field가 아님</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">isEmpty</span><span class="p">:</span> <span class="n">Boolean</span>
    <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">size</span> <span class="p">==</span> <span class="m">0</span>
</code></pre></div></div>

<h3 id="backing-properties">Backing properties﻿</h3>

<ul>
  <li>Backing fields﻿의 체계에 맞지 않는 작업을 수행할 경우 이는 Backing properties﻿가 됨</li>
</ul>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Skills</span><span class="p">(</span><span class="n">skills</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">_skills</span><span class="p">:</span> <span class="n">MutableList</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">=</span> <span class="n">skills</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span>
    <span class="kd">val</span> <span class="py">skills</span><span class="p">:</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span>
        <span class="k">get</span><span class="p">()</span> <span class="p">=</span> <span class="n">_skills</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">soft</span><span class="p">(</span><span class="n">soft</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_skills</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">soft</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">hard</span><span class="p">(</span><span class="n">hard</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_skills</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">hard</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="as-키워드-사용해도-되나여"><code class="highlighter-rouge">as</code> 키워드 사용해도 되나여?</h3>

<ul>
  <li><code class="highlighter-rouge">val results = resultBoard.values as List&lt;GameResult&gt;</code></li>
  <li>자바의 타입 변환과 같은 것</li>
</ul>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://itandhumanities.tistory.com/28">코틀린 수신 객체 지정 람다 : with와 apply</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Configuration 강의</title>
	  <link>//spring-configuration-lec</link>
	  <author></author>
	  <pubDate>2021-05-25T19:18:00+09:00</pubDate>
	  <guid>//spring-configuration-lec</guid>
	  <description><![CDATA[
	     <h2 id="배경-지식-강의">배경 지식 강의</h2>

<p>스프링 컨테이너와 스프링빈</p>

<h3 id="컨테이너">컨테이너</h3>

<p>스프링 컨테이너에 빈을 등록하기 위해서는 Configuration이 필요하다.</p>

<ul>
  <li>XML</li>
  <li>Annotation 기반의 configuration</li>
  <li>java bean  configuration</li>
</ul>

<h3 id="xml로-configuration-설정하는-예시">XML로 Configuration 설정하는 예시</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userRepository"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserRepository"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userRepository"</span> <span class="na">ref=</span><span class="s">"userRepository"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<ul>
  <li>userRepository와 userService를 빈으로 등록함</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application-config.xml"</span><span class="o">);</span>

<span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">ClassPathXmlApplicationContext</code>로 해당 XML파일을 로드해온다.</li>
  <li><code class="highlighter-rouge">getBeanDefinitionNames()</code> : 등록된 빈이름을 가져온다.</li>
</ul>

<h3 id="java-bean-configuration">java bean configuration</h3>

<h4 id="학습-테스트-코드">학습 테스트 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JavaConfigTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">javaConfig</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

        <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">authService</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>HelloApplication 클래스를 기반으로 빈 등록을 할 것이다.</li>
</ul>

<h4 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="o">{</span>

    <span class="c1">// AuthService 빈을 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthService</span> <span class="nf">authService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthService</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// AuthenticationPrincipalArgumentResolver를 빈 등록하고 authService에 대한 의존성을 주입하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">authenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Configuration</code> : 메타 데이터를 설정할 수 있는 클래스가 된다.</li>
  <li><code class="highlighter-rouge"> @Bean</code> 과 특정 객체를 반환하는 메서드로 해당 객체를 빈으로 등록할 수 있다.</li>
  <li>빈들의 의존성 또한 직접 맺어줄 수 있다.</li>
</ul>

<p><strong>@Configuration 클래스도 빈 등록이 되나요?</strong></p>

<p>🙆‍♀️</p>

<p><strong>@Configuration 클래스의 메서드 순서와 빈 등록 순서는 상관이 없나요?</strong></p>

<p>🙆‍♀️</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">useSpringBean</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// 싱글톤 // new AuthService()이니까</span>
    <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthenticationPrincipalArgumentResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">resolver</span><span class="o">.</span><span class="na">getAuthService</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>resolver에 있는 AuthService 객체와 빈으로 등록된 AuthService가 같은 객체인가?</strong></p>

<p>🙆‍♀️</p>

<hr />

<h2 id="외부-파일의-값을-이용하기">외부 파일의 값을 이용하기</h2>

<h3 id="properties-파일-접근">properties 파일 접근</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PropertySourceConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PropertySourceConfig</span><span class="o">(</span><span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">env</span> <span class="o">=</span> <span class="n">env</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// application.properties의 security-jwt-token-secret-key 값을 활용하여 JwtTokenKeyProvider를 빈으로 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">JwtTokenKeyProvider</span> <span class="nf">jwtTokenKeyProvider</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JwtTokenKeyProvider</span><span class="o">(</span><span class="s">"security-jwt-token-secret-key"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Environment 라는 필드가 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">key</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">PropertySourceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">JwtTokenKeyProvider</span> <span class="n">jwtTokenKeyProvider</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JwtTokenKeyProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jwtTokenKeyProvider</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.ih1aovtQShabQ7l0cINw4k1fagApg3qLWiB8Kt59Lno"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">PropertySourceConfig</code> 클래스로 컨텍스트를 만든다.</li>
  <li>사실 이 properties를 객체로 만들어 접근할 수도 있다.</li>
</ul>

<h3 id="value-주입">@Value 주입</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴포넌트 스캔을 통한 빈 등록</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenExpireProvider</span> <span class="o">{</span>
    <span class="c1">// application.properties의 security-jwt-token-expire-length 값을 활용하여 validityInMilliseconds값 초기화 하기</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtTokenExpireProvider</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${security-jwt-token-expire-length}"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">validityInMilliseconds</span> <span class="o">=</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getValidityInMilliseconds</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="c1">// nextstep.helloworld.core.environment 내에 있는 스프링 빈을 스캔하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"nextstep.helloworld.core.environment"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>환경에 따라 properties 설정이 가능한가요?</strong></p>

<p>🙆‍♀️ 환경에 맞게 deploy하기 - profile</p>

<hr />

<h2 id="스프링-컨테이너-설정-방법-히스토리">스프링 컨테이너 설정 방법 히스토리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/55f6f1f7-1e78-4099-814c-d884510efb89/image.png" style="zoom:67%;" /></p>

<p>컨테이너 설정을 할 때는 메타정보를 통해 이루어진다.</p>

<p>맨 처음에는 <strong>XML기반</strong>으로 진행되었다.<br />
이러면 프로덕션 코드와 의존 관계, 빈 등록 정보를 분리할 수 있었다.</p>

<p>이후 <strong>어노테이션 기반</strong>이 등장하면서 XML과 혼용하여 사용하였다.<br />
등록할 빈들을 어노테이션으로 관리하였다.</p>

<p>Spring 3.0부터는 <strong>Java Bean 기반</strong>으로 이루어졌다.<br />
XML로 관리하던 내용들을 Bean 등록을 통해 관리하였다.</p>

<hr />

<h3 id="auto-configuration">Auto Configuration?</h3>

<ul>
  <li><strong>jar dependency 기반</strong>으로 스프링 애플리케이션을 자동으로 설정해준다.</li>
</ul>

<p>별다른 설정을 하지 않았는데도, DB 등에 관련한 것들을 마음 껏 쓸 수 있었다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/01ebb7bc-6306-49f3-9b00-5f4e9e62682e/image.png" style="zoom:67%;" /></p>

<p>그 이유는 <code class="highlighter-rouge">@SpringBootApplication</code> 에 있는 <code class="highlighter-rouge">@EnableAutoConfiguration</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2b3a167-8bab-45e0-ae77-20ac1ee0521e/image.png" style="zoom:33%;" /></p>

<p>컨텍스트를 로드하면 이정도의 AutoConfiguration들이 등록된다.</p>

<p>ex) jdbcTemplate을 생성해주지 않았는데도 자동으로 주입된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a4b8b58e-311e-4c72-8f15-8f3c3287666d/image.png" style="zoom:50%;" /></p>

<p><strong>빈으로 등록되지 않은 클래스를 사용하면 컴파일 에러가 떠야하는데 나지 않는 이유는?</strong></p>

<p><code class="highlighter-rouge">@ConditionalOnClass</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a24ebfbc-d8dd-4cca-9e92-07163b4e6e85/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DataSource, JdbcTemplate이 로드가 되면 동작한다.</li>
</ul>

<h4 id="h2consoleautoconfiguration">H2ConsoleAutoConfiguration</h4>

<p>h2 DB설정을 해주지 않았는데도 h2와 관련된 설정이 자동으로 된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/95850513-5786-4b7a-b2e0-efc5d5680cf2/image.png" style="zoom:67%;" /></p>

<p>이것도 이미 등록되어있기 때문에 가능하다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Kotlin을 정복해봅시다 1</title>
	  <link>//kotlin1</link>
	  <author></author>
	  <pubDate>2021-05-16T19:18:00+09:00</pubDate>
	  <guid>//kotlin1</guid>
	  <description><![CDATA[
	     <h2 id="코틀린이란">코틀린이란?</h2>

<ul>
  <li>자바 플랫폼에서 돌아가는 새로운 프로그래밍 언어</li>
  <li>간결하고 실용적</li>
  <li>자바 코드와의 상호 운용성을 중시</li>
  <li>코틀린 컴파일러가 생성한 바이트코드는 일반적인 자바 코드와 똑같이 효율적으로 실행</li>
</ul>

<h3 id="정적-타입-지정-언어">정적 타입 지정 언어</h3>

<p>정적 타입 지정이란 모든 프로그램 구성 요소의 타입을 컴파일 시점에 알 수 있다.<br />
프로그램 안에서 객체의 필드나 메서드를 사용할 때마다 컴파일러가 타입을 검증해준다.</p>

<p>코틀린은 타입추론을 지원하여 개발자가 타입 선언해야하는 불편함이 줄어든다.<br />
매개 변수 이름 뒤에 매개 변수의 자료형을 쓴다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="n">val</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//(.)\n(.*)"</span><span class="o">)</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">FIRST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"//"</span>
<span class="kd">private</span> <span class="kd">const</span> <span class="n">val</span> <span class="n">LAST_TARGET_STRING</span> <span class="o">=</span> <span class="s">"\n"</span>
</code></pre></div></div>

<h3 id="변수-선언">변수 선언</h3>

<ul>
  <li>val : 값이 변경되지 않는 변수</li>
  <li>var : 값이 변경될 수 있는 변수</li>
</ul>

<h4 id="블록이-본문인-함수">블록이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="식이-본문인-함수">식이 본문인 함수</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">max</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span> <span class="k">else</span> <span class="n">b</span>
</code></pre></div></div>

<hr />

<h2 id="코틀린-학습-테스트">코틀린 학습 테스트</h2>

<h3 id="named-arguments">named arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Crew</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="s">"아마찌"</span><span class="p">)</span>
</code></pre></div></div>

<p>Crew 객체에 name과 nickname 필드가 있을 때 생성자에 전달하는 인자만을 보고는 어떤 문자열이 어떤 역할인지 헷갈릴 수 있다.<br />
이는 함수의 시그니처를 살펴보지 않고는 알아내기 어려운데,<br />
코틀린으로 작성한 함수를 호출할 때는 가독성을 높이기 위해 전달하는 인자의 이름을 명시해줄 수 있다.  <br />
이때 인자 중 어느 하나라도 이름을 명시하면 그 뒤로 오는 모든 인자는 이름을 명시해야 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span><span class="p">(</span><span class="s">"신지혜"</span><span class="p">,</span> <span class="m">20</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">),</span>
<span class="n">Person</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="s">"신지혜"</span><span class="p">,</span> <span class="n">nickname</span> <span class="p">=</span> <span class="s">"아마찌"</span><span class="p">,</span> <span class="n">age</span> <span class="p">=</span> <span class="m">20</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="nullable-types">nullable types</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?)</span>
</code></pre></div></div>

<p>null이 될수 있는 type을 명시적으로 표시할 수 있다. <br />
type에 ?를 붙임으로서 null이 가능한 변수임을 명시적으로 표현한다.</p>

<h3 id="default-arguments">default arguments</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<p>자바는오버로딩을 하여 인자가 다른 같은 메서드를 만든다.</p>

<p>하지만 코틀린은 기본 인자를 지원하기 때문에, 1개의 메소드만 정의하여 메서드 오버로딩 기능을 한다. 
기본 인자를 설정하는 방법은, 다음과 같이 인자 이름 다음에 <code class="highlighter-rouge">인자 = 기본값</code>처럼 정의하면 된다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">add</span><span class="p">(</span><span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 메소드는 아래처럼 인자의 개수가 다르게 호출될 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>      <span class="c1">// num2 = 0 은 기본인자로 전달
</span><span class="n">add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="data-classe">data classe</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">?</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span> <span class="kd">var</span> <span class="py">nickname</span><span class="p">:</span> <span class="n">String</span><span class="p">?</span> <span class="p">=</span><span class="k">null</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>수리 피셜 데이터 클래스는 DTO다.</li>
  <li>딱히 비즈니스 로직을 갖고 있지않다.</li>
  <li>생성자부터 getter &amp; setter, 심지어 canonical methods까지 알아서 생성해준다.</li>
</ul>

<h4 id="제한-사항">제한 사항</h4>

<ul>
  <li>기본 생성자에는 최소 하나의 파라미터가 있어야 한다.</li>
  <li>기본 생성자의 파라미터는 val이나 var여야만 한다.</li>
  <li>데이터 클래스는 abstract, open, sealed, inner가 되면 안 된다.</li>
</ul>

<h4 id="-canonical-methods">🤔 Canonical Methods?</h4>

<p>캐노니컬 메소드는 Any에 선언된 메소드 (Any는 자바의 Object처럼 코틀린에서 모든 객체의 조상이 되는 객체)<br />
따라서 코틀린의 모든 인스턴스가 갖고 있는 메소드를 뜻한다.</p>

<p>코틀린의 data class는 모든 Canonical 메서드를 올바르게 구현하고 있다.</p>

<ul>
  <li><strong>equlas(other: Any?): Boolean</strong> - 이 메소드는 참조가 아니라 데이터 클래스 간 값의 일치를 비교한다.</li>
  <li><strong>hashCode(): Int</strong> - 해쉬코드는 인스턴스의 숫자 표현이다. hashCode()가 같은 인스턴스에서 여러 번 호출될 때 항상 동일한 값을 반환해야 한다. equals()로 비교할 때 참을 반환하는 두 인스턴스는 같은 hashCode()를 가져야만 한다.</li>
  <li><strong>toString(): String</strong> - 인스턴스의 문자열 표현이다. 데이터 클래스는 이를 멤버 변수의 값을 나열하도록 자동으로 재정의 한다.</li>
  <li><strong>copy()</strong> : 객체를 복사하여 새 객체 생성</li>
  <li><strong>componentsN()</strong> : 속성을 순서대로 반환</li>
</ul>

<hr />

<h2 id="2단계-문자열-계산기-구현하면서-배운-사실들">2단계 문자열 계산기 구현하면서 배운 사실들</h2>

<h3 id="메서드-정의">메서드 정의</h3>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="err">메서드명(</span><span class="nf">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="err">반환타입</span> <span class="p">{</span>
    <span class="n">retunr</span> <span class="m">2</span> <span class="p">*</span> <span class="n">x</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="unit--nothing">Unit / Nothing</h3>

<p>코틀린은 원시타입과 wrapper type을 구분하지 않는다.</p>

<h4 id="unit">Unit</h4>

<p>함수의 반환 구문이 없다는 것을 표현한다. (자바의 void에 해당).<br />
void와는 다르게 인자로도 사용할 수 있다.</p>

<h4 id="nothing">Nothing</h4>

<p>함수가 정상적으로 끝나지 않는다라는걸 명시적으로 표현한다.</p>

<h4 id="firstornull">firstOrNull</h4>

<p>컬렉션 내 첫 번째 인자를 반환한다. 단순히 리스트 내에서 첫 번째에 위치하는 인자를 반환하는 것뿐 아니라, 특정 조건을 만족하는 첫 번째 인자를 반환하도록 구성하는 것도 가능하다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">operator</span> <span class="p">=</span> <span class="n">values</span><span class="p">().</span><span class="n">firstOrNull</span> <span class="p">{</span> <span class="n">item</span> <span class="p">-&gt;</span> <span class="n">item</span><span class="p">.</span><span class="n">op</span> <span class="p">==</span> <span class="n">op</span> <span class="p">}</span>
    <span class="o">?:</span> <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">(</span><span class="s">"존재하지 않는 연산자입니다."</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="자동차-경주-피드백">자동차 경주 피드백</h2>

<h3 id="코틀린의-코딩-컨벤션">코틀린의 코딩 컨벤션</h3>

<h4 id="클래스">클래스</h4>

<ul>
  <li>프로퍼티</li>
  <li>초기화 블록</li>
  <li>부 생성자</li>
  <li>함수</li>
  <li>동반 객체</li>
</ul>

<p>순으로 작성한다.</p>

<h4 id="-ktlint-적용하기">➕ ktlint 적용하기</h4>

<p><strong>ktlint</strong>란 코틀린을 위한 정적 분석 도구로, 코틀린으로 작성한 코드의 스타일 검사와, 형식에 맞지 않는 부분을 수정하는 기능을 제공한다.</p>

<p>사용하기 위해서는 다음과 같이 플러그인을 추가해준다.</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
    <span class="n">id</span> <span class="s1">'org.jetbrains.kotlin.jvm'</span> <span class="n">version</span> <span class="s1">'1.3.72'</span>
    <span class="n">id</span> <span class="s1">'org.jmailen.kotlinter'</span> <span class="n">version</span> <span class="s2">"3.2.0"</span> <span class="c1">// 추가</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/709c90c9-2cac-4eb0-8a48-a20ec4156ed6/image.png" style="zoom:33%;" /></p>

<p>플러그인을 추가하면 gradle-Tasks-formating이 생성되는데 lintKotlin을 눌러주면 lint로 코틀린 컨벤션이 틀린 부분을 잡아준다.</p>

<h3 id="주생성자-부-생성자">주생성자, 부 생성자</h3>

<h4 id="주-생성자">주 생성자</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span>
</code></pre></div></div>

<p>클래스 이름 뒤에 오는 생성자가 바로 주 생성자이다.<br />
주 생성자는 생성자 파라미터를 지정하고, 이에 의해 초기화되는 프로퍼티를 정의하는데 사용된다.<br />
또한 주 생성자는 객체 초기화를 시작하는 유일한 곳이기 때문에 제공되는 인자들이 완전해야 한다.</p>

<p>주 생성자에는 별도의 코드를 포함시킬 수 없다.<br />
이때 코틀린은 <code class="highlighter-rouge">init</code> 키워드로 초기화 블록을 선언할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>

    <span class="n">init</span> <span class="p">{</span>
        <span class="n">require</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">length</span> <span class="p">&lt;=</span> <span class="n">MAX_NAME_LENGTH</span><span class="p">)</span> <span class="p">{</span>
            <span class="s">"자동차의 이름은 5글자를 초과할 수 없습니다."</span>
        <span class="p">}</span>
    <span class="c1">// ...
</span></code></pre></div></div>

<h4 id="부-생성자">부 생성자</h4>

<p>파라미터 목록이 다른 여러 생성자를 만들 경우 부 생성자를 둘 수 있다.<br />
부 생성자에서는 <code class="highlighter-rouge">this</code> 키워드를 사용해 주 생성자를 호출하도록 한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">constructor</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 경우보다는 <strong><code class="highlighter-rouge">default</code>키워드를 사용하여 매개변수의 기본값을 사용</strong>하자.</p>

<p><strong>주 생성자 호출 시점</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">constructor</span><span class="p">(</span><span class="n">carNUm</span> <span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">:</span> <span class="k">this</span><span class="p">(</span><span class="n">ArryaList</span><span class="p">())</span> <span class="p">{</span>
	<span class="n">createList</span><span class="p">(</span><span class="n">carName</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 부 생성자에서 주 생성자를 호출할 때 <code class="highlighter-rouge">createList()</code>가 실행되는 순서는 다음과 같다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">Cars</span><span class="p">(</span><span class="n">int</span> <span class="n">carNUm</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">(</span><span class="n">new</span> <span class="n">ArrayList</span><span class="p">())</span>
  <span class="k">this</span><span class="p">.</span><span class="n">createList</span><span class="p">(</span><span class="n">carNum</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="require-check---조건-확인-함수">require(), check() - 조건 확인 함수</h3>

<ul>
  <li>
    <p><strong>require()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalArgumentException</code> 발생</p>
  </li>
  <li>
    <p><strong>check()</strong> : 식이 참이 아닐 경우 <code class="highlighter-rouge">IllegalStateException</code> 발생</p>

    <p>위 예제처럼 <code class="highlighter-rouge">{}</code> 블록에 예외 메시지를 작성할 수도 있다.</p>
  </li>
</ul>

<h3 id="setter만-private으로---가시성-변경자">setter만 private으로 - 가시성 변경자</h3>

<p>자바를 생각하면 필드를 <code class="highlighter-rouge">private</code> 로 만들고,  getter를 통해 값을 꺼내도록 하였지만,<br />
코틀린에서는 필드를 private으로 두기보다는 setter 함수만 private으로 지정한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span><span class="p">(</span><span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="py">position</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">0</span>
        <span class="k">private</span> <span class="k">set</span>
<span class="p">}</span>
</code></pre></div></div>

<p>자바는 필드 기반  언어인데 코틀린은 프로퍼티 기반 언어이다.<br />
팁을 준다면 코틀린에서 프로퍼티에 무언가 연산이 들어간다면 함수를 만들고,<br />
값 자체만 반환한다면 위와 같이 쓰자.</p>

<h3 id="상수">상수</h3>

<p>기본 자료형의 상수는 <code class="highlighter-rouge">const val</code> 키워드로 표현한다.<br />
기본 자료형 외에는 <code class="highlighter-rouge">const</code> 키워드를 사용할 수 없다.</p>

<p>상수는 클래스 외부에다가도 선언할 수 있다.<br />
하지만 이 경우 확장자가 파일로 변경되니 사람 취향껏 하면 된다.</p>

<h4 id="companion-object---동반-객체">companion object - 동반 객체</h4>

<p>코틀린에서는 <code class="highlighter-rouge">static</code> 키워드가 없는데, 이 대신 사용할 수 있는 것이 companion object 이다.<br />
이는 객체이며, <code class="highlighter-rouge">companion object</code> 내에 선언된 속성과 함수는 <code class="highlighter-rouge">{클래스 이름}.{필드/함수 이름}</code> 형태로 바로 호출할 수 있다.  <br />
클래스의 맨 하단에 작성한다.</p>

<h4 id="jvmstatic">@JvmStatic</h4>

<p><code class="highlighter-rouge">ompanion object</code>를 사용하여 구성한 코드를 자바에서 사용하려면 속성 및 함수가 자바의 필드/메서드로 해석되도록 알려주어야 한다.</p>

<p><code class="highlighter-rouge">const</code> 선언이 되어 있는 프로퍼티는 별도의 처리 없이 자바에서도 사용 가능하며, 
함수는 <code class="highlighter-rouge">@JvmStatic</code> 어노테이션을 사용하여 자바에서 정적 메서드로 사용할 수 있게 한다.</p>

<h4 id="jvmfield">@JvmField</h4>

<p><code class="highlighter-rouge">const</code> 키워드는 기본 자료형에만 사용이 가능하다.<br />
이외의 타입 객체를 자바에서 정적 필드처럼 사용하려면 <code class="highlighter-rouge">@JvmField</code> 어노테이션을 사용해야 한다.</p>

<h3 id="utility-클래스">Utility 클래스</h3>

<p>자바에서는 모든 메서드를 클래스 내부에 작성해야했지만, 코틀린에서는 그럴 필요가 없다.<br />
필요한 유틸리티 메서드만 모아놓은 파일만을 만들고 이를 파일 최상위에 위치시키면 된다.</p>

<h3 id="스마트-캐스트">스마트 캐스트</h3>

<p>코틀린에서는 컴파일러가 대신 캐스팅을 해준다.<br />
원하는 타입을 검사하고 나면, 개발자가 변수를 원하는 타입으로 캐스팅하지 않아도 해당 변수가 원하는 타입으로 선언된 것처럼 사용할 수 있다.<br />
이는 컴파일러가 캐스팅을 수행해주어 가능한 일이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="n">String</span><span class="p">?):</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">isNullOrBlank</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="n">IllegalArgumentException</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kd">val</span> <span class="py">tokens</span> <span class="p">=</span> <span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
    <span class="c1">// ...
</span><span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="코드-리뷰-중-짤막한-배움">코드 리뷰 중 짤막한 배움</h2>

<h4 id="maxby">maxBy{}</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">findMaxPosition</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">maxBy</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">position</span> <span class="p">}</span><span class="o">!!</span><span class="p">.</span><span class="n">position</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>가장 큰 원소를 찾기 위해 비교에 사용할 값을 인자로 받는다. <br />
모든 컬렉션에 대해 maxBy 함수를 호출할 수 있다.</p>

<p><code class="highlighter-rouge">{ it.position }</code> 는 비교에 사용할 값을 돌려주는 함수이다.<br />
<code class="highlighter-rouge">maxBy{}</code> 의 반환 값은 nullable인데, 반환된 값의 프로퍼티를 사용하고 싶은 경우 <code class="highlighter-rouge">!!</code> 키워드를 통해 null이 아님을 선언하여 꺼낸다.</p>

<p><strong>참고</strong></p>

<p><code class="highlighter-rouge">?:</code>(엘비스 오퍼레이터 ) : null인 경우 설정한 default 값을 넣는다.</p>

<h4 id="pair">Pair</h4>

<p>Kotlin에서 제공하는 객체 타입 중 연관 타입끼리 관계가 없어도 2개를 쌍으로 가지고 있는 객체</p>

<p><strong>getter</strong>는 <strong>.first  .second</strong> 또는 <strong>.component1() / .component2()</strong>로 접근할 수 있다.</p>

<p><strong>RacingCar 일부</strong></p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">race</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">:</span> <span class="n">MoveStrategy</span><span class="p">):</span> <span class="n">Pair</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">carsGroup</span> <span class="p">=</span> <span class="n">arrayListOf</span><span class="p">&lt;</span><span class="n">Cars</span><span class="p">&gt;()</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">0</span> <span class="n">until</span> <span class="n">tryNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">cars</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">.</span><span class="n">moveAll</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span>
        <span class="n">carsGroup</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">cars</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">Pair</span><span class="p">(</span><span class="n">carsGroup</span><span class="p">,</span> <span class="n">findWinners</span><span class="p">())</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">fun</span> <span class="nf">findWinners</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">maxPosition</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">findMaxPosition</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">cars</span><span class="p">.</span><span class="n">findCarsBySamePosition</span><span class="p">(</span><span class="n">maxPosition</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="과-">==과 ===</h4>

<ul>
  <li>
    <p><code class="highlighter-rouge">==</code> 연산자는 자바의 equal와 같다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">===</code> 연산자는 자바의 <code class="highlighter-rouge">==</code>와 같다.</p>
  </li>
</ul>

<h4 id="list-mutablelist">List, MutableList</h4>

<p>코틀린에서는 읽기 전용 리스트(List)와 수정할 수 있는 리스트(MutableList)가 있다.<br />
<code class="highlighter-rouge">arrayListOf()</code> 를 쓰기보다는 코틀린이 제공하는 List 또는 MutableList를 사용하자</p>

<p><strong>List</strong></p>

<p>데이터를 읽기만 가능하고 리스트를 선언할 때 넣은 데이터들을 수정, 삭제, 변경할 수 없다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">cars</span> <span class="p">=</span> <span class="n">listOf</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">),</span> <span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span>

<span class="n">println</span><span class="p">(</span><span class="n">cars</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span>
<span class="n">cars</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span> <span class="c1">// X 컴파일에러
</span><span class="n">cars</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>   <span class="c1">// X 컴파일에러
</span></code></pre></div></div>

<p><strong>MutableList</strong></p>

<p>기존 자바에서 사용하던 ArrayList와 유사하므로 ArrayList의 함수들을 모두 사용할 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> <span class="c1">// O
</span><span class="n">carsMutable</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c1">// O
</span><span class="n">println</span><span class="p">(</span><span class="n">carsMutable</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="c1">// O
</span></code></pre></div></div>

<p>List와 MutalbeList 서로의 타입으로 변경도 가능하다. 이 때 서로 새로운 리스트를 반환한다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="py">carsMutable</span> <span class="p">=</span> <span class="n">mutableListOf</span><span class="p">&lt;</span><span class="n">Car</span><span class="p">&gt;()</span>
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"ama"</span><span class="p">))</span> 
<span class="n">carsMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"mazzi"</span><span class="p">))</span> 

<span class="kd">var</span> <span class="py">arrNotMutable</span> <span class="p">=</span> <span class="n">carsMutable</span><span class="p">.</span><span class="n">toList</span><span class="p">()</span> <span class="c1">//mutable -&gt; list 변경
</span>
<span class="kd">var</span> <span class="py">arrReMutable</span> <span class="p">=</span> <span class="n">arrNotMutable</span><span class="p">.</span><span class="n">toMutableList</span><span class="p">()</span> <span class="c1">// list -&gt; mutable 변경
</span><span class="n">arrReMutable</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Car</span><span class="p">(</span><span class="s">"new"</span><span class="p">))</span>
<span class="n">println</span><span class="p">(</span><span class="n">arrReMutable</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="assertthrows">assertThrows</h4>

<p>자바처럼 <code class="highlighter-rouge">assertThatThrownBy</code> 를 쓰지 말고 아래와 같이 쓰자.<br />
이유는 <code class="highlighter-rouge">assertThatThrownBy</code> 를 사용할 경우 <code class="highlighter-rouge">isInstanceOf()</code> 를 사용하는데 여기에는 <code class="highlighter-rouge">.java.class</code> 를 붙여주어야 해 코틀린 스럽지 못하기 때문이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">IllegalArgumentException</span><span class="p">&gt;</span> <span class="p">{</span><span class="n">Car</span><span class="p">(</span><span class="n">name</span> <span class="p">=</span> <span class="n">input</span><span class="p">)}</span>
</code></pre></div></div>

<h4 id="object">object</h4>

<p>클래스를 만듦과 동시에 인스턴스로 만든다. (싱글턴)</p>

<h4 id="람다-작성">람다 작성</h4>

<p>코틀린은 람다식을 작성할 때 <code class="highlighter-rouge">{}</code>로 표현한다. <br />
람다의 인자가 하나라면 람다식 내부에서 <code class="highlighter-rouge">it</code>으로 받을 수 있다.<br />
함수의 인자로 람다가 넘어올 때, 맨 마지막 순번이라면 <code class="highlighter-rouge">()</code> 밖에 쓸 수 있다.<br />
만약 람다 하나만 받는 거라면 <code class="highlighter-rouge">()</code>를 생략할 수 있겠죠?</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">newCars</span> <span class="p">=</span> <span class="n">cars</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">moveStrategy</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div></div>

<h4 id="associate"><code class="highlighter-rouge">associate{}</code></h4>

<p>map을 기본적으로 반환한다.</p>

<h4 id="input을-재귀적으로">Input을 재귀적으로</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">tailrec</span> <span class="k">fun</span> <span class="nf">inputCarNames</span><span class="p">():</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="n">println</span><span class="p">(</span><span class="s">"경주할 자동차 이름을 입력하세요(이름은 쉼표(,)를 기준으로 구분)."</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">readLine</span><span class="p">()</span><span class="o">?.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span><span class="o">?.</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span> <span class="o">?:</span> <span class="n">inputCarNames</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">tailrec</span> <span class="k">fun</span> <span class="nf">inputTryNumber</span><span class="p">():</span> <span class="n">Int</span> <span class="p">{</span>
    <span class="n">println</span><span class="p">(</span><span class="s">"시도할 횟수는 몇 회인가요?"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">readLine</span><span class="p">()</span><span class="o">?.</span><span class="n">toIntOrNull</span><span class="p">()</span> <span class="o">?:</span> <span class="n">inputTryNumber</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><strong><code class="highlighter-rouge">tailrec</code></strong> : 꼬리재귀(tail recursive)라는 의미로, 추가적인 연산이 없이 자신 스스로 재귀적으로 호출하다가 어떤 값을 리턴하는 함수
    <ul>
      <li>해당 키워드를 붙이면 재귀적인 함수 호출의 최적화가(?) 일어남</li>
    </ul>
  </li>
</ul>

<h4 id="중위-함수-to-키워드">중위 함수 (to 키워드)</h4>

<ul>
  <li><strong>중위 표현법</strong> : 변수와 변수사이에 함수를 넣어 연산자 처럼 사용하는 것</li>
</ul>

<p><strong>조건</strong></p>

<ul>
  <li>멤버 메서드 또는 확장 함수여야 함</li>
  <li>하나의 매개변수를 가져야함</li>
  <li><strong>infix</strong> 키워드를 사용하여 정의</li>
</ul>

<p><strong>ex) Pair 객체를 생성할 때 to</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/7377057b-c283-4102-8e00-d704ae58d308/image.png" style="zoom:33%;" /></p>

<h4 id="by-키워드">by 키워드</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/da1ab914-04bb-4128-ae3d-3393fa9ec579/image.png" style="zoom:33%;" /></p>

<p>위 코드에서 Car의 일급 컬렉션인 Cars를 순회할 때 현재는 <code class="highlighter-rouge">List&lt;Car&gt;</code>에 접근하여 순회하고 있다.<br />
하지만 코틀린에서는 다음과 같이 변경할 수 있다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4ed5d81e-1003-4aaa-aead-6cfe5f7cc4df/image.png" style="zoom:33%;" /></p>

<p>위와 같이 cars 일급 컬렉션을 바로 순회할 수 있는 이유는 Cars가 다음과 같이 <code class="highlighter-rouge">List&lt;Car&gt;</code> 인터페이스를 구현하고 있기 때문이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4ebb7070-a1b5-4d4b-a5b7-0d2c56524246/image.png" style="zoom:33%;" /></p>

<p>뭐야 완전 신기해….  <br />
제이슨이 일단 지금은 “와 뭐야” 이정도까지만 알아두어도 된다고 하였다.<br />
코틀린 짱</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 4. MVC 프레임워크 만들기</title>
	  <link>//spring-mvc-4</link>
	  <author></author>
	  <pubDate>2021-05-04T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-4</guid>
	  <description><![CDATA[
	     <h2 id="mvc-프레임워크-만들기">MVC 프레임워크 만들기</h2>

<h2 id="프론트-컨트롤러-패턴">프론트 컨트롤러 패턴</h2>

<p>프론트 컨트롤러도 서블릿이다.<br />
요청을 모두 받고 요청에 맞는 컨트롤러를 호출한다.</p>

<h3 id="특징">특징</h3>

<p>프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받고, 요청에 맞는 컨트롤러를 찾아서 호출한다.<br />
입구를 하나로 묶는다.<br />
프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.</p>

<h3 id="스프링-웹-mvc와-프론트-컨트롤러">스프링 웹 MVC와 프론트 컨트롤러</h3>

<p>스프링 웹 MVC의 핵심도 바로 FrontController이다. (DispatcherServlet이 프론트 컨트롤러 패턴으로 되어있다.)</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2493682-0c37-4a1c-93c4-f2ffd02e7862/image.png" style="zoom: 67%;" /></p>

<p>ControllerV1을 인터페이스로 만들고 이를 구현한 Controller들을 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV1</span> <span class="kd">implements</span> <span class="n">ControllerV1</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="frontcontrollerservletv1">FrontControllerServletV1</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV1"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v1/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV1</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV1</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV1</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Controller 정보를 가진 서블릿인 FrontContoller를 구현한다.</p>

<ul>
  <li><strong>urlPatterns</strong> :  “/front-controller/v1/”를 포함한 하위 모든 요청을 하나의 서블릿에서 받아들인다.</li>
  <li><strong>controllerMap</strong> : key-매핑 URL, value-호출될 컨트롤러</li>
  <li><strong>service()</strong> : reqeustURI를 조회하여 실제 호출할 컨트롤러를 찾고 해당 컨트롤러를 실행(<code class="highlighter-rouge">process()</code>)한다.</li>
</ul>

<p>여러 Controller와 서블릿이 하나의 JSP를 재사용하고 있다.</p>

<hr />

<h2 id="view-분리">View 분리</h2>

<p>Controller에서 View로 이동하는 부분이 중복된다.<br />
Controller는 MyView만 반환해주면 된다.</p>

<h4 id="controllerv2">ControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV2</span> <span class="o">{</span>
    <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스를 구현하므로 반환 타입을 맞출 수 있다.</li>
</ul>

<h4 id="myview">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewPath</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewPath</span> <span class="o">=</span> <span class="n">viewPath</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="memberformcontrollerv2">MemberFormControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV2</span> <span class="kd">implements</span> <span class="n">ControllerV2</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>viewPath를 가지고 있는 MyView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv2">FrontControllerServletV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV2"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV2</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV2</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV2</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="model-추가">Model 추가</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9a6ede47-f242-4b1f-a88e-08f055df0508/image.png" style="zoom:67%;" /></p>

<h3 id="서블릿-종속성-추가">서블릿 종속성 추가</h3>

<p>컨트롤러 입장에서 <code class="highlighter-rouge">HttpServletRequest</code>, <code class="highlighter-rouge">HttpServletResponse</code>가 필요하지 않다.<br />
요청 파라미터를 Map으로 넘기면 컨트롤러가 서블릿이 아니어도 동작할 수 있다.</p>

<h3 id="뷰-이름-중복-제거">뷰 이름 중복 제거</h3>

<p>현재 컨트롤러에서 지정하는 뷰 이름에는 중복(<code class="highlighter-rouge">/WEB-INF/views/</code>)이 존재한다.<br />
컨트롤러는 뷰의 논리 이름을 반환하고, 물리 이름은 프론트 컨트롤러에서 처리하도록 변경해보자.<br />
논리적 물리적 이름을 구분하면 나중에 변경할 때 컨트롤러를 변경할 일이 없다.</p>

<h3 id="modelview">ModelView</h3>

<p>Model을 전달하기 위해서 <code class="highlighter-rouge">request.setAttribute()</code> 를 사용하여 데이터를 저장하고 뷰에 전달했다.<br />
서블릿의 종속성을 제거하기 위해, Model을 따로 만들고 View 이름까지 전달하는 객체를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">ModelView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewName</span> <span class="o">=</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controllerv3">ControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV3</span> <span class="o">{</span>
    <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>ModelView를 반환하도록 한다.</li>
</ul>

<h4 id="membersavecontrollerv3">MemberSaveControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV3</span> <span class="kd">implements</span> <span class="n">ControllerV3</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="s">"save-result"</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>논리 이름을 ModelView 객체에 넣어 생성하도록 한다.</li>
  <li>모델에 뷰에 필요한 객체를 담고 ModelView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv3-일부">FrontControllerServletV3 일부</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">createParamMap()</code> : HttpServletRequest의 파라미터 정보를 Map으로 변경한다.</li>
  <li><code class="highlighter-rouge">viewResolver()</code> : 컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.</li>
  <li><code class="highlighter-rouge">view.render(mv.getModel(), req, resp)</code> : 뷰 객체를 통해  HTML 화면을 렌더링한다.</li>
</ul>

<h4 id="myview-1">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">modelToRequestAttribute</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
    <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
    <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="단순하고-실용적인-컨트롤러">단순하고 실용적인 컨트롤러</h2>

<p>컨트롤러 인터페이스를 구현하면서 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 번거롭다.<br />
컨트롤러는 View의 이름만 변경하도록, 실용성 있도록 변경한다.</p>

<h4 id="controllerv4">ControllerV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV4</span> <span class="o">{</span>
    <span class="cm">/**
     *
     * @param paramMap
     * @param model
     * @return viewName
     */</span>

    <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>view 이름을 반환하도록 변경한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV4</span> <span class="kd">implements</span> <span class="n">ControllerV4</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"save-result"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Controller에서는 필요한 값을 꺼내고, 비즈니스 로직을 호출한 후 viewName만을 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv4">FrontControllerServletV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV4"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV4</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV4</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV4</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
      	<span class="c1">// model </span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>프론트 컨트롤러에서 model을 만들고 각 Controller에 paramMap과 model을 넘겨 처리를 하고, viewName을 반환받는다.</li>
  <li>modelView에서 model을 꺼낼 필요가 없다.</li>
</ul>

<p>하지만, 지금 ControllerV4 인터페이스로 받을 수 있는 컨트롤러를 제한하고 있다.</p>

<hr />

<h2 id="유연한-controller---어댑터-패턴">유연한 Controller - 어댑터 패턴</h2>

<p>지금까지의 프론트 컨트롤러는 한가지 인터페이스만 사용이 가능했었다. <br />
어떠한 컨트롤러도 호환이 가능하도록 어댑터 패턴을 사용한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0f169df9-469c-4e38-b61c-2cf42f872444/image.png" alt="" /></p>

<ul>
  <li>핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었다. 이 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.</li>
  <li>기존에는 프론트 컨트롤러가 바로 컨트롤러를 호출하였지만, 이제는 어댑터를 통해서 호출한다.</li>
  <li>핸들러 : 컨트롤러의 좀 더 넓은 범위. 어댑터가 있기 때문에 컨트롤러 개념 뿐만 아니라 해당하는 어댑터만 있으면 처리가 가능하다.</li>
</ul>

<h4 id="myhandleradapter">MyHandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">);</span>
    <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">supports(Object handler)</code> : 어댑터가 해당 컨트롤러를 처리할 수 있는지 반환</li>
  <li><code class="highlighter-rouge">handle(...)</code> : 어댑터는 실제 컨트롤러를 호출하고 결과로 ModelView를 반환한다.</li>
  <li>만약 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 직접 생성한다.</li>
  <li>프론트 컨트롤러가 아닌 어댑터가 실제 컨트롤러를 호출한다.</li>
</ul>

<h4 id="controllerv3handleradapter">ControllerV3HandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV3HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV3</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>supports()로 ControllerV3 타입인지 확인하고 맞다면 호출한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV5"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v5/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV5</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">handlerMappingMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MyHandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV5</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">initHandlerMappingMap</span><span class="o">();</span>
        <span class="n">initHandlerAdapters</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerMappingMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV3</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerAdapters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ControllerV3HandlerAdapter</span><span class="o">());</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// 요청 정보로 핸들러를 가져온다.</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 어댑터를 찾는다.</span>
        <span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyHandlerAdapter</span> <span class="nf">getHandlerAdapter</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">:</span> <span class="n">handlerAdapters</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">adapter</span><span class="o">.</span><span class="na">supports</span><span class="o">(</span><span class="n">handler</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">adapter</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"handler adapter를 찾을 수 없습니다. handler "</span> <span class="o">+</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 : 핸들러 매핑과 어댑터를 초기화한다.</li>
  <li>매핑 정보인 handlerMappingMap 이 Object Map으로 아무 타입이나 받을 수 있다.</li>
  <li>핸들러 매핑</li>
  <li>핸들러를 처리할 수 있는 어댑터 조회</li>
  <li>어댑터 호출</li>
</ul>

<h4 id="controllerv4handleradapter-예제">ControllerV4HandlerAdapter 예제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV4HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV4</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
      
        <span class="c1">//  viewName만 반환할 경우 ModelView 객체로 만들어주는 역할도 한다.</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>어댑터가 호출하는 ControllerV4는 viewName만 반환하는데, 이때 어댑터에서 이를 ModelView 객체로 만들어 반환한다.</li>
</ul>

<p>프론트 컨트롤러 입장에서는 핸들러 어댑터에만 의존하고 있다.</p>

<p>이 MVC 프레임 워크는 역할과 구현이 분리되어 있다.  <br />
모든 것을 인터페이스로 만들고 구현하고 싶은 부분만 주입하면 완벽! (스프링 MVC는 뷰와 뷰리졸버 다 인터페이스로 구현되어있다.)
어떤 핸들러를 추가하고 싶어도 우리는 핸들러어댑터만 구현해주면 된다!</p>

<h4 id="ex-requestmapping">ex) @RequestMapping()</h4>

<p>RequestMappingHandlerAdapter : 위 어노테이션이 붙은 핸들러를 처리해주는 어댑터</p>


	  ]]></description>
	</item>


</channel>
</rss>
