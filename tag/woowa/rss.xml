<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📋 REST API에 대하여</title>
	  <link>//restapi</link>
	  <author></author>
	  <pubDate>2021-04-21T19:18:00+09:00</pubDate>
	  <guid>//restapi</guid>
	  <description><![CDATA[
	     <h2 id="rest-api-구성">REST API 구성</h2>

<p>REST : Representational State Transfer라는 용어의 약자</p>

<ul>
  <li><strong>자원</strong> : URI</li>
  <li><strong>행위</strong> : HTTP METHOD</li>
  <li><strong>표현</strong></li>
</ul>

<hr />

<h2 id="rest-의-특징">REST 의 특징</h2>

<ul>
  <li>Uniform Interface</li>
  <li>Stateless</li>
  <li>Caching</li>
  <li>Client-Server</li>
  <li>Hierarchical system</li>
  <li>Code on demand</li>
</ul>

<hr />

<h2 id="rest-api-디자인-가이드">REST API 디자인 가이드</h2>

<p><strong>URI는 자원을 표현하는데 집중하고 행위에 대한 정의는 HTTP 메소드를 통해 나타낸다.</strong></p>

<ul>
  <li>URI는 정보의 자원을 표현해야 한다 : 리소스명은 동사보다 명사를 사용한다.</li>
  <li>자원에 대한 행위는 HTTP 메소드로 표현한다.</li>
</ul>

<p><strong>URI 설계 시 주의 사항</strong></p>

<ul>
  <li>슬래시 (/)는 계층 관계를 나타내는 데 사용한다.</li>
  <li>마지막 문자로 슬래시를 포함하지 않는다.</li>
  <li>긴 URL 경로의 가독성을 높이기 위해서 하이픈(-)을 사용한다.</li>
  <li>밑줄(_)은 URL에 사용하지 않는다.</li>
  <li>URL은 소문자를 사용한다.</li>
  <li>파일 확장자는 URI에 포함시키지 않는다.</li>
</ul>

<p><strong>리소스 간의 관계를 표현하는 방법</strong></p>

<ul>
  <li><code class="highlighter-rouge">/리소스명/리소스 ID/관계가 있는 다른 리소스명</code></li>
  <li>관계명이 복잡할 경우 서브 리소스에 명시적으로 표현한다. ex) <code class="highlighter-rouge">GET : /users/{userid}/likes/devices</code></li>
</ul>

<p><strong>Colllection과 Document</strong></p>

<ul>
  <li><strong>Colllection</strong> : 문서들의 집합, 객체들의 집합. 복수로 사용한다.</li>
  <li><strong>Document</strong> : 단순한 문서 혹은 한 객체</li>
</ul>

<hr />

<h2 id="http-응답-상태-코드">HTTP 응답 상태 코드</h2>

<p><strong>200</strong></p>

<ul>
  <li>200 : 클라이언트의 요청을 정상적으로 수행함</li>
  <li>201 : 클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨(POST를 통한 리소스 생성 작업 시)</li>
</ul>

<p><strong>400</strong></p>

<ul>
  <li>400 : 클라이언트의 요청이 부적절 할 경우 사용하는 응답 코드</li>
  <li>401 : 클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청했을 때 사용하는 응답 코드</li>
  <li>403 : 유저 인증상태와 관계 없이 응답하고 싶지 않은 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드</li>
  <li>404 : 서버가 요청한 페이지(Resource)를 찾을 수 없을 경우 사용하는 응답 코드</li>
</ul>

<p><strong>ect</strong></p>

<ul>
  <li>301 : 클라이언트가 요청한 리소스에 대한 URI가 변경 되었을 때 사용하는 응답 코드</li>
  <li>500 : 서버에 문제가 있을 경우 사용하는 응답 코드</li>
</ul>

<h3 id="-잘못된-데이터로-요청하여-db오류가-발생할-시-어떤-상태코드를-돌려주어야-하나">❓ 잘못된 데이터로 요청하여 DB오류가 발생할 시 어떤 상태코드를 돌려주어야 하나?</h3>

<p>한 크루가 서버에서 SQLException이 발생할 경우 이를 클라이언트에 알려야 하나,<br />
또는 어떤 상태코드를 주어야 하나에 대해 이야기해보았다.</p>

<p>일단 결론은 잘못된 데이터로 결과 값을 가져올 수 없는 경우, 서버에러가 아닌 때에 따라 적절한  상태코드를 돌려준다.<br />
<a href="https://docs.microsoft.com/ko-kr/azure/architecture/best-practices/api-design">웹 API 디자인</a>을 참고하였다.</p>

<h4 id="post---잘못된-데이터-추가-요청일-경우-400">POST - 잘못된 데이터 추가 요청일 경우 400</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/5568ef22-9fa1-44b5-a44f-124fb75714f0/image.png" style="zoom:50%;" /></p>

<h4 id="put---데이터-수정이-실패한-경우-409">PUT - 데이터 수정이 실패한 경우 409</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/92848e22-2348-41c9-acdc-95ab25ad6401/image.png" style="zoom: 67%;" /></p>

<p>서버에서 처리하고 상태코드를 보낼 때 정해진 약속을 생각해보고 적절한 상태코드를 보내어 클라이언트가 요청에 대한 결과를 정확히 알 수 있도록 하자!</p>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://meetup.toast.com/posts/92">REST API 제대로 알고 사용하기 : NHN Cloud Meetup</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring Core 막 적은 강의 노트</title>
	  <link>//spring-core-lecture</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//spring-core-lecture</guid>
	  <description><![CDATA[
	     <p>객체의 의존 관리는 스프링이 한다.<br />
스프링은 개발자를 대신해서 객체들을 생성하고 관리하는 일을 한다.</p>

<h3 id="chessservice에서-chessdao-의존하기">ChessService에서 ChessDao 의존하기</h3>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420104423745.png" alt="image-20210420104423745" /></p>

<p>변경에 취약하다</p>

<p>의존 관계를 개발자가 직접 관리하려면 복잡하다.<br />
스프링 컨테이너가 관리해준다.</p>

<h3 id="컨테이너">컨테이너</h3>

<p>담아놓는 용기<br />
스프링에서는 스프링이 활용할 객체들을 담아놓은 용기를 말한다.</p>

<h3 id="bean으로-등록하는-기준">Bean으로 등록하는 기준?</h3>

<p>프로그램 별로 공통적으로 쓸 수 있는 대상 
레이어에 대한 객체들을 재사용할 수 있는데 이들을 빈으로 관리한다.<br />
상태가 없는 객체를 빈으로 등록한다.  -&gt; 빈으로 등록 하려면 상태가 없어야 한다.</p>

<p>설정의 메타 데이터(Configuration Metadata)를 이용해 스프링 컨테이너에 담아놓는다.<br />
컨테이너에 담으면 빈으로 등록된다.</p>

<h3 id="스프링이-객체를-관리하게-하려면">스프링이 객체를 관리하게 하려면</h3>

<ul>
  <li>객체 관리 대상 알려주기</li>
  <li>객체들 간의 의존성 정의하기</li>
</ul>

<h3 id="컨테이너-설정-방법---빈-등록-방법">컨테이너 설정 방법 - 빈 등록 방법</h3>

<p>@ComponentScan : 등록할 빈을 스캔할 classpath를 지정 (@SpringBootApplication 내부에 속해있는 애너테이션)</p>

<p>@Component : ComponentScan 클래스 하위에 특정 애너테이션이 붙은 클래스를 스프링 빈으로 지정</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420110038067.png" alt="image-20210420110038067" /></p>

<h3 id="의존성-주입">의존성 주입</h3>

<h4 id="생성자-주입without-스프링-컨테이너">생성자 주입(without 스프링 컨테이너)</h4>

<h4 id="수정자-주입without-스프링-컨테이너">수정자 주입(without 스프링 컨테이너)</h4>

<p>필드를 통해 주입할 수도 있다.<br />
스프링에서는 XML, 어노테이션, 자바 클래스를 통해 의존성을 주입할 수 있다.</p>

<p>@Autowired를 붙여준다. 생성자 매개변수의 값이 필요하구나를 알 수 있다.</p>

<p>특정 컴포넌트 어노테이션을 붙인다고 해서 특정 의미가 부여되는 것은 아니고,</p>

<p>Repository는 도메인 객체의 생명주기를 관리하며 Public Operation을 제공합니다. 이에 Domain Layer에 해당합니다. 도메인 모델과 생애주기가 같기 때문이죠. 
실제 구현체인 SimpleJpaRepository는 Infrastructure Layer에 해당합니다. 
이렇게 추상에 의존하고 구체에 의존하지 않도록 구성함으로써(DIP) 유연성있는 시스템을 구성할 수 있습니다.
반면, DAO는 CRUD와 1:1로 매칭되어 Persistence Operation을 적극적으로 드러냅니다.
즉, repository는 도메인 모델의 일부로 보며 추상인 반면, dao는 추상이 필수는 아니라고 생각합니다.</p>

<blockquote>
  <p>http://egloos.zum.com/aeternum/v/1160846</p>
</blockquote>

<blockquote>
  <p>https://stackoverflow.com/questions/8550124/what-is-the-difference-between-dao-and-repository-patterns</p>
</blockquote>

<p>빈은 기본적으로 싱글턴 스코프</p>

<p>컨테이너는 개념적인 것 컨텍스트는 객체의 일원</p>

<p>갠적으로 어노테이션은 막붙이기 좋고(빠르게 개발하기)
xml에 명시하면 일률적으로 내가 어떻게 관리하고 있는지 눈에 들어와서 좋았습니다.</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420114253606.png" alt="image-20210420114253606" /></p>

<h3 id="서비스-레이어는-어떤-역할을-할까요">서비스 레이어는 어떤 역할을 할까요?</h3>

<p>도메인 로직들의 순서를 보장하면서, 서비스 트랜잭션 관리를 한다.<br />
객체들의 비지니스 플로우를 관리해준다.<br />
비지니스 로직은 도메인으로!</p>

<h3 id="pojo">Pojo</h3>

<p>스프링에서 스프링 빈으로 관리하고 싶은 객체<br />
스프링 설정이 가해지기 전 상태의 객체를 POJO라고 한다.</p>

<p>포조는 순수한 자바 객체를 의미</p>

<p>Java Bean :</p>

<p>자바빈은 포조라고 할 수 있지만 포조는 자바빈이라고 하긴 애매하다.</p>

<p><img src="/Users/jyejye/Library/Application Support/typora-user-images/image-20210420120440979.png" alt="image-20210420120440979" /></p>

<p>뷰 컨트롤러를 분리했다고 보면 됨 그런 차원에서 의미가 있따.</p>

<p>맞아유 config가 코드 양이 좀 더 짧은 거 같아서 더 좋은 거 같아여! 어차피 configuration은 대부분 만들어 놓으니 다른 클래스 안만들어도 되구!</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 스프링의 DI 방법 (생성자 주입 VS 필드 주입)</title>
	  <link>//responsebody</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//responsebody</guid>
	  <description><![CDATA[
	     <h2 id="스프링의-di-방법">스프링의 DI 방법</h2>

<h3 id="di">DI</h3>

<h4 id="강한-결합">강한 결합</h4>

<p>객체 내부에서 다른 객체를 생성할 경우, 강한 결합도를 가지고 있다고 말한다.<br />
A 클래스에서 B라는 객체를 직접 생성하다가, B 객체를 C 객체로 바꾸고 싶을 때 A 클래스도 수정해야하기 때문이다.</p>

<h4 id="느슨한-결합">느슨한 결합</h4>

<p>외부에서 생성된 객체를 인터페이스를 통해 넘겨받아 결합도를 낮춘 것을 느슨한 결합이라고 한다.<br />
런타임시에 의존 관계가 결정되기 때문에 유연한 구조를 가진다.</p>

<h3 id="1-생성자-주입constructor-injection">1. 생성자 주입(Constructor Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationConstructorService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StationConstructorService</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스프링 4.3 부터는 단일 생성자인 경우 생성자에 <code class="highlighter-rouge">@Authowired</code>를 붙이지 않아도 된다.</p>

<h3 id="2-필드-주입field-injection">2. 필드 주입(Field Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationFieldService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>필드에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="3-수정자-주입setter-injection">3. 수정자 주입(Setter Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationSetterService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStationRepository</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>setter를 통해 의존성을 주입하는 방법으로 setter에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="필드-주입대신-생성자-주입을-권고하는-이유">필드 주입대신 생성자 주입을 권고하는 이유</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/c301577d-d47d-4254-ae0c-0419ce315106/image.png" style="zoom:67%;" /></p>

<p>인텔리제이에서 필드 주입을 사용할 경우 생성자 주입으로 변경할 것을 권고한다.<br />
그 이유는 무엇일까?</p>

<h4 id="순환-참조를-방지할-수-있다">순환 참조를 방지할 수 있다.</h4>

<p>극단적인 예로 객체 A가 객체 B를 참조하고, 다시 객체 B가 객체 A를 참조한다고 하자.</p>

<p>먼저 <strong>필드 주입</strong>의 경우 순환 참조에서 어떤 문제를 일으키는지 보겠다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GameService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">PieceService</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PieceService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>테스트</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4bd9b5b9-a0a7-44e7-9931-3b9acebede2d/image.png" style="zoom:67%;" /></p>

<p>위와 같이 간단한 테스를 해보았을 때, 애플리케이션 구동은 잘 되지만 서로의 메소드를 계속해서 호출하고 있기 때문에 <code class="highlighter-rouge">StackOverflowError</code> 가 발생한다.<br />
어쨌든 순환 참조가 일어났음에도 스프링 컨테이너가 동작하는 애플리케이션 자체는 문제없이 구동된다.</p>

<p>그렇다면 생성자 주입의 경우는 어떠할까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GameServiceImpl</span><span class="o">(</span><span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pieceService</span> <span class="o">=</span> <span class="n">pieceService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PieceServiceImpl</span><span class="o">(</span><span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gameServiceImpl</span> <span class="o">=</span> <span class="n">gameServiceImpl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/cfb25981-3055-4aef-9b36-568e12ad4760/image.png" style="zoom:67%;" /></p>

<p>로그로 순환참조가 일어나고 있음을 보여주면서 컨테이너가 빈들을 등록하지도 못한채, 애플리케이션 구동 자체도 실패하였다.</p>

<p>여기서 이런 차이점을 보이는 이유는 필드 주입과 생성자 주입은 빈을 주입하는 순서에 차이가 있기 때문이다.</p>

<p><strong>필드 주입</strong>은 빈을 생성 후 어노테이션이 붙은 필드에 해당하는 빈을 찾아서 주입한다.<br />
빈 생성이 먼저 일어나고, 필드에 대한 주입을 수행하는 것이다.</p>

<p><strong>생성자 주입</strong>은 생성자로 객체를 생성하는 시점에 필요한 빈을 주입한다.<br />
먼저 빈을 생성하지 않고, 생성자의 인자에 사용되는 빈을 찾거나 빈 팩터리에서 만드는 순서이다.</p>

<p>때문에 객체 생성 시점에 빈을 주입하는 생성자 주입은 순환 참조에 대한 오류를 겪을 수 있다.<br />
순환된 참조 관계를 가지는 객체들이 생성되지 않은 시점에서 빈을 참조하기 때문이다.<br />
이렇게 보면 어찌됐든 애플리케이션을 구동 시키는 필드 주입이 더 좋다고 생각할 수 있다.</p>

<p>하지만 객체의 순환 참조가 일어난다는 것은 애초에 잘못된 설계라고 할 수 있다.<br />
때문에 <strong>오히려 생성자 주입을 사용하여 순환 참조가 되는 설계를 막을 수 있도록 하자.</strong></p>

<h3 id="테스트-코드-작성에-용이">테스트 코드 작성에 용이</h3>

<p>만약 필드 주입을 사용해 작성된 클래스라면, 순수한 자바 코드로만, 스프링같은 DI 프레임 워크 위에서 동작하지 않는 단위 테스트에서 의존 관계를 가지는 객체를 생성해서 주입할 수 있는 방법이 없다.<br />
외부에 노출 된 정보가 없기 때문에 스프링 컨테이너가 생성해서 주입해주는 방식으로는 의존 관계를 가지고 있는 메소드를 단위 테스트 할 경우 <code class="highlighter-rouge">NullPointerException</code> 이 발생한다.<br />
하지만 생성자 주입 방식의 경우 테스트 코드를 작성할 때 원하는 구현체를 생성자에 넘겨주면 되기 때문에 테스트에 더 용이하다고 할 수 있다.</p>

<h3 id="immutable">Immutable</h3>

<p>필드 주입과 수정자 주입은 해당 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 없다.<br />
즉 가변 객체로만 사용이 가능한 것이다.</p>

<p>하지만 생성자 주입은 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 있다.<br />
이로 인해 가변 객체로 인해 발생할 수 있는 오류를 사전에 막는다.</p>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/">스프링 - 생성자 주입을 사용해야 하는 이유, 필드인젝션이 좋지 않은 이유</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring에서 request 처리 과정</title>
	  <link>//request</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//request</guid>
	  <description><![CDATA[
	     <h2 id="spring에서-request-처리-과정">Spring에서 request 처리 과정</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2caaa9e-bde3-4b10-9e44-8a5a8629c200/image.png" style="zoom:50%;" /></p>

<ul>
  <li><strong>DispatcherServlet</strong> : 클라이언트의 요청을 전달 받아 요청에 맞는 컨트롤러가 반환한 결과값을 View에 전달하여 알맞은 응답 생성</li>
  <li><strong>HandlerMapping</strong> : 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정</li>
  <li><strong>Controller</strong> : 클라이언트의 요청을 처리한 뒤, 결과를 DispatcherServlet에 반환</li>
  <li><strong>ModelAndView</strong> : 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담음</li>
  <li><strong>ViewResolver</strong> : 컨트롤러의 처리 결과를 생성할 뷰를 결정</li>
  <li><strong>View</strong> : 컨트롤러의 처리 결과 화면을 생성, JSP 또는 템플릿 엔진을 뷰로 사용</li>
</ul>

<ol>
  <li>클라이언트가 서버에 요청을 하면 <strong>DispatcherServlet</strong>이 요청을 가로챈다.</li>
  <li>요청을 가로챈 <strong>DispatcherServlet</strong>은 HandlerMapping에게 어떤 컨트롤러에게 요청을 위임하면 좋을지 물어본다. <br />
(HandlerMapping은 <code class="highlighter-rouge">@Controller</code>로 등록한 것들을 스캔해서 찾아 놓았다.)</li>
  <li>요청에 매핑된 <strong>Controller</strong>가 있다면 @RequestMapping을 통하여 요청을 처리할 메서드에 도달한다.  <br />
(이는 HandlerAdapter가 책임진다.)</li>
  <li><strong>Controller</strong>에서는 해당 요청을 처리할 Service에게 비즈니스 로직을 위임한다.</li>
  <li><strong>Service</strong>에서는 DB 접근이 필요할 경우 DB 처리를 DAO에게 위임한다.</li>
  <li><strong>DAO</strong>는 데이터 정보를 받아 Service에게 돌려준다.<br />
(결과로 받은 Entity 객체를 가지고 Response에 필요한 <strong>DTO</strong> 객체로 변환한다.)</li>
  <li>모든 비즈니스 로직을 끝낸 <strong>Service</strong>가 결과물을 <strong>Controller</strong>에 넘긴다.</li>
  <li>결과물을 받은 <strong>Controller</strong>는 필요에 따라 Model 객체에 결과물을 넣거나, View 정보를 담아 <strong>DispatcherServlet</strong>에게 보낸다.</li>
  <li><strong>DispatcherServlet</strong>은 <strong>ViewResolver</strong>에게 받은 뷰에 대한 정보를 넘긴다.</li>
  <li><strong>ViewResolver</strong>는 해당 View를 찾아 <strong>DispatcherServlet</strong>에게 알려준다.<br />
(serffix, prefix를 붙여주는 것도 ViewResolver에서 수행한다.)</li>
  <li><strong>DispatcherServlet</strong>은 응답할 View에게 Render를 지시하고 <strong>View</strong>는 응답 로직을 처리한다.</li>
  <li><strong>DispatcherServlet</strong>이 클라이언트에게 렌더링된 View를 응답한다.</li>
</ol>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://jeong-pro.tistory.com/96">Spring MVC 구조의 처리 과정을 설명해보시오. (MVC process)</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 통합 테스트 VS 단위 테스트</title>
	  <link>//unit-test-vs</link>
	  <author></author>
	  <pubDate>2021-04-16T19:18:00+09:00</pubDate>
	  <guid>//unit-test-vs</guid>
	  <description><![CDATA[
	     <h2 id="통합-테스트">통합 테스트</h2>

<p>실제 운영 환경에서 사용될 클래스들을 통합하여 테스트한다.<br />
기능 검증이 아닌 스프링 프레임워크에서 전체적으로 플로우가 제대로 동작하는지 검증하기 위해 사용한다.</p>

<h4 id="장점">장점</h4>

<ul>
  <li>스프링 부트 컨테이너를 띄워 테스트하기 때문에 운영환경과 가장 유사한 테스트가 가능하다.</li>
  <li>전체적인 Flow를 쉽게 테스트 할 수 있다.</li>
</ul>

<h4 id="단점">단점</h4>

<ul>
  <li>애플리케이션의 설정, 모든 Bean을 로드하기 때문에 시간이 오래걸리고 무겁다.</li>
  <li>테스트 단위가 커 디버깅이 어렵다.</li>
</ul>

<h3 id="springboottest"><strong>@SpringBootTest</strong></h3>

<ul>
  <li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@Transactional</span>
<span class="kd">class</span> <span class="nc">ChessServiceImplTest</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="springboottest-의-파라미터들">@SpringBootTest 의 파라미터들</h4>

<ul>
  <li><strong>value</strong>: 테스트가 실행되기 전에 적용할 프로퍼티 주입.(기존의 프로퍼티 오버라이드)</li>
  <li><strong>properties</strong> : 테스트가 실행되기 전에 {key=value} 형식으로 프로퍼티 추가.</li>
  <li><strong>classes</strong> : ApplicationContext에 로드할 클래스 지정. (지정하지 않으면 @SpringBootConfiguration을 찾아서 로드)</li>
  <li><strong>webEnvironment</strong> : 어플리케이션이 실행될 때의 웹 환경을 설정. (기본값은 Mock 서블릿을 로드하여 구동)</li>
</ul>

<p><strong>➕ webEnvironment</strong></p>

<ul>
  <li><strong>MOCK</strong> : <code class="highlighter-rouge">ServletContainer</code>를 테스트용으로 띄우지않고 서블릿을 mocking 한 것이 동작한다. (내장 톰캣이 구동되지 않는다.) <br />
MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스테 사용을 용이하게 해주는 라이브러리</li>
  <li><strong>RANDOM_PORT</strong> : 임의의 Port Listener. EmbeddedWebApplicationContext를 로드하며 실제 서블릿 환경을 구성</li>
</ul>

<h4 id="activeprofiles">@ActiveProfiles</h4>

<p>원하는 프로파일 환경 값 설정이 가능하다. (프로파일 전략)</p>

<h4 id="transactional">@Transactional</h4>

<p>테스트 완료 후 자동으로 Rollback 처리가 된다. <br />
하지만 <code class="highlighter-rouge">WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>를 사용하면 실제 테스트 서버는 별도의 스레드에서 테스트를 수행하기 떄문에 트랜잭션이 롤백되지 않는다. (왜?)</p>

<hr />

<h2 id="단위-테스트">단위 테스트</h2>

<h4 id="장점-1">장점</h4>

<ul>
  <li>WebApplication 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르다.</li>
  <li>통합 테스트를 진행하기 어려운 테스트를 진행 가능하다.</li>
</ul>

<h4 id="단점-1">단점</h4>

<ul>
  <li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 수 있다.</li>
</ul>

<h3 id="webmvctest">@WebMvcTest</h3>

<ul>
  <li>MVC를 위한 테스트로, 웹 상에서 요청과 응답에 대한 테스트.</li>
  <li>MVC 관련된 설정인 <code class="highlighter-rouge">@Controller, @ControllerAdvice, @JsonCompoent와 Filter, WebMvcConfiguer, HandlerMetohdAgumentResolver</code>만 빈으로 등록된다.</li>
  <li>때문에 Service, Repository 와 같은 웹 계층 아래 빈들은 등록되지 않아 의존성도 끊긴다.</li>
  <li>테스트에 사용하는 의존성이 있다면 @MockBean으로 만들어 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="n">ChessController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ChessControllerTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="n">ChessService</span> <span class="n">chessService</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 리스트 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getGames</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGameManager</span><span class="o">&gt;</span> <span class="n">chessGameManagers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>
        <span class="n">chessGameManagers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findRunningGames</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGameManagerBundle</span><span class="o">(</span><span class="n">chessGameManagers</span><span class="o">));</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/games"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.runningGames."</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"새로운 게임 시작 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">gameStart</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">start</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/start"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 점수 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getScore</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameStatistics</span> <span class="n">chessGameStatistics</span> <span class="o">=</span> <span class="n">ChessGameStatistics</span><span class="o">.</span><span class="na">createNotStartGameResult</span><span class="o">();</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">getStatistics</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameStatistics</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/score"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.matchResult"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"무승부"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.colorsScore.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"해당 게임 로딩 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">loadGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/load"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">movePiece</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="n">MoveRequestDto</span><span class="o">(</span><span class="s">"a2"</span><span class="o">,</span> <span class="s">"a3"</span><span class="o">));</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">isEnd</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">nextColor</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
                <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/move"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.end"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.nextColor"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"BLACK"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">given - willReturn</code> : 특정행위에 대한 반환 값을 지정하여 실제 객체처럼 동작하게 한다.</li>
</ul>

<h3 id="jdbctest">@JdbcTest</h3>

<ul>
  <li>JDBC 기반 구성 요소에만 초점을 맞춘 JDBC 테스트 어노테이션</li>
  <li>테스트를 위한 <code class="highlighter-rouge">JdbcTemplate</code>이 생성된다.</li>
  <li>기본적으로 트랜잭션이 이루어진다.</li>
  <li>in-memory database가 설정된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JdbcTest</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateChessDaoTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">DEFAULT_CHESS_GAME_ID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">ChessGame</span> <span class="n">chessGame</span><span class="o">;</span>
    <span class="n">ChessGameManager</span> <span class="n">sampleGame</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplateChessDao</span> <span class="n">jdbcTemplateChessDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">JdbcTemplateChessDaoTest</span><span class="o">(</span><span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">,</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"dataSource"</span><span class="o">)</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplateChessDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplateChessDao</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@BeforeEach</span>
    <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">"RKBQKBKRPPPPPPPP................................pppppppprkbqkbkr"</span><span class="o">;</span> <span class="c1">// move a2 a3 한 번 진행</span>
        <span class="n">chessGame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">,</span> <span class="n">WHITE</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">sample</span><span class="o">);</span>
        <span class="n">sampleGame</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임을 저장한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">newId</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"id로 체스 게임을 찾는다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">findById</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">isPresent</span><span class="o">()).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임 정보를 업데이트한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">sampleGame</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a2"</span><span class="o">),</span> <span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>

        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">sampleGame</span><span class="o">));</span>

        <span class="n">ChessGame</span> <span class="n">expectedChessGame</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">ChessGameManager</span> <span class="n">expectedChessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">expectedChessGame</span><span class="o">);</span>
        <span class="n">Square</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">expectedChessGameManager</span><span class="o">.</span><span class="na">getBoard</span><span class="o">().</span><span class="na">findByPosition</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">Pawn</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getColor</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">WHITE</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findAllOnRunning</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGame</span><span class="o">&gt;</span> <span class="n">allOnRunning</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findAllOnRunning</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">allOnRunning</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//when</span>
        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>

        <span class="c1">//then</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://goddaehee.tistory.com/212?category=367461">[스프링부트 (10)] SpringBoot Test(3) - 단위 테스트(@WebMvcTest, @DataJpaTest, @RestClientTest 등)</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의 노트</title>
	  <link>//spring3</link>
	  <author></author>
	  <pubDate>2021-04-16T19:18:00+09:00</pubDate>
	  <guid>//spring3</guid>
	  <description><![CDATA[
	     <h2 id="3-회원-관리-예제---백엔드-개발">3. 회원 관리 예제 - 백엔드 개발</h2>

<hr />

<h3 id="비즈니스-요구사항">비즈니스 요구사항</h3>

<ul>
  <li>데이터 : 회원 ID, 이름</li>
  <li>기능 : 회원 등록, 조회</li>
  <li>아직 데이터 저장소가 선정되지 않음</li>
</ul>

<h4 id="일반적인-웹-애플리케이션-계층-구조">일반적인 웹 애플리케이션 계층 구조</h4>

<ul>
  <li>컨트롤러 : 웹 MVC의 컨트롤러 역할</li>
  <li>서비스 : 핵심 비즈니스 로직 구현</li>
  <li>레포지토리 : 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리</li>
  <li>도메인 : 비즈니스</li>
</ul>

<h4 id="클래스-의존-관계">클래스 의존 관계</h4>

<p><img src="https://user-images.githubusercontent.com/43840561/114995962-5371f080-9ed9-11eb-9f24-561a7af4dd46.png" alt="image" style="zoom:33%;" /></p>

<p>회원을 저장하는 것은 Repository 인터페이스.<br />
일단은 메모리 구현체.<br />
DBMS를 자유롭게 바꿔 끼우기 위해 인터페이스로 구현하였음.</p>

<p><strong>Member Domain</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>MemberRepository</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="nf">save</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">);</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
    <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findByNames</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">findById()</code>, <code class="highlighter-rouge">findByNames()</code> 은 null을 반환할 수 있으니 Optional로 감싸서 반환한다.</li>
</ul>

<p><strong>MemoryMemberRepository</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="n">MemberRepository</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">sequence</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Member</span> <span class="nf">save</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(++</span><span class="n">sequence</span><span class="o">);</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">));</span> <span class="c1">// null이어도 감쌀 수 있다. 클라에서 무언갈 할 수 있</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findByNames</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">();</span> <span class="c1">// 루프를 돌면서 없으면 optional에 null이 포함되서 반환</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>MemoryMemberRepositoryTest</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepositoryTest</span> <span class="o">{</span>
    <span class="n">MemoryMemberRepository</span> <span class="n">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemoryMemberRepository</span><span class="o">();</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findByName</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="n">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

        <span class="n">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findByNames</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
    <span class="o">}</span>
  
  <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="n">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>모든 테스트는 메서드마다 독립적으로 실행되어야 한다.<br />
순서에 의존도가 생기면 안된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@AfterEach</span>
<span class="kt">void</span> <span class="nf">afterAll</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">repository</span><span class="o">.</span><span class="na">clearStore</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>때문에 하나의 테스트가 실행될 때 마다 초기화를 진행해준다.</p>

<p>테스트 코드없이 개발은 불가능하다.</p>

<p><strong>MemberService</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemoryMemberRepository</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">join</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateDuplicatedMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateDuplicatedMember</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 중복 회원은 안된다.</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByNames</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
                <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>
                <span class="o">});</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="n">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>하지만 Optional을 바로 반환하는 것은 좋지 않다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 중복 회원은 안된다.</span>
<span class="n">memberRepository</span><span class="o">.</span><span class="na">findByNames</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
  <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>
  <span class="o">});</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">ifPresent()</code> 를 사용해 바로 확인.</p>

<ul>
  <li>서비스 클래스는 비즈니스적인 네이밍을 써야한다.</li>
</ul>

<p><strong>그런데 서비스 테스트와 레포지토리 테스트에서 각각의 MemoryMemberRepository 인스턴스를 생성해 테스트하고 있다.</strong><br />
현재는 static으로 선언되어 있지만, 이치에 맞지 않는 현상. <br />
생성자를 통해 외부에서 주입하도록 한다.</p>

<p><strong>생성자 주입(DI)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@BeforeEach</span>
<span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">memberRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemoryMemberRepository</span><span class="o">();</span>
    <span class="n">memberService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>각 테스트 실행 전에 호출되며 테스트가 서로 영향 없이 항상 새로운 객체를 생성하고 의존관계도 새로 맺어준다.</p>

<p>Controller 에서 요청을 받고, Service에서 비즈니스 로직을 처리하고, Repository에서 데이터를 저장하고 이게 정형화된 로직이다.</p>

<p>스프링이 관리를 하면 애플리케이션이 포함된 하위 패키지 내에서 스프링이 컴포넌트를 스캔한다.<br />
스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다. (메모리도 절약된다.)</p>

<h2 id="4-스프링-빈과-의존관계">4. 스프링 빈과 의존관계</h2>

<hr />

<h3 id="컴포넌트-스캔과-자동-의존관계-설정">컴포넌트 스캔과 자동 의존관계 설정</h3>

<p>생성자에 <code class="highlighter-rouge">@Autowired</code>가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어준다.<br />
객체 의존 관계를 외부에서 넣어주는 것을 DI라고 한다.</p>

<h4 id="스프링-빈을-등록하는-방법">스프링 빈을 등록하는 방법</h4>

<ul>
  <li>컴포넌트 스캔과 자동 의존관계 설정</li>
  <li>자바 코드로 직접 스프링 빈 등록하기</li>
</ul>

<p><code class="highlighter-rouge">@Component </code> 가 있으면 스프링 빈으로 자동 등록된다. (@Controller, @Service, @Repository). 
생성자에 <code class="highlighter-rouge">@Autowired</code> 를 사용하면 객체 생성 시점에 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입한다.<br />
생성자가 1개만 있으면 <code class="highlighter-rouge">@Autowired</code> 는 생략 가능하다.</p>

<p>스프링은 스프링 빈을 등록할 때 기본으로 싱글톤으로 등록한다. (유일하게 하나만 등록). <br />
따라서 같은 스프링 빈이면 모두 같은 인스턴스다.</p>

<p><code class="highlighter-rouge">@Autowired</code> 를 통한 DI는 스프링이 관리하는 객체(빈)에서만 동작한다.</p>

<p>DI에는 필드 주입, setter 주입, 생성자 주입 3가지가 있는데, <br />
의존 관계가 동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다.</p>

<h2 id="5-회원-관리-예제---웹-mvc-개발">5. 회원 관리 예제 - 웹 MVC 개발</h2>

<hr />

<p>요청이 올 경우 스프링 컨테이너에서 컨트롤러를 찾고 없으면 static 파일을 찾는다.</p>

<h2 id="6-스프링-db-접근-기술">6. 스프링 DB 접근 기술</h2>

<hr />

<p>jdbc만 사용할 경우 중복이 너무 많으니 spring에서는 jdbc templates를 제공한다.</p>

<p>sql을 다루지 않고, 쿼리 없이 객체를 db에 저장할 수 있다.</p>

<p>jpa를 편리하게 쓸 수 있도록 감싼 것이 스프링 JPA</p>

<h3 id="solid---개방-폐쇄-원칙ocp">SOLID - 개방 폐쇄 원칙(OCP)</h3>

<p>확장에는 열려있고, 수정과 변경에는 닫혀있다.<br />
스프링의 DI를 사용하면 기존 코드는 전혀 손대지 않고, 설정만으로 구현 클래스를 변경할 수 있다.</p>

<h3 id="스프링-통합-테스트">스프링 통합 테스트</h3>

<p>지금까지는 순수 자바 코드만으로 테스트를 진행했는데,<br />
스프링 부트가 모든 정보가 들고 있으니 스프링 컨테이너와 DB까지 연결한 통합 테스트를 진행해야 한다.</p>

<p>스프링 통합 테스트는 DI가 아닌 필드 인젝션을 사용한다.<br />
테스트를 다른데서도 쓰이는 것이 아니라 한 클래스 내에서 사용하고 끝이기 때문이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberServiceIntegrationTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="n">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="err">회원가입</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="n">Long</span> <span class="n">saveId</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="n">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="n">saveId</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="err">중복회원예외</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//given</span>
        <span class="n">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="n">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="n">assertThatThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
        <span class="o">}).</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="n">IllegalArgumentException</span> <span class="n">e</span> <span class="o">=</span> <span class="n">assertThrows</span><span class="o">(</span><span class="n">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member2</span><span class="o">));</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@SpringBootTest</code> : 스프링 컨테이너와 테스트를 함께 실행한다.</li>
  <li><code class="highlighter-rouge">@Transactional</code> : 각각의 테스트 시작 전에 트랜잭션을 시작하고, 테스트 완료 후에 항상 롤백한다. 이렇게 하면 DB에 데이터가 남지 않으므로 다음 테스트에 영향을 주지 않는다</li>
  <li><code class="highlighter-rouge">@Commit</code> : 테스트 케이스가 끝나면 커밋한다.</li>
</ul>

<h3 id="jdbc-templates">JDBC Templates</h3>

<p>JDBC Templates를 바로 주입받을 수 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">JdbcTemplateMemberRepository</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div></div>

<p>JDBC Template은 템플릿 메서드 패턴이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"select * from member where id = ?"</span><span class="o">,</span> <span class="n">memberRowMapper</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="n">RowMapper</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">memberRowMapper</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span><span class="n">rs</span><span class="o">,</span> <span class="n">rowNum</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">();</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
    <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
  <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>query 수행 결과는 RowMapper로 맵핑을 해주어야 한다.<br />
객체 생성은 RowMapper에서 한다.</p>

<h3 id="jpa">JPA</h3>

<p>기존의 반복 코드는 물론, SQL도 JPA가 직접 만들어서 실행해준다.<br />
SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전환 할 수 있다.<br />
JPA를 사용하면 개발 생산성을 크게 높일 수 있다.<br />
JPA는 객체와 관계형 데이터 베이스를 맵핑하는 ORM이다.</p>

<p><strong>build.gradle</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dependencies {
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
implementation 'org.springframework.boot:spring-boot-starter-web'
implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
runtimeOnly 'com.h2database:h2'
testImplementation('org.springframework.boot:spring-boot-starter-test') {
exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
}
}
</code></pre></div></div>

<p>spring-boot-starter-data-jpa 는 내부에 jdbc 관련 라이브러리를 포함하기 때문에 jdbc는 제거해도 된다.</p>

<p>JPA는 인터페이스다. Hibernate는 이의 구현체이다.</p>

<p><strong>Member</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>데이터의 id를 자동으로 생성해주는 것을 identity 전략이라고 한다.</p>

<p><strong>JpaMemberRepository</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m"</span><span class="o">,</span> <span class="n">Member</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
            <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">"select m from Member m"</code> : jpql이라는 쿼리. 객체를 대상으로 쿼리를 날린다. 자동으로 쿼리문이 된다.</li>
</ul>

<p>JPA를 사용하면 항상 Transaction이 있어야 한다.  서비스 계층에 트랜잭션을 추가한다.<br />
스프링은 해당 클래스의 메서드를 실행할 때 트랜잭션을 시작하고, 메서드가 정상 종료되면 트랜잭션을 커밋한다. 만약 런타임 예외가 발생하면 롤백한다. JPA를 통한 모든 데이터 변경은 트랜잭션 안에서 실행해야 한다.</p>

<h3 id="스프링-data-jpa">스프링 Data JPA</h3>

<p>스프링 부트와 JPA만 사용해도 개발 생산성이 정말 많이 증가하고, 개발해야할 코드도 확연히 준다. <br />
여기에 스프링 데이터 JPA를 사용하면, 리포지토리에 구현 클래스 없이 인터페이스 만으로 개발을 완료할 수 있습니다. <br />
그리고 반복 개발해온 기본 CRUD 기능도 스프링 데이터 JPA가 모두 제공합니다. <br />
따라서 개발자는 핵심 비즈니스 로직을 개발하는데, 집중할 수 있습니다.<br />
실무에서 관계형 데이터베이스를 사용한다면 스프링 데이터 JPA는 이제 선택이 아니라 필수 입니다</p>

<p>스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이다.</p>

<p>스프링 JPA가 인터페이스에 대한 구현체를 자동으로 만들어낸다.</p>

<p>구현 클래스 작성 필요 없이 인터페이스 이름 만으로도 개발이 가능하다.</p>

<p>실무에서는 JPA와 스프링 데이터 JPA를 기본으로 사용하고, 복잡한 동적 쿼리는 Querydsl이라는 라이브러리를 사용하면 된다. Querydsl을 사용하면 쿼리도 자바 코드로 안전하게 작성할 수 있고, 동적 쿼리도 편리하게 작성할 수 있다. 이 조합으로 해결하기 어려운 쿼리는 JPA가 제공하는 네이티브 쿼리를 사용하거나, 앞서 학습한 스프링 JdbcTemplate를 사용하면 된다.</p>

<h2 id="7-aop">7. AOP</h2>

<hr />

<h4 id="필요한-상황">필요한 상황</h4>

<ul>
  <li>모든 메소드의 호출 시간을 측정하고 싶을 때</li>
  <li>공통 관심 사항 vs 핵심 관심 사항</li>
  <li>회원 가입 시간, 회원 조회 시간을 측정하고 싶을 때</li>
</ul>

<p><strong>메서드 별로 수행 시간을 찍어본다.</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">Long</span> <span class="nf">join</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
   <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
   <span class="k">try</span> <span class="o">{</span>
     <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">//중복 회원 검증</span>
     <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
     <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
     <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
       <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
       <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"join "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
   <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
   <span class="k">try</span> <span class="o">{</span>
   	 <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
     <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
     <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"findMembers "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
   <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<p><strong>문제</strong></p>

<ul>
  <li>회원가입, 회원 조회 시간을 측정하는 기능은 핵심 관심 사항이 아니다.</li>
  <li>시간을 측정하는 로직은 공통 관심 사항이다.</li>
  <li>시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어렵다.</li>
  <li>시간을 측정하는 로직을 별도의 공통 로직으로 만들기 매우 어렵다.</li>
  <li>시간을 측정하는 로직을 변경할 때 모든 로직을 찾아가면서 변경해야 한다.</li>
</ul>

<h3 id="aop-aspect-oriented-programming-적용">AOP (Aspect Oriented Programming) 적용</h3>

<p>공통 관심 사항과 핵심 관심 사항을 분리한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeTraceAop</span> <span class="o">{</span>

    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* hello.hellospring..*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"START: "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"END: "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>회원가입, 회원 조회등 핵심 관심사항과 시간을 측정하는 공통 관심 사항을 분리한다.</li>
  <li>시간을 측정하는 로직을 별도의 공통 로직으로 만들었다.</li>
  <li>핵심 관심 사항을 깔끔하게 유지할 수 있다.</li>
  <li>변경이 필요하면 이 로직만 변경하면 된다.</li>
  <li>원하는 적용 대상을 선택할 수 있다 (@Around(“execution(* hello.hellospring.service.*(..))”))</li>
</ul>

<p>AOP가 있으면 프록시를 만들어 가짜 빈을 만든다.<br />
가짜 빈에서 joinPoint.proceed()가 일어나면 실제 빈을 호출해준다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/115102809-6ee80480-9f88-11eb-950e-c9d5ac92b6be.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/115102816-7dceb700-9f88-11eb-918c-fede0fa4ec8e.png" alt="image" /></p>

<p>콘솔에 출력해보면 실제 MemberService가 아닌 Proxy가 출력되는 것을 볼 수 있다.</p>

<h2 id="참고-자료">참고 자료</h2>

<hr />

<ul>
  <li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard">스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 프로가 되기 위한 웹기술 입문 4</title>
	  <link>//webbasic4</link>
	  <author></author>
	  <pubDate>2021-04-15T19:18:00+09:00</pubDate>
	  <guid>//webbasic4</guid>
	  <description><![CDATA[
	     <h2 id="4-cgi에서-웹-애플리케이션으로">4. CGI에서 웹 애플리케이션으로</h2>

<hr />

<h3 id="리다이렉트의-구조">리다이렉트의 구조</h3>

<p>상태코드 302일 경우 <code class="highlighter-rouge">Location</code> 헤더에 표시된 URL에 다시 요청을 발행한다.<br />
이처럼 처음 요청한 URL과 다른 URL로 유도하는 것을 <strong>리다이렉트</strong>라고 한다.</p>

<h3 id="상태-유지-프로토콜과-무상태-프로토콜의-차이">상태 유지 프로토콜과 무상태 프로토콜의 차이</h3>

<p>FTP는 서버가 앞선 요청을 기억하는 상태 유지 프로토콜이다.<br />
상태 유지 프로토콜은 통신 절차가 많아 오버헤드가 크다.</p>

<p>HTTP는 상태를 가지 않는 무상태 프로토콜이다.<br />
상태를 유지하지 않을 경우 오버헤드가 적지만 상태를 유지하지 않으니, 로그인 같은 인증에 대한 상태 관리를 하기 어려웠다.</p>

<h3 id="쿠키의-개념과-구현-방법">쿠키의 개념과 구현 방법</h3>

<p>쿠키는 무상태 프로토콜안 HTTP의 규격을 확장해 웹 애플리케이션과 웹 브라우저 사이에서 정보를 교환할 수 있게한다.<br />
요청을 할 때 웹 브라우저의 상태를 <code class="highlighter-rouge">Cookie</code> 라는 헤더에 실어 보낸다.</p>

<h4 id="쿠키의-문제점">쿠키의 문제점</h4>

<p>요청 헤더, 응답 헤더에 쿠키를 설정하기 때문에 보안상의 위협이 있다.</p>

<h3 id="세션의-개념과-구현-방법">세션의 개념과 구현 방법</h3>

<p>세션이란 일련의 처리 흐름을 말한다.<br />
이 처리 흐름이 한 번에 완료 되지 않는다면 세션에 상태를 추가해야 한다.<br />
이러한 세션의 상태는 웹 서버에서 관리하고 세션 ID만을 주고 받는다.<br />
세션 ID는 단순한 숫자(또는 문자열) 이므로 쿠키를 이용해 관리한다.</p>

<p>로그인과 같은 세션을 개시할 때 웹 서버가 새로운 세션 ID를 발행하고, 쿠키에 저장되어 브라우저에 전달된다.<br />
이후 요청부터는 브라우저는 쿠키를 서버에 보내 인증을 성공한다.</p>

<p>쿠키에 세션ID만 저장함으로써 쿠키에 저장할 수 있는 정보량의 제한을 무시할 수 있고, 안정성을 높인다.</p>

<h2 id="5-웹-애플리케이션의-구성-요소">5. 웹 애플리케이션의 구성 요소</h2>

<hr />

<p>웹 애플리케이션은 클라이언트와 서버가 HTTP를 통해 통신함에 따라 구현된다.</p>

<h4 id="-프로그램-vs-애플리케이션-vs-서버-vs-프로세스">➕ 프로그램 VS 애플리케이션 VS 서버 VS 프로세스</h4>

<h5 id="프로그램">프로그램</h5>

<p>컴퓨터가 실행하는 처리의 순서를 지시한 것.<br />
소스코드 자체를 프로그램이라고 할 때도 많다.</p>

<h5 id="애플리케이션">애플리케이션</h5>

<p>워드프로세서, 표 계산 등 컴퓨터 상에서 작동하며, 사용자에게 기능을 제공하기 위한 것. <br />
웹 애플리케이션 또한 웹을 이용해 특정 목적을 달성하기 위한 소프트웨어</p>

<h5 id="서버">서버</h5>

<p>특정 기능을 제공하는 데 특화된 소프트웨어.<br />
단독으로 시스템을 구성하지는 못한다. <br />
애플리케이션을 비롯한 다른 소프트웨어와 조합하여 사용하여야 한다.<br />
서버를 이용하는 것이 클라이언트이다.</p>

<h5 id="프로세스">프로세스</h5>

<p>컴퓨터 상에서 작동하고 있는 소프트웨어</p>

<h3 id="웹-서버">웹 서버</h3>

<h3 id="애플리케이션-서버">애플리케이션 서버</h3>

<h4 id="서블릿이나-jsp는-어디에서-작동하는가">서블릿이나 JSP는 어디에서 작동하는가?</h4>

<p>자바 프로그램은 컴퓨터가 직접 실행하는 것이 아니라 JVM이라는 가상의 컴퓨터가 실행한다.<br />
때문에 JVM도 컴퓨터가 볼 때는 하나의 프로세스로, 웹 서버, 데이터베이스와 마찬가지로 독립된 프로세스로 동작한다.</p>

<p>JVM에서는 애플리케이션 서버라는 소프트웨어가 작동되고, 이 서버가 서블릿이나 JSP를 작동시킨다.<br />
CGI는 웹 서버로 요청이 올 때마다 새로운 프로세스가 기동되었다가 종료되는 1회용 모델이지만,<br />
애플리케이션 서버는 항상 프로세스가 상주해 있고 웹 서버로부터 요청을 받아 서블릿이나 JSP를 실행하는 재사용 모델이다.</p>

<h4 id="웹-서버와-애플리케이션-서버의-연동">웹 서버와 애플리케이션 서버의 연동</h4>

<h4 id="톰캣">톰캣</h4>

<p>아파치에서 개발한 오픈 소스 애플리케이션 서버. <br />
웹 서버와 연동하기 위해 톰캣은 아파치용으로 mode_jk라는 연동 모듈을 제공하며, 아파치 확장 기능으로 탑재해 연동을 구현한다.</p>

<p>아파치에 도착한 HTTP 요청을 mod_jk가 톰캣으로 전송하고, 톰캣이 이 기반에서 작동하는 웹 애플리케이션에 전달한다.<br />
웹 애플리케이션이 처리를 실행하고, 애플리케이션 서버로 결과를 되돌려준다.<br />
애플리케이션 서버는 mod_jk에 결과를 되돌려주고 아파치가 웹 브라우저로 HTTP 응답을 되돌려준다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/115107234-93ea7080-9fa4-11eb-9799-6535c498c9f9.png" alt="image" /></p>

<p>또한 여러 대의 애플리케이션 서버를 다른 노드에 배치해 분담시킬 수도 있다.</p>

<h4 id="웹-서버와-애플리케이션-서버의-분담">웹 서버와 애플리케이션 서버의 분담</h4>

<ul>
  <li>웹 서버 : 정적인 데이터를 처리한다.</li>
  <li>애플리케이션 서버 : 동적 데이터를 처리한다.</li>
</ul>

<p>이와 같이 서버 사이드에서 프로세스 두개가 연동한다.<br />
클라이언트가 페이지에 따라 요구를 보낼 프로세스가 제각각이면 골치아프니, 클라이언트의 HTTP 요청을 웹 서버가 전부 받고,<br />
애플리케이션 서버가처리해야 할 요청만 웹 서버가 전달한다.</p>

<p>이 두 서버를 분리함으로써<br />
처리는 가벼운 대신 횟수가 많은 정적 콘텐츠에 대한 요청은 웹 서버, <br />
횟수는 적지만 처리량이 무거운 동적 컨텐츠 요청은 애플리케이션으로 분담한다.</p>

<p>사실 대부분의 애플리케이션 서버는 웹 서버 기능도 가지고 있다.</p>

<h3 id="데이터-베이스-서버">데이터 베이스 서버</h3>

<p>대량의 정보를 기록하고 빠르게 검색, 집계할 수 있는 소프트웨어 (Database Management System)</p>

<h4 id="sql">SQL</h4>

<p>Structured Query Language (구조적 질의 언어). <br />
무엇을(SELECT), 어디에서(WHERE), 어떻게(GROUP BY 등) 추출할 것인지 표현하는 작업에 특화되어 있다.</p>

<h4 id="데이터베이스와-클라이언트의-관계">데이터베이스와 클라이언트의 관계</h4>

<p>데이터베이스는 독립적으로 작동하는 프로세스이고, 쿼리를 통해 결과를 취득하는 쪽도 프로세스이다. <br />
웹 애플리케이션에서는 웹 애플리케이션 프로그램이 SQL을 발행한다. <br />
만약 고객이 상품의 리스트를 조회하고 싶을 때 상품 목록을 HTML에 매번 직접 기술하는 것이 아닌,<br />
요청이 들어올 때마다 데이터 베이스에서 목록을 조회해온다.</p>

<h4 id="데이터베이스-서버의-분리">데이터베이스 서버의 분리</h4>

<p>DBMS는 여러 애플리케이션에서 동시에 이용되기 때문에 단독 프로세스로 작동한다.<br />
즉 웹 서버와 데이터베이스 서버는 다른 프로세스로서 작동한다.<br />
일반적으로는 웹 서버를 작동시킬 컴퓨터와 데이터베이스를 작동시킬 컴퓨터를 따로 준비해 각 프로세스를 각 컴퓨터에서 실행한다.<br />
이 경우, 처리가 분산되어 부하가 줄어들며 새로운 시스템이 구축되더라도 여러 클라이언트가 DB 서버를 이용하기 편리해진다.</p>

<h4 id="웹-애플리케이션과-데이터-베이스의-통신">웹 애플리케이션과 데이터 베이스의 통신</h4>

<p>웹 브라우저와 웹 서버가 HTTP를 사용해 통신하듯이,<br />
웹 애플리케이션과 데이터베이스가 통신할 경우에도 고유의 통신 프로토콜을 사용해 통신한다.</p>

<h2 id="6-웹-애플리케이션을-효율적으로-개발하는-방법">6. 웹 애플리케이션을 효율적으로 개발하는 방법</h2>

<hr />

<h3 id="서블릿jsp만으로는-부족한가">서블릿/JSP만으로는 부족한가?</h3>

<h4 id="웹-애플리케이션-대부분에서-자바를-사용하는-이유">웹 애플리케이션 대부분에서 자바를 사용하는 이유</h4>

<ul>
  <li>역사 깊은 언어</li>
  <li>객체지향, 재사용적</li>
  <li>오픈 소스 라이브러리와 프레임워크의 양과 질이 충실</li>
  <li>수많은 개발 지원 도구가 오픈소스로 제공</li>
</ul>

<h4 id="서블릿과-jsp의-연동">서블릿과 JSP의 연동</h4>

<p>서블릿은 HTTP 요청을 받아 브라우저에 되돌려줄 HTML을 자바 프로그램에서 출력할 수 있게 한 것.<br />
JSP는 HTML 속에 자바를 스크립틀릿으로 심을 수 있게 한 것이다. <br />
JSP만을 이용할 경우, 처리가 복잡한 웹 애플리케이션을 만들 때 JSP 안에 기술되는 코드가 늘어나 개발 관리가 힘들어진다.</p>

<p>이 문제를 해결하기 위해 HTML 표시는 JSP가, 애플리케이션에서 처리하는 부분은 서블릿이 담당하게 한다.</p>

<pre><code class="language-web.xml">&lt;!-- 서블릿 정의 --&gt;
&lt;servlet&gt;
	&lt;servlet-name&gt;login&lt;/servlet-name&gt;
	&lt;servlet-class&gt;kr.co.wiki.webtext.pizza.servlet.LoginServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;!-- 서블릿 매핑 --&gt;
&lt;servlet-mapping&gt;
	&lt;servlet-name&gt;login&lt;/servlet-name&gt;
	&lt;servlet-pattern&gt;login.do&lt;/servlet-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">res</span><span class="o">)</span>
<span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>

    <span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"realname"</span><span class="o">);</span>
    <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"mypassword"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="포워드-vs-리다이렉트">포워드 vs 리다이렉트</h4>

<p>서블릿에서 JSP로 이동은 브라우저를 통하지 않고 애플리케이션 서버 내에서만 진행된다.<br />
웹 애플리케이션에서는 이와 같은 이동을 포워드라고 하며 리다이렉트와는 구분된다.</p>

<ul>
  <li>리다이렉트 : 상태코드 302를 통해 이동할 URL을 알려주어 클라이언트에서 서버로 다시 요청을 보낸다. (요청이 2번 일어남)</li>
  <li>포워드 : 애플리케이션 서버 내에서만 이동 처리가 진행되어 서버측 처리 결과가 클라이언트로 돌아온다. (요청이 1번 일어남)</li>
</ul>

<h4 id="요청-스코프">요청 스코프</h4>

<p>서블릿과 JSP 사이에서 정보를 공유하기 위한 방식이다.<br />
즉, 포워드 한 곳과 포워드 된 곳 사이에서 정보를 공유하기 위한 방식이다.</p>

<h4 id="요청-매개변수와의-차이">요청 매개변수와의 차이</h4>

<ul>
  <li>요청 매개변수 : HTTP 메서드를 통해 클라이언트에서 웹 애플리케이션에 문자열로 전달된다. 서블릿이나 JSP에서 참조는 할 수 있지만 받은 값은 변경할 수 없다.</li>
  <li>요청 스코프 : 애플리케이션 서버에서 제공된는 구조로, 포워드 전후에 자바 객체를 공유할 수 있다. 하지만 HTTP 요청을 1회 처리하는 동안만 유효하므로 요청 처리가 종료되면 요청 스코프에 담겼던 정보는 사라진다. 즉 리다이렉트에서는 정보를 인계할 수 없다.</li>
</ul>

<h4 id="요청-스코프가-필요한-이유">요청 스코프가 필요한 이유</h4>

<p>세션은 보존한 정보를 언제 해제해야 할지 모른다.<br />
이를 세션 타임아웃으로 해결할 수 있지만 세션은 메모리도 많이 소비하는 단점이 있다.</p>

<h4 id="세션-스코프와-요청-스코프의-차이">세션 스코프와 요청 스코프의 차이</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">세션 스코프</th>
      <th style="text-align: center">요청 스코프</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">유효 범위</td>
      <td style="text-align: center">세션 시작, 종료 또는 타임아웃 될 때까지</td>
      <td style="text-align: center">요청 받은 다음 응답을 돌려줄 때까지</td>
    </tr>
    <tr>
      <td style="text-align: center">시작과 종료</td>
      <td style="text-align: center">웹 애플리케이션이 제어</td>
      <td style="text-align: center">애플리케이션 서버가 제어</td>
    </tr>
    <tr>
      <td style="text-align: center">주된 용도</td>
      <td style="text-align: center">사용자 정보의 보존</td>
      <td style="text-align: center">페이지 이동전후의 보존</td>
    </tr>
  </tbody>
</table>

<h3 id="웹-애플리케이션의-아키텍쳐">웹 애플리케이션의 아키텍쳐</h3>

<p>건축을 할 때 꼼꼼한 설계를 하듯, 소프트웨어도 개발 초기에 전체적인 구조를 철저히 검토해야한다.</p>

<ul>
  <li>아키텍처 : 소프트웨어는 필연적으로 닮은 부분이 나타나는데, 이런 설계 스타일과 설계에 바탕을 둔 전체 구조</li>
</ul>

<h4 id="-자바를-부품화하기-위한-방법---javabeans">➕ 자바를 부품화하기 위한 방법 - JavaBeans</h4>

<p>자바 클래스를 부품화하기 위한 것으로, 웹 애플리케이션에서는 단순히 데이터를 보존하기 위한 클래스 정도의 의미밖에 없다.<br />
웹 애플리케이션의 자바빈즈는 필드에 대응하는 세터와 게터가 존재한다.</p>

<p>애플리케이션의 고유 처리를 비즈니이라고 한다.<br />
비즈니스 로직은 사용자 인터페이스에 영향받지 않고 존재하는 부분이다.<br />
ex) 회원 관리 서비스를 웹 애플리케이션이 아니라 GUI 애플리케이션으로 구현한다면, 화면 구현 방법은 달라지지만 로그인 처리는 같다.</p>

<h3 id="jdbc를-통한-db-접근">JDBC를 통한 DB 접근</h3>

<p>웹 애플리케이션에서 데이터베이스로부터 정보를 얻기 위한 API로 JDBC를 사용한다.</p>

<ul>
  <li>데이터 소스 획득 : 데이텁베이스에 대한 접속을 구하기 위한 객체</li>
  <li>연결 획득</li>
  <li>SQL의 실행</li>
  <li>SQL 실행 결과의 취득</li>
</ul>

<h4 id="jdbc를-사용할-경우-단점">JDBC를 사용할 경우 단점</h4>

<p>단순한 쿼리에도 방대한 코드를 작성해야한다.</p>

<h3 id="mvc--layered-architecture">MVC + Layered Architecture</h3>

<p>Layered Architecture은 시스템을 계층화하고 하위 레이어가 제공하는 기능을 상위 레이어가 이용함으로 각 레이어 구조를 단순화한다.<br />
각 레이어를 먼제 3 계층으로 분리한다.</p>

<ul>
  <li>프레젠테이션 레이어 : 사용자와의 인터페이스를 담당하는 레이어</li>
  <li>비즈니스 로직 레이어 : 애플리케이션에서 구현해야 할 고유의 작업을 처리하기 위한 레이어</li>
  <li>데이터 엑세스 레이어 : 비즈니스 로직 레이어와 데이터베이스를 중개하기 위한 레이어. 비즈니스 로직에서 분리해 데이터베이스 연결 절차를 의식하지 않게 해준다.</li>
</ul>

<p>컨트롤러와 뷰는 프레젠테이션 레이어이며, 모델은 비즈니스 로직 레이어와 데이터 엑세스 레이어가 된다.</p>

<h3 id="dao-패턴을-이용한-데이터-액세스-레이어의-구현">DAO 패턴을 이용한 데이터 액세스 레이어의 구현</h3>

<p>DAO의 역할은 <strong>데이터베이스 접속을 은폐하는 것</strong>이다.</p>

<h3 id="rdb와-객체의-임피던스-불일치">RDB와 객체의 임피던스 불일치</h3>

<p>OR 매핑은 <strong>프로그래밍 언어의 객체와 관계형 데이터베이스를 대응시킨다.</strong><br />
관계형 데이터 베이스는 여러 개의 테이블과 그 관계를 이용해 정보를 관리한다.<br />
객체와 관계형 데이터베이스는 본질적으로는 같은 정보이지만, 표현 방법에는 큰 차이가 있을 수 있다.<br />
이를 <strong>임피던스 불일치</strong>라고 한다.</p>

<p>이런 임피던스 불일치릃 해결해주는 것이 바로 OR 매핑 프레임 워크이다.<br />
(이 밖에도 데이터베이스와의 접속을 관리하거나, 정보를 캐싱해 데이터베이스 접속을 빠르게 하는 등의 기능도 제공힌다.)</p>

<p>아이바티스를 이용하면 SQL이나 테이블의 구성이 변경되더라도 소스코드가 아니라 SQL 앱 파일만 바꾸면 되어 변경하기 쉽다.</p>

<h3 id="프레임워크-이용의-장점과-단점">프레임워크 이용의 장점과 단점</h3>

<h4 id="장점">장점</h4>

<ul>
  <li>설계, 개발 공수의 절감 : 아이바티스는 데이터베이스 연결에 관한 대부분의 처리를 대신 해준다.</li>
  <li>품질 향상</li>
  <li>테스트 공수의 절감</li>
</ul>

<h4 id="단점">단점</h4>

<ul>
  <li>학습 비용의 증대</li>
  <li>설계의 자유도 저하</li>
  <li>장기적인 기술력의 저하</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📋 프로가 되기 위한 웹기술 입문 1-3</title>
	  <link>//webbasic13</link>
	  <author></author>
	  <pubDate>2021-04-14T19:18:00+09:00</pubDate>
	  <guid>//webbasic13</guid>
	  <description><![CDATA[
	     <h2 id="1-웹-애플리케이션이란-무엇인가">1. 웹 애플리케이션이란 무엇인가?</h2>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">데스크톱 애플리케이션</th>
      <th style="text-align: center">웹 애플리케이션</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">처리 주체</td>
      <td style="text-align: center">자신의 PC</td>
      <td style="text-align: center">서버</td>
    </tr>
    <tr>
      <td style="text-align: center">화면 표시</td>
      <td style="text-align: center">운영체제 상에서 표시</td>
      <td style="text-align: center">웹 브라우저에서 표시</td>
    </tr>
    <tr>
      <td style="text-align: center">설치</td>
      <td style="text-align: center">필요</td>
      <td style="text-align: center">불필요</td>
    </tr>
  </tbody>
</table>

<h2 id="2-웹은-어떻게-발전했는가">2. 웹은 어떻게 발전했는가?</h2>

<hr />

<h3 id="www-등장의-배경">WWW 등장의 배경</h3>

<p>이메일이나 파일 전송 기술보다 더 편리하게 정보를 공유하자! <br />
정보를 텍스트파일만으로 표현하게 만드는 것이 HTTP이다. <br />
네트워크 상에서 링크된 하이퍼 링크의 연결을 WWW라고 부르기 시작했다. <br />
WWW에서는 웹 서버가 네트워크 상에 공개하는 하이퍼 텍스트를 축적하고 웹 클라이언트 요청에 따라 필요한 HTML 파일을 건네준다.</p>

<p>텍스트 중심으로 표현되던 웹 페이지를 문자와 그림과 함께 표현할 수 있게 만든 것이 NCSA 모자이크라는 웹 브라우저이다.</p>

<h3 id="웹에서-클라이언트와-서버의-역할-분담">웹에서 클라이언트와 서버의 역할 분담</h3>

<p>다양한 콘텐츠를 불특정 다수에게 공개하려면 콘텐츠를 한 곳에 관리해야한다.<br />
WWW에서는 사람들의 PC를 웹 클라이언트로, 멀리 떨어져 있는 웹 서버와 웹 클라이언트 사이를 인터넷으로 연결한다.</p>

<ul>
  <li>클라이언트 : 웹 클라이언트라는 컴퓨터 상에서 웹 브라우저라는 소프트웨어가 작동</li>
  <li>서버 : 우베 서버라는 컴퓨터 상에서 웹 서버라는 소프트웨어가 작동</li>
</ul>

<h3 id="url의-역할과-구조">URL의 역할과 구조</h3>

<p>콘텐츠를 고유하게 저장하기 위한 구조. <br />
스킴, 호스트명, 경로명으로 구성되어 있다.</p>

<h3 id="http의-역할">HTTP의 역할</h3>

<p>웹서버와 웹 클라이언트가 통신하기 위한 규약.4</p>

<h3 id="cgi-등장의-배경과-역할">CGI 등장의 배경과 역할</h3>

<p>동적인 페이지 요구에 따라 CGI가 등장하고,<br />
웹 서버가 클라이언트로부터 받은 요청을 웹 서버상에서 작동하는 프로그램을 보낸다.</p>

<h3 id="서블릿-등장의-배경">서블릿 등장의 배경</h3>

<p>CGI를 이용한 웹 애플리케이션은 개발 언어의 문제와, 성능 문제를 가지고 있다.<br />
웹 브라우저에서 요청이 도착할 때마다 CGI를 통해 프로세스를 기동하여 성능이 저하되었다.</p>

<p><strong>서블릿은 자바로 만들어진 HTML 등의 웹 콘텐츠를 생성하기 위한 프로그램.</strong><br />
CGI와 같은 개념이지만 콘텐츠를 생성하는 언어가 자바이며 객체지향을 지원하기 떄문에 대규모 애플리케이션 개발에 적합하다.<br />
또한 웹서버와 같은 프로세스 속에서 콘텐츠를 생성하는 프로그램이 작동하기 때문에 CGI 처럼 새로운 프로세스를 매번 기동할 필요가 없다.</p>

<p>자바는 JVM 덕분에 한 프로그램을 운영체제와 상관없이 어디에서나 동작시킬 수 있다.</p>

<p>CGI는 프로세스를 기동시켜 동적 컨텐츠를 만들어내고, 서블릿은 스레드를 실행시킨다.</p>

<p><a href="https://dannykim-5603.tistory.com/75">CGI와 서블릿 그리고 톰캣</a> 다음 글을 참고하자.</p>

<h3 id="jsp-등장의-배경">JSP 등장의 배경</h3>

<p>서블릿을 통해 출력되는 HTML을 상상하기 어려웠다.</p>

<p>JSP는 서블릿과 달리 출력되는 HTML에 거의 근접한 형태이다.<br />
JSP 내부에 적힌 자바 프로그램을 스크립틀릿이라고 한다.</p>

<p><strong>서블릿은 자바 코드에 HTML을 넣고, JSP는 HTML에 자바 코드를 넣는다.</strong></p>

<h3 id="웹-애플리케이션-프레임워크의-필요성">웹 애플리케이션 프레임워크의 필요성</h3>

<p>서블릿이나 JSP 만으로 웹 애플리케이션을 만드려면 코드량이 굉장히 늘어난다.</p>

<p>프레임워크는 재사용할 수 있는 부분을 늘려 애플리케이션 개발을 용이하게 하는 것이다.<br />
이로 인해 애플리케이션을 단기간에 개발할 수 있다.</p>

<h2 id="3-http를-이해하자">3. HTTP를 이해하자</h2>

<hr />

<h3 id="http-요청의-구조">HTTP 요청의 구조</h3>

<p><strong>요청 라인</strong></p>

<ul>
  <li>메서드 : 요청의 종류</li>
  <li>URL : 무엇을 원하는가</li>
  <li>HTTP 버전 : 버전에 따라 이용할 수 있는 메서드의 종류와 요청 헤더의 종류가 달라지므로 어떤 버전에 따른 요청인지 나타냄</li>
</ul>

<p><strong>대표적인 헤더</strong></p>

<ul>
  <li>
    <p>Accept : 웹 클라이언트가 받을 수 있는 데이터의 종류</p>
  </li>
  <li>
    <p>Accept-Language : 웹 클라이언트가 받을 수 있는 자연 언어의 종류</p>
  </li>
  <li>
    <p>User-Agent : 웹 브라우저의 종류와 버전</p>
  </li>
  <li>
    <p>Host : 요청을 보낸 곳의 호스트명과 포트 번호</p>

    <p>HTTP는 한 요청에 한 리소스만 취득할 수 있다.</p>
  </li>
</ul>

<h3 id="http-응답의-구조">HTTP 응답의 구조</h3>

<ul>
  <li>상태라인 : HTTP 버전, 상태 코드, 응답 구분</li>
  <li>메시지 헤더 : 응답에 관한 부가적인 정보</li>
  <li>메시지 본문 : HTML 파일 내용이 그대로 담김</li>
</ul>

<h3 id="ip-주소">IP 주소</h3>

<p>인터넷에 접속된 모든 컴퓨터는 IP 주소라는 숫자로 식별된다.<br />
하지만 인간이 IP 주소를 기억하기에는 어렵다.</p>

<p>IP 주소는 전세계에 하나만 있어야 한다.<br />
이 IP 주소는 대량의 IP 주소를 확보해 놓은 인터넷 서비스 프로바이더(ISP)로부터 할당받는다.</p>

<h3 id="호스트명을-ip-주소로-변환하는-시스템dns">호스트명을 IP 주소로 변환하는 시스템(DNS)</h3>

<p>도메인명과 IP 주소의 대응표를 가진 컴퓨터를 인터넷상에 배치하여 도메인명에 대응하는 IP 주소를 가르쳐준다.<br />
도메인명에 대응하는 DNS 서버는 분산 관리 되고 있다.</p>

<h3 id="get-요청과-post-요청의-차이">GET 요청과 POST 요청의 차이</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">GET</th>
      <th style="text-align: center">POST</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">매개변수 저장 장소</td>
      <td style="text-align: center">URL</td>
      <td style="text-align: center">BODY</td>
    </tr>
    <tr>
      <td style="text-align: center">보안</td>
      <td style="text-align: center">낮음 (URL이 노출됨)</td>
      <td style="text-align: center">비교적 높음 (서버 로그에 남지 않음)</td>
    </tr>
    <tr>
      <td style="text-align: center">매개변수의 길이</td>
      <td style="text-align: center">255 문자 이내로 제한될 가능성</td>
      <td style="text-align: center">제한 없음</td>
    </tr>
    <tr>
      <td style="text-align: center">매개변수의 보존 재현</td>
      <td style="text-align: center">용이</td>
      <td style="text-align: center">어려움</td>
    </tr>
  </tbody>
</table>

<h3 id="퍼센트-인코딩을-이용한-표현">퍼센트 인코딩을 이용한 표현</h3>

<p>한글로 매개변수를 전달할 경우, 문자 코드로 나타낸 16진수 값 각 앞머리에 %를 붙여 표시하는 퍼센트 인코딩을 사용한다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>🕹 Level 1. 체스 미션 정리 - Service Layer, DAO와 Repository</title>
	  <link>//Level-1.-%EC%B2%B4%EC%8A%A4-%EB%AF%B8%EC%85%98-%EC%A0%95%EB%A6%AC-Service-Layer,-DAO%EC%99%80-Repository</link>
	  <author></author>
	  <pubDate>2021-04-10T19:18:00+09:00</pubDate>
	  <guid>//Level-1.-%EC%B2%B4%EC%8A%A4-%EB%AF%B8%EC%85%98-%EC%A0%95%EB%A6%AC-Service-Layer,-DAO%EC%99%80-Repository</guid>
	  <description><![CDATA[
	     <h2 id="mvc와-service">MVC와 Service</h2>

<p>이번 미션에서 DB를  적용하면서 MVC 패턴에 추가로 Service 레이어를 도입하였다.<br />
또한 DAO와 데이터 전달을 위한 DTO를 처음 사용했는데, DTO를 정리하고 DAO에 대해서도 새롭게 배운 부분이 많아 정리 ✍️</p>

<p><img src="https://user-images.githubusercontent.com/43840561/114273538-6017c400-9a55-11eb-8ad4-3a62eb905948.png" alt="image" style="zoom:50%;" /></p>

<p>휴의 코멘트에 답변을 달다가 나의 코멘트 내용을 정정해주면서 같이 주신 참고자료가 있는데,<br />
<strong>서비스 계층과 비즈니스 로직</strong>이라는 개념이 다르다는 것을 제대로 인지하지 못하고 있었던 것 같다.</p>

<p>때문에 <a href="https://umbum.dev/1066">휴가 주신 MVC 패턴과 Service 레이어에 관한 글</a>을 읽고 간단히 정리해본다. <br />
<em>각 계층에 대한 개념은 조금씩 상이하니 일단 블로그 글은 서비스 계측과 비즈니스 로직에 대한</em>
<em>참고 정도만 한 수준에서 정리하고 다음 레벨에서 상세히 잡아가는 것이 좋겠다고 하셨다.</em></p>

<h3 id="layered-architecture">Layered Architecture</h3>

<p><img src="https://herbertograca.files.wordpress.com/2017/07/2010s-layered-architecture.png?w=640" alt="Layered Architecture – @hgraca" style="zoom: 67%;" /></p>

<p>일반적으로 사용하는 레이어를 구분한다면 위와 같이 나눌 수 있다.  MVC 패턴 또한 이 Layer를 잘 분리하기 위해 존재한다.</p>

<h4 id="layer-분리의-장점-">Layer 분리의 장점 ?</h4>

<ul>
  <li>각 계층이 애플리케이션 내에서 특정 역할만을 수행하게 나눔으로, 비즈니스 요청을 충족하기 위해 수행해야하는 작업에 대한 추상화를 이룬다.<br />
추상화가 잘 이루어진다면 서로 연결되어 있는 계층들이 독립적으로 계층에서 부품을 갈아끼우듯 변경할 수 있다.</li>
  <li>각 계층은 하위 계층에만 종속되고 상위 계층으로는 독립적으로 구성함으로, 위에서 아래로 떨어지는 간단한 구조로 만든다.<br />
이로써 각 Layer를 넘나들면서 꼬여있는 의존 관계를 만들지 않는다.</li>
</ul>

<h4 id="application-layer--service-layer">Application Layer (= Service Layer)</h4>

<p>도메인 모델을 묶어서 소프트웨어에서 사용 가능한 핵심 작업의 집합을 설정하는 계층이다.<br />
보통 도메인 모델 하나만으로는 소프트웨어에서 처리하고자 하는 복잡한 작업을 할 수 없다.<br />
때문에 여러 도메인 모델을 불러와 가공하고 비즈니스 로직을 호출해야하는데 이런 작업을 해주는 Layer가 필요하다.<br />
여기서 <strong>여러 비즈니스 로직들을 의미있는 수준으로 묶어서 추상화하는 것</strong>이 바로 Application Layer이다. <br />
만약 별도의 캡슐화가 필요하지 않은 경우에는 도메인 모델 그대로를 이 서비스로 만들 수 있다.</p>

<p><strong>❓ 추상화가 필요한 이유</strong> <br />
만약 UI, Gateway 같은 내부의 서비스 등 다양한 인터페이스로부터 작업을 요청 받는다면, <br />
각 인터페이스의 종류와 목적이 다르더라도 이를 통해 공통적으로 사용하는 작업이 있을 것이다.<br />
이 공통적인 작업이 각각에서 정의할 경우 중복이 발생하는데, 이를  Service Layer에서 인터페이스로 정의하여 중복을 제거한다.<br />
즉, <strong>핵심적인 API를 제공하는 계층</strong>이라고 할 수 있다.<br />
중요한 것은 Service Layer는 추상화 계층으로 두고, 핵심 로직은 Business Layer에 두는 것이 옳다.</p>

<h4 id="business-layer-domain-model">Business Layer (Domain Model)</h4>

<p>데이터와 이에 관련된 비즈니스 로직인 메서드를 가지고 있는 객체이다.<br />
Model 객체가 단순히 필드와 게터, 세터만을 가지고 있으면 DTO와 다를 것이 없다. (안티패턴)<br />
즉, 도메인 모델에서 해당 데이터에 대한 비즈니스 로직을 가지고 있어야 한다.</p>

<hr />

<h2 id="dao">DAO</h2>

<p>미션이 merge된 후, 미처 질문하지 못한 것이 있어 휴에게 DM으로 질문을 남겼다.<br />
현재 나의 로직에서는 chessGame 객체를 만들기 위해서 piece가 필요한데, 
chessgame 테이블과 piece 테이블 각각에서 쿼리를 날려 데이터를 받아오고<br />
이를 service에서 조합해(?) chessGame 객체를 만들고 있었다.</p>

<p><img src="https://user-images.githubusercontent.com/43840561/114275347-32cf1400-9a5d-11eb-8961-2bca4de75df5.png" alt="image" /></p>

<p>하지만 사실 쿼리를 다음과 같이 join을 사용해서 chessGame 객체를 만들기 위한 데이터를 얻어올 수 있었다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">turn</span><span class="p">,</span> <span class="n">isFinish</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="k">position</span> <span class="k">FROM</span> <span class="n">chess_game</span> <span class="n">cg</span> <span class="k">inner</span> <span class="k">join</span> <span class="n">piece</span> <span class="n">p</span> <span class="k">WHERE</span> <span class="n">cg</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">chessGameId</span><span class="p">;</span>
</code></pre></div></div>

<p>사실 이렇게 join을 통해서 얻어오려 했지만, dao를 테이블 별로 만들었더니 이 쿼리를 어디서 수행해야할지 판단할 수 없었다. <br />
만약 chessGameDao에서 수행한다 하더라도 여기서piece 객체를 만드는 것도 아이러니하다고 생각도 들었다. <br />
때문에 이렇게 DB에서 받은 결과를 어디에서 조합해야하는가에 대한 질문을 남겼다.<br />
휴의 답변으로 Repository에 대한 것이 언급되었는데,<br />
사실 이 질문 전에도 크루들과 Repository가 도대체 무엇인가에 대해서 토론했었다.<br />
휴의 답변과 보내주신 참고 링크 덕분에 Repository가 어떤 역할을 하는 것인지 명확히 파악할 수 있었다.</p>

<blockquote>
  <p><a href="http://egloos.zum.com/aeternum/v/1160846">DAO와 REPOSITORY 논쟁</a></p>
</blockquote>

<h3 id="dao와-reposotory의-차이점">DAO와 Reposotory의 차이점</h3>

<h4 id="dao-1">DAO</h4>

<ul>
  <li>DAO 인터페이스는 DB의 CRUD 쿼리와 1:1 매칭되는 세밀한 단위의 오퍼레이션을 제공한다.</li>
  <li>테이블 별로 하나의 DAO를 만든다.</li>
  <li>RANSACTION SCRIPT 패턴과 함께 사용된다.</li>
  <li>Persistence Layer에 속한다.</li>
</ul>

<h4 id="repository">Repository</h4>

<ul>
  <li>Repository는 다수의 DAO를 호출하는 방식으로 구성된다.</li>
  <li>Repository에서 제공하는 한 오퍼레이션이 DAO의 여러 오퍼레이션에 맵핑되는 것이 일반적이다.</li>
  <li>DOMAIN MDOEL 패턴과 함께 사용된다.</li>
  <li>Domain Layer에 속한다.</li>
  <li>객체 컬렉션 처리에 관한 책임만을 가지고 있다. 외부 시스템과의 상호작용은 별도의 Service가 담당한다.</li>
</ul>

<p>따라서 현재 나의 질문 같은 경우는 <strong>Repository</strong>를 통해 ChessGameDao와 PieceDao로부터<br />
가져온 <strong>데이터에 대한 집합 처리</strong>를 함으로 해결할 수 있다. <br />
이 둘의 차이에 대해서는 지금 단계에서 이정도로 잡고 가자 !</p>


	  ]]></description>
	</item>

	<item>
	  <title>🕹 Level 1. 체스 미션 정리 - JDBC</title>
	  <link>//Level-1.-%EC%B2%B4%EC%8A%A4-%EB%AF%B8%EC%85%98-%EC%A0%95%EB%A6%AC-JDBC</link>
	  <author></author>
	  <pubDate>2021-04-10T19:18:00+09:00</pubDate>
	  <guid>//Level-1.-%EC%B2%B4%EC%8A%A4-%EB%AF%B8%EC%85%98-%EC%A0%95%EB%A6%AC-JDBC</guid>
	  <description><![CDATA[
	     <h2 id="jdbc-java-database-connectivity">JDBC (Java DataBase Connectivity)</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/b50e0a8b-eed6-46bd-912e-bd975a37d2de/image.png" alt="" /></p>

<p>JDBC는 DB에 접근할 수 있도록 Java에서 제공하는 API로, 모든 Java의 Data Access 기술의 근간이다.<br />
모든 Persistence Framework는 내부적으로 JDBC API를 이용한다.</p>

<h3 id="jdbc를-통한-db-연결">JDBC를 통한 DB 연결</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d634167-9324-4c86-abdb-023383bb3af8/image.png" alt="" /></p>

<h4 id="1-드라이버-로드">1. 드라이버 로드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
  <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"com.mysql.cj.jdbc.Driver"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" !! JDBC Driver load 오류: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>제공되는 클래스를 인스턴스화해서 내부적으로 저장해 메모리에 드라이버를 사용할 수 있게한다.<br />
이 메소드를 통해 드라이버를 사용할 수 있도록 초기화 한다. <br />
생성자를 통한 인스턴스 생성과 같다고 볼 수 있다.</p>

<h4 id="2-connection-객체-생성">2. Connection 객체 생성</h4>

<p>DriverManager 클래스는 드라이버를 통해 Conection 객체를 만든다.<br />
Connection은 DB와 연결하는 객체로 DB와 연결하는 통로이며, 이를 통해 쿼리를 전달하고 결과값을 반환받는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
  <span class="n">con</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="s">"jdbc:mysql://"</span> <span class="o">+</span> <span class="n">server</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">database</span> <span class="o">+</span> <span class="n">option</span><span class="o">,</span> <span class="n">userName</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"정상적으로 연결되었습니다."</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"연결 오류:"</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="3-statement--preparedstatement-객체-생성">3. Statement / PreparedStatement 객체 생성</h4>

<p><strong>Statement</strong> 객체를 통해 insert 쿼리를 작성하면 아래와 같이 각각의 값을 콤마와 따옴표로 구별해야하기 때문에<br />
가독성도 떨어지고 잘못 입력할 확률도 커진다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createStatement</span><span class="o">();</span>
<span class="n">String</span> <span class="n">query</span> <span class="o">=</span> <span class="s">"INSERT INTO piece(color, name, position, chessGameId) VALUE ('"</span> <span class="o">+</span> <span class="n">color</span> <span class="o">+</span> <span class="s">"','"</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span>  <span class="s">"','"</span> <span class="o">+</span> <span class="n">position</span> <span class="o">+</span> <span class="s">"','"</span> <span class="o">+</span> <span class="n">chessGameId</span> <span class="s">"')"</span><span class="o">;</span>
<span class="n">resultCount</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">(</span><span class="n">insertQuery</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>PreparedStatement</strong> 객체를 사용하면 다음과 같이 속성 값을 ?로 설정하고 set을 통해 설정하면, 자동으로 쿼리를 완성시켜준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">String</span> <span class="n">query</span> <span class="o">=</span> <span class="s">"INSERT INTO piece(color, name, position, chessGameId) VALUE (?, ?, ?, ?)"</span><span class="o">;</span>
<span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dbManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
     <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">query</span><span class="o">))</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">Piece</span> <span class="n">piece</span> <span class="o">:</span> <span class="n">pieces</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">piece</span><span class="o">.</span><span class="na">color</span><span class="o">().</span><span class="na">name</span><span class="o">());</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">piece</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">piece</span><span class="o">.</span><span class="na">position</span><span class="o">().</span><span class="na">key</span><span class="o">());</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">chessGameId</span><span class="o">);</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">executeQuery()</code> : select를 통한 정보를 조회하고, 쿼리를 전송 후 결과 객체 반환한다.</li>
  <li><code class="highlighter-rouge">executeUpdate(String query)</code> : Insert, Update, Delete 쿼리를 전송하고 변경된 레코드 수를 반환한다.</li>
</ul>

<h4 id="4-resultset-객체-반환">4. ResultSet 객체 반환</h4>

<p>ResultSet 객체는 select 쿼리의 결과값을 모두 가지고 있는 객체이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">Piece</span> <span class="n">piece</span> <span class="o">=</span> <span class="n">PieceFactory</span><span class="o">.</span><span class="na">findByInfo</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"color"</span><span class="o">),</span>
                        <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"position"</span><span class="o">));</span>
                <span class="n">pieces</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">piece</span><span class="o">);</span>
            <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">boolean next()</code> : 결과 레코드가 존재하면 true, 없으면 false</li>
  <li><code class="highlighter-rouge">boolean previous()</code> : 이전 레코드로 이동 (가장 첫 행이면 false)</li>
  <li><code class="highlighter-rouge">boolean first()</code> : 처음 위치로 이동 (레코드가 없으면 false)</li>
  <li><code class="highlighter-rouge">boolean last()</code> : 마지막 위치로 이동 (레코드가 없으면 false)</li>
  <li><code class="highlighter-rouge">String getString(String colLabel)</code> : 현재 커서 위치의 컬럼명에 해당하는 문자열 반환</li>
  <li><code class="highlighter-rouge">int getInt(String colLabel)</code> :  현재 커서 위치의 컬럼명에 해당하는 정수값 반환</li>
  <li><code class="highlighter-rouge">String getString(int colIndex)</code> : 컬럼 인덱스에 해당하는 문자열 반환 (1부터 시작)</li>
  <li><code class="highlighter-rouge">int getInt(int colIndex)</code> : 컬럼 인텍스에 해당하는 정수값 반환 (1부터 시작)</li>
</ul>

<h4 id="5-자원-해제">5. 자원 해제</h4>

<p>DB 관련 작업을 하면서 <strong>Connection, Statement / PreparedStatement, ResultSet</strong> 객체를 사용했다.<br />
DB 관련 처리 작업이 완료되었다면, 사용했던 객체들을 메모리에서 해제해주어야 한다.<br />
만약 해당 자원들을 해제해주지 않으면 다음과 같은 문제점이 발생할 수 있다.</p>

<ul>
  <li>Connection pool을 사용하지 않은 상태에서 Connection을 닫지 않으면 DBMS에 연결된 새로운 Connection을 생성할 수 없다.</li>
  <li>Statement / PreparedStatement를 해제하지 않으면, 생성된 갯수가 증가하면서 더 이상 새로운 Statement / PreparedStatement를 생성할 수 없다.</li>
</ul>

<p>이번 미션에서는 <strong>try-with-resource</strong>를 통해 자원 close 처리 개선을 하였다.
이는 try 블록의 소괄호 안에서 자원 해제가 필요한 객체를 할당하면 try catch 절이 종료되면서 <br />
자원 해제가 필요한 connection과 preparedstatement를 자동으로 close되는 try-catch 문이다.<br />
preparedstatement를 해제하면 현재(가장 최근에 생성한) ResultSet도 자동으로 해제된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Piece</span><span class="o">&gt;</span> <span class="nf">findAllByChessGameId</span><span class="o">(</span><span class="kt">int</span> <span class="n">chessGameId</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">Piece</span><span class="o">&gt;</span> <span class="n">pieces</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">String</span> <span class="n">query</span> <span class="o">=</span> <span class="s">"SELECT color, name, position FROM piece WHERE chessGameId = ?"</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dbManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
       <span class="n">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">query</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">pstmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">chessGameId</span><span class="o">);</span>
    <span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>

    <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
      <span class="n">Piece</span> <span class="n">piece</span> <span class="o">=</span> <span class="n">PieceFactory</span><span class="o">.</span><span class="na">findByInfo</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"color"</span><span class="o">),</span>
                                            <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span> <span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"position"</span><span class="o">));</span>
      <span class="n">pieces</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">piece</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">pieces</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="sql-exception에-대하여">SQL Exception에 대하여</h3>

<p><img src="https://user-images.githubusercontent.com/43840561/114271267-8173b280-9a4b-11eb-926a-88e6447a527d.png" alt="image" style="zoom:50%;" /></p>

<p>checked exception인 SQLException에 대해 어떻게 처리를 할지 고민하다가 결국 외부로 던져주기만 했었다.<br />
휴의 피드백대로 지금은 DAO에서 stacktrace만 출력하도록 변경하였다. <br />
추후에 휴가 SQLException에 대한 참고 자료를 보내주셨다.</p>

<p>[<a href="http://wonwoo.ml/index.php/post/878">Toby spring] 사라진 SQLException</a>에 따르면 DAO에서 발생하는 예외를 계속해서 외부로 던져주는 것도 하나의 방법이지만,<br />
이렇게 되면 예외가 발생한 DAO를 사용한 Service에서 왜 SQLException이 발생했는지 알 수 없기 때문에 <br />
아래와 같이 SQLException을 포장한 예외의 의미를 담은 커스텀 예외를 만들어 던져주는 것도 하나의 방법이 될 수 있다.  <br />
이렇게 되면 의미가 분명한 예외로 전달해서 처리할 수 있게 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
  <span class="c1">//...</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">throw</span> <span class="nf">DuplicatePieceIdException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>

<span class="k">try</span> <span class="o">{</span>
  <span class="c1">//...</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">throw</span> <span class="nf">DuplicatePieceIdException</span><span class="o">().</span><span class="na">initCause</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>또 자료에 따르면 JDBCTemplate을 사용하면 이 내부에서 SQLException을 처리해준다고 하니 차차 개념을 알아가자.</p>

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://codevang.tistory.com/205">JDBC를 이용한 DB작업_DB 연동 및 데이터 작업 2/3</a></li>
  <li><a href="https://javacan.tistory.com/entry/78">개발자의 실수를 줄여주는 java.sql.Connection 만들기</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
