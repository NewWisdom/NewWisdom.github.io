<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>🌱 @JsonProperty, @JsonNaming</title>
	  <link>//spring-json-property</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-json-property</guid>
	  <description><![CDATA[
	     <h4 id="이-글을-쓴-배경">이 글을 쓴 배경…</h4>

<p>클라이언트에서 HTTP Body에 Json을 실어 요청을 실어 보내고 이를 받는 DTO를 만들어 사용하고 있었다.<br />
하지만 API 명세로 클라이언트에서는 key 네이밍으로 스네이크 케이스를 사용하고,<br />
DTO 필드로는 스네이크 케이스를 사용하기 때문에 Jackson이 DTO에 제대로 매핑하지 못해 예외가 발생했다.</p>

<p>그래서 API 명세에서, 클라이언트가 key를 스네이크 케이스를 사용하여 보내주도록 바꾸려 하였으나,<br />
똑똑한 스프링은 이를 위한 어노테이션을 제공해주고 있었다.</p>

<h3 id="문제-상황-테스트">문제 상황 테스트</h3>

<h4 id="testdto">TestDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>스네이크 케이스</strong></li>
</ul>

<h4 id="test2dto">Test2Dto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test2Dto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">test_id</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Test2Dto</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTest_id</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTest_id</span><span class="o">(</span><span class="n">Long</span> <span class="n">test_id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">test_id</span> <span class="o">=</span> <span class="n">test_id</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>필드가 <strong>카멜 케이스</strong></li>
</ul>

<h4 id="testcontroller">TestController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">TestDto</span><span class="o">&gt;</span> <span class="nf">test</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">TestDto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTestId</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">TestDto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/test2"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Test2Dto</span><span class="o">&gt;</span> <span class="nf">test2</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">Test2Dto</span> <span class="n">testDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testDto</span><span class="o">.</span><span class="na">getTest_id</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 때 다음과 같은 테스트를 돌려본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">postTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
    <span class="c1">// given</span>
    <span class="n">Test2Dto</span> <span class="n">testDto</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Test2Dto</span><span class="o">(</span><span class="mi">10L</span><span class="o">);</span>
    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">().</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">testDto</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">json</span><span class="o">);</span>

    <span class="c1">// then</span>
    <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
            <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">json</span><span class="o">)</span>
            <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.test_id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">10L</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/66938519-c630-41fc-9fac-1899e6c1ab1d/image.png" style="zoom:80%;" /></p>

<p><strong>결과는 실패한다!</strong><br />
왜냐하면 클라이언트는 스네이크 케이스로 키 값을 보내고 응답에 대한 키 값도 <strong>스네이크 표기법</strong>이었는데,<br />
반환하는 DTO의 필드가 카멜 케이스이기 때문에 자동으로 키 값이 카멜 케이스로 잡히기 때문이다.</p>

<p>프론트에서는 스네이크 케이스가 컨벤션이고, 우리 자바에서는 카멜 케이스가 컨벤션인데…<br />
그럼 DTO의 필드를 스네이크로 바꿔야 하나? 혹은 요청의 키 값을 카멜로 바꿔야 하나?  🤷‍♀️</p>

<hr />

<h3 id="jsonproperty">@JsonProperty</h3>

<p>만능 스프링은 역시 이에 대한 어노테이션을 제공해준다.<br />
<code class="highlighter-rouge">@JsonProperty</code> 는 JSON 변환 시 key 이름을 우리가 원하는 대로 설정할 수 있게 해준다. <br />
이 어노테이션을 사용하기 위해서는 jackson 라이브러리를 사용하여야 하지만, 이미 스프링 내부에서는 jackson을 사용하고 있다.</p>

<p>사용하는 방법은 원하는 필드에 해당 어노테이션을 달고, 매핑할 key 이름을 옵션으로 준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="nd">@JsonProperty</span><span class="o">(</span><span class="s">"test_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/8f93201e-e222-4c63-b5cf-16802205b7d5/image.png" style="zoom:80%;" /></p>

<p><strong>이렇게 되면 테스트 성공이다!</strong></p>

<p>그러면 필드 하나하나에 이렇게 매핑해주어야하나…?</p>

<hr />

<h3 id="jsonnaming">@JsonNaming</h3>

<p>다행히도 이런 중복되는 작업을 스프링 어노테이션으로 해결할 수 있다.<br />
클래스에 <code class="highlighter-rouge">@JsonNaming</code> 을 붙이면 모든 필드에 대한 표기법 매핑을 정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.PropertyNamingStrategy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.annotation.JsonNaming</span><span class="o">;</span>

<span class="nd">@JsonNaming</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">PropertyNamingStrategy</span><span class="o">.</span><span class="na">SnakeCaseStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">testId</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">TestDto</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getTestId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestId</span><span class="o">(</span><span class="n">Long</span> <span class="n">testId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">testId</span> <span class="o">=</span> <span class="n">testId</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/97f9d5b2-14ce-4015-a656-4d697fee1567/image.png" style="zoom:80%;" /></p>

<p>참고로 표기법 전략은 <code class="highlighter-rouge">SnakeCaseStrategy</code> 말고도 다양하다!</p>

<h4 id="전역적으로-설정하고-싶어">전역적으로 설정하고 싶어!</h4>

<p><strong>application.properties</strong> 에서 다음과 같이 애플리케이션 설정으로 둘 수도 있다.<br />
이러면 각각의 클래스에 어노테이션을 달아주지 않아도 모든 키 매핑에 대한 처리가 가능하다!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spring</span><span class="o">.</span><span class="na">jackson</span><span class="o">.</span><span class="na">property</span><span class="o">-</span><span class="n">naming</span><span class="o">-</span><span class="n">strategy</span><span class="o">=</span><span class="n">SNAKE_CASE</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 스프링의 DI 방법 (생성자 주입 VS 필드 주입)</title>
	  <link>//responsebody</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//responsebody</guid>
	  <description><![CDATA[
	     <h2 id="스프링의-di-방법">스프링의 DI 방법</h2>

<h3 id="di">DI</h3>

<h4 id="강한-결합">강한 결합</h4>

<p>객체 내부에서 다른 객체를 생성할 경우, 강한 결합도를 가지고 있다고 말한다.<br />
A 클래스에서 B라는 객체를 직접 생성하다가, B 객체를 C 객체로 바꾸고 싶을 때 A 클래스도 수정해야하기 때문이다.</p>

<h4 id="느슨한-결합">느슨한 결합</h4>

<p>외부에서 생성된 객체를 인터페이스를 통해 넘겨받아 결합도를 낮춘 것을 느슨한 결합이라고 한다.<br />
런타임시에 의존 관계가 결정되기 때문에 유연한 구조를 가진다.</p>

<h3 id="1-생성자-주입constructor-injection">1. 생성자 주입(Constructor Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationConstructorService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StationConstructorService</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>스프링 4.3 부터는 단일 생성자인 경우 생성자에 <code class="highlighter-rouge">@Authowired</code>를 붙이지 않아도 된다.</p>

<h3 id="2-필드-주입field-injection">2. 필드 주입(Field Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationFieldService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>필드에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="3-수정자-주입setter-injection">3. 수정자 주입(Setter Injection)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationSetterService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">sayHi</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">stationRepository</span><span class="o">.</span><span class="na">sayHi</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStationRepository</span><span class="o">(</span><span class="n">StationRepository</span> <span class="n">stationRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationRepository</span> <span class="o">=</span> <span class="n">stationRepository</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>setter를 통해 의존성을 주입하는 방법으로 setter에 <code class="highlighter-rouge">@Autowired</code> 어노테이션을 붙여준다.</p>

<h3 id="필드-주입대신-생성자-주입을-권고하는-이유">필드 주입대신 생성자 주입을 권고하는 이유</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/c301577d-d47d-4254-ae0c-0419ce315106/image.png" style="zoom:67%;" /></p>

<p>인텔리제이에서 필드 주입을 사용할 경우 생성자 주입으로 변경할 것을 권고한다.<br />
그 이유는 무엇일까?</p>

<h4 id="순환-참조를-방지할-수-있다">순환 참조를 방지할 수 있다.</h4>

<p>극단적인 예로 객체 A가 객체 B를 참조하고, 다시 객체 B가 객체 A를 참조한다고 하자.</p>

<p>먼저 <strong>필드 주입</strong>의 경우 순환 참조에서 어떤 문제를 일으키는지 보겠다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GameService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">PieceService</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PieceService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>테스트</strong></p>

<p><img src="https://images.velog.io/images/new_wisdom/post/4bd9b5b9-a0a7-44e7-9931-3b9acebede2d/image.png" style="zoom:67%;" /></p>

<p>위와 같이 간단한 테스를 해보았을 때, 애플리케이션 구동은 잘 되지만 서로의 메소드를 계속해서 호출하고 있기 때문에 <code class="highlighter-rouge">StackOverflowError</code> 가 발생한다.<br />
어쨌든 순환 참조가 일어났음에도 스프링 컨테이너가 동작하는 애플리케이션 자체는 문제없이 구동된다.</p>

<p>그렇다면 생성자 주입의 경우는 어떠할까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameServiceImpl</span> <span class="kd">implements</span> <span class="n">GameService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">GameServiceImpl</span><span class="o">(</span><span class="n">PieceServiceImpl</span> <span class="n">pieceService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pieceService</span> <span class="o">=</span> <span class="n">pieceService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pieceService</span><span class="o">.</span><span class="na">pieceMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PieceServiceImpl</span> <span class="kd">implements</span> <span class="n">PieceService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PieceServiceImpl</span><span class="o">(</span><span class="n">GameServiceImpl</span> <span class="n">gameServiceImpl</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gameServiceImpl</span> <span class="o">=</span> <span class="n">gameServiceImpl</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pieceMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">gameServiceImpl</span><span class="o">.</span><span class="na">gameMethod</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://images.velog.io/images/new_wisdom/post/cfb25981-3055-4aef-9b36-568e12ad4760/image.png" style="zoom:67%;" /></p>

<p>로그로 순환참조가 일어나고 있음을 보여주면서 컨테이너가 빈들을 등록하지도 못한채, 애플리케이션 구동 자체도 실패하였다.</p>

<p>여기서 이런 차이점을 보이는 이유는 필드 주입과 생성자 주입은 빈을 주입하는 순서에 차이가 있기 때문이다.</p>

<p><strong>필드 주입</strong>은 빈을 생성 후 어노테이션이 붙은 필드에 해당하는 빈을 찾아서 주입한다.<br />
빈 생성이 먼저 일어나고, 필드에 대한 주입을 수행하는 것이다.</p>

<p><strong>생성자 주입</strong>은 생성자로 객체를 생성하는 시점에 필요한 빈을 주입한다.<br />
먼저 빈을 생성하지 않고, 생성자의 인자에 사용되는 빈을 찾거나 빈 팩터리에서 만드는 순서이다.</p>

<p>때문에 객체 생성 시점에 빈을 주입하는 생성자 주입은 순환 참조에 대한 오류를 겪을 수 있다.<br />
순환된 참조 관계를 가지는 객체들이 생성되지 않은 시점에서 빈을 참조하기 때문이다.<br />
이렇게 보면 어찌됐든 애플리케이션을 구동 시키는 필드 주입이 더 좋다고 생각할 수 있다.</p>

<p>하지만 객체의 순환 참조가 일어난다는 것은 애초에 잘못된 설계라고 할 수 있다.<br />
때문에 <strong>오히려 생성자 주입을 사용하여 순환 참조가 되는 설계를 막을 수 있도록 하자.</strong></p>

<h3 id="테스트-코드-작성에-용이">테스트 코드 작성에 용이</h3>

<p>만약 필드 주입을 사용해 작성된 클래스라면, 스프링같은 DI 프레임 워크 위에서 동작하지 않는 단위 테스트에서 의존 관계를 가지는 객체를 생성해서 주입할 수 있는 방법이 없다.<br />
외부에 노출 된 정보가 없기 때문에 스프링 컨테이너가 생성해서 주입해주는 방식으로는 의존 관계를 가지고 있는 메소드를 단위 테스트 할 경우 <code class="highlighter-rouge">NullPointerException</code> 이 발생한다.<br />
하지만 생성자 주입 방식의 경우 테스트 코드를 작성할 때 원하는 구현체를 생성자에 넘겨주면 되기 때문에 테스트에 더 용이하다고 할 수 있다.</p>

<h3 id="immutable">Immutable</h3>

<p>필드 주입과 수정자 주입은 해당 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 없다.<br />
즉 가변 객체로만 사용이 가능한 것이다.</p>

<p>하지만 생성자 주입은 필드를 <code class="highlighter-rouge">final</code>로 선언할 수 있다.<br />
이로 인해 가변 객체로 인해 발생할 수 있는 오류를 사전에 막는다.</p>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://yaboong.github.io/spring/2019/08/29/why-field-injection-is-bad/">스프링 - 생성자 주입을 사용해야 하는 이유, 필드인젝션이 좋지 않은 이유</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>🌱 Spring에서 request 처리 과정</title>
	  <link>//request</link>
	  <author></author>
	  <pubDate>2021-04-20T19:18:00+09:00</pubDate>
	  <guid>//request</guid>
	  <description><![CDATA[
	     <h2 id="spring에서-request-처리-과정">Spring에서 request 처리 과정</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/a2caaa9e-bde3-4b10-9e44-8a5a8629c200/image.png" style="zoom:50%;" /></p>

<ul>
  <li><strong>DispatcherServlet</strong> : 클라이언트의 요청을 전달 받아 요청에 맞는 컨트롤러가 반환한 결과값을 View에 전달하여 알맞은 응답 생성</li>
  <li><strong>HandlerMapping</strong> : 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정</li>
  <li><strong>Controller</strong> : 클라이언트의 요청을 처리한 뒤, 결과를 DispatcherServlet에 반환</li>
  <li><strong>ModelAndView</strong> : 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담음</li>
  <li><strong>ViewResolver</strong> : 컨트롤러의 처리 결과를 생성할 뷰를 결정</li>
  <li><strong>View</strong> : 컨트롤러의 처리 결과 화면을 생성, JSP 또는 템플릿 엔진을 뷰로 사용</li>
</ul>

<ol>
  <li>클라이언트가 서버에 요청을 하면 <strong>DispatcherServlet</strong>이 요청을 가로챈다.</li>
  <li>요청을 가로챈 <strong>DispatcherServlet</strong>은 HandlerMapping에게 어떤 컨트롤러에게 요청을 위임하면 좋을지 물어본다. <br />
(HandlerMapping은 <code class="highlighter-rouge">@Controller</code>로 등록한 것들을 스캔해서 찾아 놓았다.)</li>
  <li>요청에 매핑된 <strong>Controller</strong>가 있다면 @RequestMapping을 통하여 요청을 처리할 메서드에 도달한다.  <br />
(이는 HandlerAdapter가 책임진다.)</li>
  <li><strong>Controller</strong>에서는 해당 요청을 처리할 Service에게 비즈니스 로직을 위임한다.</li>
  <li><strong>Service</strong>에서는 DB 접근이 필요할 경우 DB 처리를 DAO에게 위임한다.</li>
  <li><strong>DAO</strong>는 데이터 정보를 받아 Service에게 돌려준다.<br />
(결과로 받은 Entity 객체를 가지고 Response에 필요한 <strong>DTO</strong> 객체로 변환한다.)</li>
  <li>모든 비즈니스 로직을 끝낸 <strong>Service</strong>가 결과물을 <strong>Controller</strong>에 넘긴다.</li>
  <li>결과물을 받은 <strong>Controller</strong>는 필요에 따라 Model 객체에 결과물을 넣거나, View 정보를 담아 <strong>DispatcherServlet</strong>에게 보낸다.</li>
  <li><strong>DispatcherServlet</strong>은 <strong>ViewResolver</strong>에게 받은 뷰에 대한 정보를 넘긴다.</li>
  <li><strong>ViewResolver</strong>는 해당 View를 찾아 <strong>DispatcherServlet</strong>에게 알려준다.<br />
(serffix, prefix를 붙여주는 것도 ViewResolver에서 수행한다.)</li>
  <li><strong>DispatcherServlet</strong>은 응답할 View에게 Render를 지시하고 <strong>View</strong>는 응답 로직을 처리한다.</li>
  <li><strong>DispatcherServlet</strong>이 클라이언트에게 렌더링된 View를 응답한다.</li>
</ol>

<hr />

<h3 id="참고">참고</h3>

<p><a href="https://jeong-pro.tistory.com/96">Spring MVC 구조의 처리 과정을 설명해보시오. (MVC process)</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 통합 테스트 VS 단위 테스트</title>
	  <link>//unit-test-vs</link>
	  <author></author>
	  <pubDate>2021-04-16T19:18:00+09:00</pubDate>
	  <guid>//unit-test-vs</guid>
	  <description><![CDATA[
	     <h2 id="통합-테스트">통합 테스트</h2>

<p>실제 운영 환경에서 사용될 클래스들을 통합하여 테스트한다.<br />
기능 검증이 아닌 스프링 프레임워크에서 전체적으로 플로우가 제대로 동작하는지 검증하기 위해 사용한다.</p>

<h4 id="장점">장점</h4>

<ul>
  <li>스프링 부트 컨테이너를 띄워 테스트하기 때문에 운영환경과 가장 유사한 테스트가 가능하다.</li>
  <li>전체적인 Flow를 쉽게 테스트 할 수 있다.</li>
</ul>

<h4 id="단점">단점</h4>

<ul>
  <li>애플리케이션의 설정, 모든 Bean을 로드하기 때문에 시간이 오래걸리고 무겁다.</li>
  <li>테스트 단위가 커 디버깅이 어렵다.</li>
</ul>

<h3 id="springboottest"><strong>@SpringBootTest</strong></h3>

<ul>
  <li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@Transactional</span>
<span class="kd">class</span> <span class="nc">ChessServiceImplTest</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="springboottest-의-파라미터들">@SpringBootTest 의 파라미터들</h4>

<ul>
  <li><strong>value</strong>: 테스트가 실행되기 전에 적용할 프로퍼티 주입.(기존의 프로퍼티 오버라이드)</li>
  <li><strong>properties</strong> : 테스트가 실행되기 전에 {key=value} 형식으로 프로퍼티 추가.</li>
  <li><strong>classes</strong> : ApplicationContext에 로드할 클래스 지정. (지정하지 않으면 @SpringBootConfiguration을 찾아서 로드)</li>
  <li><strong>webEnvironment</strong> : 어플리케이션이 실행될 때의 웹 환경을 설정. (기본값은 Mock 서블릿을 로드하여 구동)</li>
</ul>

<p><strong>➕ webEnvironment</strong></p>

<ul>
  <li><strong>MOCK</strong> : <code class="highlighter-rouge">ServletContainer</code>를 테스트용으로 띄우지않고 서블릿을 mocking 한 것이 동작한다. (내장 톰캣이 구동되지 않는다.) <br />
MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스테 사용을 용이하게 해주는 라이브러리</li>
  <li><strong>RANDOM_PORT</strong> : 임의의 Port Listener. EmbeddedWebApplicationContext를 로드하며 실제 서블릿 환경을 구성</li>
</ul>

<h4 id="activeprofiles">@ActiveProfiles</h4>

<p>원하는 프로파일 환경 값 설정이 가능하다. (프로파일 전략)</p>

<h4 id="transactional">@Transactional</h4>

<p>테스트 완료 후 자동으로 Rollback 처리가 된다. <br />
하지만 <code class="highlighter-rouge">WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>를 사용하면 실제 테스트 서버는 별도의 스레드에서 테스트를 수행하기 떄문에 트랜잭션이 롤백되지 않는다. (왜?)</p>

<hr />

<h2 id="단위-테스트">단위 테스트</h2>

<h4 id="장점-1">장점</h4>

<ul>
  <li>WebApplication 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르다.</li>
  <li>통합 테스트를 진행하기 어려운 테스트를 진행 가능하다.</li>
</ul>

<h4 id="단점-1">단점</h4>

<ul>
  <li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 수 있다.</li>
</ul>

<h3 id="webmvctest">@WebMvcTest</h3>

<ul>
  <li>MVC를 위한 테스트로, 웹 상에서 요청과 응답에 대한 테스트.</li>
  <li>MVC 관련된 설정인 <code class="highlighter-rouge">@Controller, @ControllerAdvice, @JsonCompoent와 Filter, WebMvcConfiguer, HandlerMetohdAgumentResolver</code>만 빈으로 등록된다. (디스패쳐 서블릿에서 사용되는 아이들만 주입받는다.)</li>
  <li>때문에 Service, Repository 와 같은 웹 계층 아래 빈들은 등록되지 않아 의존성도 끊긴다.</li>
  <li>테스트에 사용하는 의존성이 있다면 @MockBean으로 만들어 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="n">ChessController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ChessControllerTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="n">ChessService</span> <span class="n">chessService</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 리스트 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getGames</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGameManager</span><span class="o">&gt;</span> <span class="n">chessGameManagers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>
        <span class="n">chessGameManagers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findRunningGames</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGameManagerBundle</span><span class="o">(</span><span class="n">chessGameManagers</span><span class="o">));</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/games"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.runningGames."</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"새로운 게임 시작 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">gameStart</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">start</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/start"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 점수 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getScore</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameStatistics</span> <span class="n">chessGameStatistics</span> <span class="o">=</span> <span class="n">ChessGameStatistics</span><span class="o">.</span><span class="na">createNotStartGameResult</span><span class="o">();</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">getStatistics</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameStatistics</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/score"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.matchResult"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"무승부"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.colorsScore.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"해당 게임 로딩 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">loadGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/load"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">movePiece</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="n">MoveRequestDto</span><span class="o">(</span><span class="s">"a2"</span><span class="o">,</span> <span class="s">"a3"</span><span class="o">));</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">isEnd</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">nextColor</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
                <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/move"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.end"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.nextColor"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"BLACK"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">given - willReturn</code> : 특정행위에 대한 반환 값을 지정하여 실제 객체처럼 동작하게 한다.</li>
</ul>

<h3 id="jdbctest">@JdbcTest</h3>

<ul>
  <li>JDBC 기반 구성 요소에만 초점을 맞춘 JDBC 테스트 어노테이션</li>
  <li>테스트를 위한 <code class="highlighter-rouge">JdbcTemplate</code>이 생성된다.</li>
  <li>기본적으로 트랜잭션이 이루어진다.</li>
  <li>in-memory database가 설정된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JdbcTest</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateChessDaoTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">DEFAULT_CHESS_GAME_ID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">ChessGame</span> <span class="n">chessGame</span><span class="o">;</span>
    <span class="n">ChessGameManager</span> <span class="n">sampleGame</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplateChessDao</span> <span class="n">jdbcTemplateChessDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">JdbcTemplateChessDaoTest</span><span class="o">(</span><span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">,</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"dataSource"</span><span class="o">)</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplateChessDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplateChessDao</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@BeforeEach</span>
    <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">"RKBQKBKRPPPPPPPP................................pppppppprkbqkbkr"</span><span class="o">;</span> <span class="c1">// move a2 a3 한 번 진행</span>
        <span class="n">chessGame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">,</span> <span class="n">WHITE</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">sample</span><span class="o">);</span>
        <span class="n">sampleGame</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임을 저장한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">newId</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"id로 체스 게임을 찾는다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">findById</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">isPresent</span><span class="o">()).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임 정보를 업데이트한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">sampleGame</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a2"</span><span class="o">),</span> <span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>

        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">sampleGame</span><span class="o">));</span>

        <span class="n">ChessGame</span> <span class="n">expectedChessGame</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">ChessGameManager</span> <span class="n">expectedChessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">expectedChessGame</span><span class="o">);</span>
        <span class="n">Square</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">expectedChessGameManager</span><span class="o">.</span><span class="na">getBoard</span><span class="o">().</span><span class="na">findByPosition</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">Pawn</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getColor</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">WHITE</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findAllOnRunning</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGame</span><span class="o">&gt;</span> <span class="n">allOnRunning</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findAllOnRunning</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">allOnRunning</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//when</span>
        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>

        <span class="c1">//then</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://goddaehee.tistory.com/212?category=367461">[스프링부트 (10)] SpringBoot Test(3) - 단위 테스트(@WebMvcTest, @DataJpaTest, @RestClientTest 등)</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
