<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>📋 통합 테스트 VS 단위 테스트</title>
	  <link>//unit-test-vs</link>
	  <author></author>
	  <pubDate>2021-04-16T19:18:00+09:00</pubDate>
	  <guid>//unit-test-vs</guid>
	  <description><![CDATA[
	     <h2 id="통합-테스트">통합 테스트</h2>

<p>실제 운영 환경에서 사용될 클래스들을 통합하여 테스트한다.<br />
기능 검증이 아닌 스프링 프레임워크에서 전체적으로 플로우가 제대로 동작하는지 검증하기 위해 사용한다.</p>

<h4 id="장점">장점</h4>

<ul>
  <li>스프링 부트 컨테이너를 띄워 테스트하기 때문에 운영환경과 가장 유사한 테스트가 가능하다.</li>
  <li>전체적인 Flow를 쉽게 테스트 할 수 있다.</li>
</ul>

<h4 id="단점">단점</h4>

<ul>
  <li>애플리케이션의 설정, 모든 Bean을 로드하기 때문에 시간이 오래걸리고 무겁다.</li>
  <li>테스트 단위가 커 디버깅이 어렵다.</li>
</ul>

<h3 id="springboottest"><strong>@SpringBootTest</strong></h3>

<ul>
  <li>통합 테스트를 제공하는 기본적인 스프링 부트 테스트 어노테이션.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@ActiveProfiles</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="nd">@Transactional</span>
<span class="kd">class</span> <span class="nc">ChessServiceImplTest</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="springboottest-의-파라미터들">@SpringBootTest 의 파라미터들</h4>

<ul>
  <li><strong>value</strong>: 테스트가 실행되기 전에 적용할 프로퍼티 주입.(기존의 프로퍼티 오버라이드)</li>
  <li><strong>properties</strong> : 테스트가 실행되기 전에 {key=value} 형식으로 프로퍼티 추가.</li>
  <li><strong>classes</strong> : ApplicationContext에 로드할 클래스 지정. (지정하지 않으면 @SpringBootConfiguration을 찾아서 로드)</li>
  <li><strong>webEnvironment</strong> : 어플리케이션이 실행될 때의 웹 환경을 설정. (기본값은 Mock 서블릿을 로드하여 구동)</li>
</ul>

<p><strong>➕ webEnvironment</strong></p>

<ul>
  <li><strong>MOCK</strong> : <code class="highlighter-rouge">ServletContainer</code>를 테스트용으로 띄우지않고 서블릿을 mocking 한 것이 동작한다. (내장 톰캣이 구동되지 않는다.) <br />
MockMvc는 브라우저에서 요청과 응답을 의미하는 객체로서 Controller 테스테 사용을 용이하게 해주는 라이브러리</li>
  <li><strong>RANDOM_PORT</strong> : 임의의 Port Listener. EmbeddedWebApplicationContext를 로드하며 실제 서블릿 환경을 구성</li>
</ul>

<h4 id="activeprofiles">@ActiveProfiles</h4>

<p>원하는 프로파일 환경 값 설정이 가능하다. (프로파일 전략)</p>

<h4 id="transactional">@Transactional</h4>

<p>테스트 완료 후 자동으로 Rollback 처리가 된다. <br />
하지만 <code class="highlighter-rouge">WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>를 사용하면 실제 테스트 서버는 별도의 스레드에서 테스트를 수행하기 떄문에 트랜잭션이 롤백되지 않는다. (왜?)</p>

<hr />

<h2 id="단위-테스트">단위 테스트</h2>

<h4 id="장점-1">장점</h4>

<ul>
  <li>WebApplication 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르다.</li>
  <li>통합 테스트를 진행하기 어려운 테스트를 진행 가능하다.</li>
</ul>

<h4 id="단점-1">단점</h4>

<ul>
  <li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 수 있다.</li>
</ul>

<h3 id="webmvctest">@WebMvcTest</h3>

<ul>
  <li>MVC를 위한 테스트로, 웹 상에서 요청과 응답에 대한 테스트.</li>
  <li>MVC 관련된 설정인 <code class="highlighter-rouge">@Controller, @ControllerAdvice, @JsonCompoent와 Filter, WebMvcConfiguer, HandlerMetohdAgumentResolver</code>만 빈으로 등록된다.</li>
  <li>때문에 Service, Repository 와 같은 웹 계층 아래 빈들은 등록되지 않아 의존성도 끊긴다.</li>
  <li>테스트에 사용하는 의존성이 있다면 @MockBean으로 만들어 사용한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="n">ChessController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">class</span> <span class="nc">ChessControllerTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="n">ChessService</span> <span class="n">chessService</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 리스트 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getGames</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGameManager</span><span class="o">&gt;</span> <span class="n">chessGameManagers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>
        <span class="n">chessGameManagers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findRunningGames</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGameManagerBundle</span><span class="o">(</span><span class="n">chessGameManagers</span><span class="o">));</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/games"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.runningGames."</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"새로운 게임 시작 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">gameStart</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">start</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/start"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"게임 점수 조회 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">getScore</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameStatistics</span> <span class="n">chessGameStatistics</span> <span class="o">=</span> <span class="n">ChessGameStatistics</span><span class="o">.</span><span class="na">createNotStartGameResult</span><span class="o">();</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">getStatistics</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameStatistics</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/score"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.matchResult"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"무승부"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.colorsScore.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"해당 게임 로딩 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">loadGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">ChessGameManager</span> <span class="n">chessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">createRunningGame</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">chessGameManager</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/load"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.id"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.color"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"WHITE"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.piecesAndPositions.size()"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">movePiece</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="k">new</span> <span class="n">MoveRequestDto</span><span class="o">(</span><span class="s">"a2"</span><span class="o">,</span> <span class="s">"a3"</span><span class="o">));</span>

        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">isEnd</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">given</span><span class="o">(</span><span class="n">chessService</span><span class="o">.</span><span class="na">nextColor</span><span class="o">(</span><span class="n">CHESS_GAME_TEST_ID</span><span class="o">)).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>

        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">MockMvcRequestBuilders</span>
                <span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="s">"/game/"</span> <span class="o">+</span> <span class="n">CHESS_GAME_TEST_ID</span> <span class="o">+</span> <span class="s">"/move"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">).</span><span class="na">header</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.end"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.nextColor"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"BLACK"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">given - willReturn</code> : 특정행위에 대한 반환 값을 지정하여 실제 객체처럼 동작하게 한다.</li>
</ul>

<h3 id="jdbctest">@JdbcTest</h3>

<ul>
  <li>JDBC 기반 구성 요소에만 초점을 맞춘 JDBC 테스트 어노테이션</li>
  <li>테스트를 위한 <code class="highlighter-rouge">JdbcTemplate</code>이 생성된다.</li>
  <li>기본적으로 트랜잭션이 이루어진다.</li>
  <li>in-memory database가 설정된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JdbcTest</span>
<span class="kd">class</span> <span class="nc">JdbcTemplateChessDaoTest</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">DEFAULT_CHESS_GAME_ID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">ChessGame</span> <span class="n">chessGame</span><span class="o">;</span>
    <span class="n">ChessGameManager</span> <span class="n">sampleGame</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JdbcTemplateChessDao</span> <span class="n">jdbcTemplateChessDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">JdbcTemplateChessDaoTest</span><span class="o">(</span><span class="n">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">,</span> <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"dataSource"</span><span class="o">)</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplateChessDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcTemplateChessDao</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@BeforeEach</span>
    <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">sample</span> <span class="o">=</span> <span class="s">"RKBQKBKRPPPPPPPP................................pppppppprkbqkbkr"</span><span class="o">;</span> <span class="c1">// move a2 a3 한 번 진행</span>
        <span class="n">chessGame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">,</span> <span class="n">WHITE</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">sample</span><span class="o">);</span>
        <span class="n">sampleGame</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임을 저장한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">save</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">chessGame</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">newId</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"id로 체스 게임을 찾는다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">findById</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">isPresent</span><span class="o">()).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"체스 게임 정보를 업데이트한다."</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">sampleGame</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a2"</span><span class="o">),</span> <span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>

        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">new</span> <span class="n">ChessGame</span><span class="o">(</span><span class="n">sampleGame</span><span class="o">));</span>

        <span class="n">ChessGame</span> <span class="n">expectedChessGame</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">ChessGameManager</span> <span class="n">expectedChessGameManager</span> <span class="o">=</span> <span class="n">ChessGameManagerFactory</span><span class="o">.</span><span class="na">loadingGame</span><span class="o">(</span><span class="n">expectedChessGame</span><span class="o">);</span>
        <span class="n">Square</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">expectedChessGameManager</span><span class="o">.</span><span class="na">getBoard</span><span class="o">().</span><span class="na">findByPosition</span><span class="o">(</span><span class="n">Position</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a4"</span><span class="o">));</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getClass</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">Pawn</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">a4</span><span class="o">.</span><span class="na">getPiece</span><span class="o">().</span><span class="na">getColor</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">WHITE</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">findAllOnRunning</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">ChessGame</span><span class="o">&gt;</span> <span class="n">allOnRunning</span> <span class="o">=</span> <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findAllOnRunning</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">allOnRunning</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//when</span>
        <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>

        <span class="c1">//then</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">jdbcTemplateChessDao</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">DEFAULT_CHESS_GAME_ID</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="참고">참고</h2>

<ul>
  <li><a href="https://goddaehee.tistory.com/212?category=367461">[스프링부트 (10)] SpringBoot Test(3) - 단위 테스트(@WebMvcTest, @DataJpaTest, @RestClientTest 등)</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>📖 테스트로 배우는 스프링</title>
	  <link>//til1</link>
	  <author></author>
	  <pubDate>2021-04-13T19:18:00+09:00</pubDate>
	  <guid>//til1</guid>
	  <description><![CDATA[
	     <h4 id="스프링을-왜-배울까-">스프링을 왜 배울까 ?</h4>

<p>잘 동작하는 웹 애플리케이션을 만들기 위해</p>

<h4 id="웹-애플리케이션이란-">웹 애플리케이션이란 ?</h4>

<p>웹 기반으로 동작하는 애플리케이션 -&gt; 웹 기능이 필요하다.<br />
웹을 활용하려면 네트워크가 필요하다 근데 직접 구현하려면 너무 방대해진다.<br />
그래서 프레임 워크를 활용해야한다.</p>

<h4 id="프레임워크-">프레임워크 ?</h4>

<p>구현해놓고 재사용한다.<br />
프레임워크가 있으면 비즈니스 로직만 구현하면 서비스가 만들어진다.</p>

<hr />

<h2 id="테스트로-배우는-스프링">테스트로 배우는 스프링</h2>

<p>왜 테스트로 스프링을 배울까. <br />
테스트는 기능을 익히기 위한 수단이다.</p>

<h2 id="1-초간단-스프링-프로젝트">1. 초간단 스프링 프로젝트</h2>

<h3 id="resourcesschemasql">resources/schema.sql</h3>

<p>Spring의 기본 값으로 ClassPath 루트에 <strong>schema.sql, data,sql</strong>이 있다면 서버 시작 시 실행될 SQL 문을 미리 정의할 수 있다.</p>

<ul>
  <li><strong>schema.sql</strong> : DDL</li>
  <li><strong>data.sql</strong> : DML</li>
</ul>

<p>개발 단계에서는 in-memory-db인 h2를 기본으로 사용하므로, 굳이 물리적인 DB를 연결하지 않아도 DB 작업이 가능하다.</p>

<h3 id="restcontroller">@RestController</h3>

<p><strong>@Controller와 @ResponseBody</strong>를 합쳐 놓은 어노테이션이다.<br />
메소드마다 @ResponseBody를 붙여주지 않아도 된다.</p>

<h4 id="controller와의-차이">@Controller와의 차이?</h4>

<p>@Controller는 주로 View를 반환하기 위해 사용한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Client가 요청을 보냄 
-&gt; DispatcherServlet과 Handler Mapping이 요청을 인터셉트 
-&gt; Controller에 의해 요청을 처리하고, DispatcherServlet이 Model과 View를 적절히 Client에 반환
</code></pre></div></div>

<p>View를 반환하기 위해서는 ViewResolver가 사용되며, ViewResolver 설정에 맞게 View를 찾아 렌더링한다.<br />
여기서, <strong>@ResponseBody</strong> 를 사용할 경우 자바 객체를 HTTP 응답의 Body의 내용(Json)으로 매핑을 한다. <br />
이럴경우 ViewResolver 대신 HttpMessageConverter가 동작한다.<br />
HttpMessageConverter에는 여러 Converter가 등록되어 있는데, 반환 타입에 따라 사용되는 Converter가 달라진다.</p>

<h4 id="restcontroller는">@RestController는…</h4>

<p>@RestController는 REST 요청에 대한 응답을 줄 때 사용하며, Json 형태로 객체 데이터를 반환한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Client가 요청을 보냄 
-&gt; DispatcherServlet과 Handler Mapping이 요청을 인터셉트 
-&gt; RestController에 의해 요청을 처리하고, 데이터 반환
</code></pre></div></div>

<h3 id="repository">@Repository</h3>

<p>퍼시스턴스 레이어, 영속성을 가지는 속성.<br />
DB나 파일같은 외부 I/O 작업을 처리한다.
@Repository, @Service, @Controller는 특정한 기능에 대한 @Component의 구체화된 형태이다.</p>

<hr />

<h2 id="2-spring-mvc">2. Spring MVC</h2>

<h3 id="request-mapping">Request Mapping</h3>

<p>URL, HTTP method, request parameters, headers, media types에 대한 맵핑을 할 수 있다.</p>

<ul>
  <li><code class="highlighter-rouge">@GetMapping</code></li>
  <li><code class="highlighter-rouge">@PostMapping</code></li>
  <li><code class="highlighter-rouge">@PutMapping</code></li>
  <li><code class="highlighter-rouge">@DeleteMapping</code></li>
  <li><code class="highlighter-rouge">@PatchMapping</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/http-method/users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="nf">showUser</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"이름"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"이름"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">)</span>
  <span class="o">);</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="uri-patterns">URI patterns</h3>

<ul>
  <li><code class="highlighter-rouge">"/resources/ima?e.png"</code> -path 세그먼트에서 한 문자 일치</li>
  <li><code class="highlighter-rouge">"/resources/*.png"</code> -path 세그먼트에서 0 개 이상의 문자와 일치</li>
  <li><code class="highlighter-rouge">"/resources/**"</code> -여러 path 세그먼트 일치</li>
  <li><code class="highlighter-rouge">"/projects/{project}/versions"</code> -path 세그먼트를 일치시키고 변수로 캡처</li>
  <li><code class="highlighter-rouge">"/projects/{project:[a-z]+}/versions"</code> -정규식과 일치하고 변수를 캡처</li>
</ul>

<h3 id="producible-media-types">Producible Media Types</h3>

<p>수신 하고자하는 데이터 포맷을 정의.  <br />
요청에 ‘Accept’ Header가 produces에 명시한 MediaType과 일치해야 요청이 매칭된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/users"</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="nf">showUser</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"이름"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"이름"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">)</span>
  <span class="o">);</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="consumable-media-types">Consumable Media Types</h3>

<p>출력하고자 하는 데이터 포맷을 정의.   <br />
Content-Type 요청 헤더가 consumes에 명시한 MediaType과 일치해야 요청이 매칭된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/users"</span><span class="o">,</span> <span class="n">consumes</span> <span class="o">=</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span> 
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="parameters-headers">Parameters, headers</h3>

<p>요청 매핑의 범위를 좁힌다.</p>

<p><strong>특정 param</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/message"</span><span class="o">,</span> <span class="n">params</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">messageForParam</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Header 조건</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/message"</span><span class="o">,</span> <span class="n">headers</span> <span class="o">=</span> <span class="s">"HEADER=hi"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">messageForHeader</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="s">"hi"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="method-arguments">Method Arguments</h3>

<p>컨트롤러의 메서드 인수.</p>

<p><strong>@RequestParam</strong></p>

<p>http://127.0.0.1/users?name=amazzi 와 같은 요청 처리.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="nf">requestParam</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"name"</span><span class="o">)</span> <span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">userName</span><span class="o">,</span> <span class="s">"email"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">userName</span><span class="o">,</span> <span class="s">"email"</span><span class="o">)</span>
  <span class="o">);</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">value</code> 옵션을 주어 파라미터 명이 name인 것을 userName에 할당.</p>

<p><strong>@PathVariable</strong></p>

<p>http://127.0.0.1/users/1 와 같은 요청 처리.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">pathVariable</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">"이름"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>@RequestParam</strong>, <strong>@PathVariable</strong> 이 둘을 복합적으로 사용하기도 한다.</p>

<p><strong>@RequestBody</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/users/body"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span> <span class="nf">requestBody</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">User</span> <span class="n">newUser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="mi">1L</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
  <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"/users/"</span> <span class="o">+</span> <span class="n">newUser</span><span class="o">.</span><span class="na">getId</span><span class="o">())).</span><span class="na">body</span><span class="o">(</span><span class="n">newUser</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">HttpMessageConverter</code>구현 을 사용하여 선언 된 메서드 인수 형식으로 변환.</p>

<h3 id="return-values">Return Values</h3>

<h4 id="string">String</h4>

<p>Spring + View template을 사용할 때 흔히 사용하는 타입.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
<span class="kd">public</span> <span class="n">String</span> <span class="nf">users</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"data"</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"/users/data"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>모델에 데이터를 Map으로 담고 반환 타입을 String으로 뷰 이름을 지정하면 뷰로 데이터가 전송된다.</p>

<h4 id="void">void</h4>

<p>스프링에서는 뷰 이름을 지정해주지 않아도 URL을 보고 자동으로 뷰 네임을 지정해주기도 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/user/address"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">void</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="responsebody">@ResponseBody</h4>

<p>Json 형태로 데이터를 반환한다.<br />
객체를 반환타입으로 지정할 경우 클라이언트는 객체의 Json 형태의 데이터를 받는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/message"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="n">String</span> <span class="nf">string</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s">"message"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="n">User</span> <span class="nf">responseBodyForUser</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/users/{id}"</span><span class="o">)</span>
<span class="nd">@ResponseBody</span>
<span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">responseEntity</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"email"</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>전체 응답 (HTTP 헤더 및 본문 포함)을 지정하는 반환 값은 <code class="highlighter-rouge">HttpMessageConverter</code>구현을 통해 변환.</p>

<h3 id="exceptions">Exceptions</h3>

<p><strong>@Controller</strong>및 <strong>@ControllerAdvice</strong> 를 가진 클래스는 컨트롤러 메서드의 예외를 처리하는 메서드를 가질 수 있다 .</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/exceptions"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionsController</span> <span class="o">{</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span> <span class="nf">exceptionHandler</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">CustomException</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hi"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span> <span class="nf">exceptionHandler2</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">HelloException</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">CustomException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">badRequest</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="s">"CustomException"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스 내 정의한 <strong>@ExceptionHandler</strong>는 해당 컨트롤러에서만 사용이 가능하다.<br />
<strong>전역적인 예외 처리</strong>는 아래와 같이 클래스를 하나 만들고 <strong>@ControllerAdvice</strong> 를 선언한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloAdvice</span> <span class="o">{</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">HelloException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handle</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">badRequest</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="s">"HelloException"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="참고자료">참고자료</h3>

<p><a href="https://ooeunz.tistory.com/101">[Spring] Spring MVC: Controller return 타입</a></p>


	  ]]></description>
	</item>


</channel>
</rss>
