<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>NewWisdom.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>블로그 이사중... 아직 정리가 안되었음...</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>🌱 스프링 부트 Profile로 다른 환경 구성</title>
	  <link>//profile</link>
	  <author></author>
	  <pubDate>2021-06-09T10:01:00+09:00</pubDate>
	  <guid>//profile</guid>
	  <description><![CDATA[
	     <h2 id="profile">Profile?</h2>

<ul>
  <li>애플리케이션 일부 configuration을 분리하고 싶을 때 사용</li>
  <li>애플리케이션 일부 configuration을 특정 환경에서만 가능하게 하고 싶을 때 사용</li>
  <li>개발 환경에 따라 설정값을 달르게 로딩할 때</li>
</ul>

<h2 id="profile-1">@Profile</h2>

<ul>
  <li><code class="highlighter-rouge">@Component, @Configuration, @ConfigurationProperties</code>을 <code class="highlighter-rouge">@Profile</code>와 함께 선언</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@Configuration</span>
<span class="nd">@Profile</span><span class="o">(</span><span class="s">"production"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductionConfiguration</span> <span class="o">{</span>

    <span class="c1">// ...</span>

<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>어플리케이션 실행시 <code class="highlighter-rouge">spring.profiles.active</code> 프로퍼티로 프로파일을 지정하면 해당 프로파일이 적용된 빈만 등록됨</li>
</ul>

<p><strong>application-properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev,hsqldb
</code></pre></div></div>

<h4 id="example">Example</h4>

<ol>
  <li>application-properties에 다음과 같이 정의
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=prod
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">@Profile</code> 어노테이션과 함께 <code class="highlighter-rouge">@Configuration</code> 등록</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311111-0f322800-c93f-11eb-9455-436a99434869.png" alt="image" style="zoom:50%;" /></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121311125-13f6dc00-c93f-11eb-8a93-3923630d84fa.png" alt="image" style="zoom:50%;" /></p>

<ol>
  <li>어플리케이션 실행시 active한 prod에 등록된 hello 빈이 출력됨</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/43840561/121311276-3a1c7c00-c93f-11eb-9698-9abf9172184f.png" alt="image" /></p>

<h3 id="profile과-activeprofiles">@Profile과 @ActiveProfiles</h3>
<ul>
  <li>서로 다른 환경에서 서로 다른 profile을 활성화하여 필요한 빈만 등록하도록 하는 어노테이션</li>
  <li><code class="highlighter-rouge">@Profile</code>은 SpringBootApplication을 실행할 때 사용</li>
  <li><code class="highlighter-rouge">@ActiveProfiles</code>은 테스트 환경에서 사용</li>
</ul>

<h2 id="applicationproperties">application.properties</h2>

<ul>
  <li>application-{profile}.properties 형식으로 파일 생성</li>
  <li>이는 <code class="highlighter-rouge">@ConfigurationProperties</code>로 간주되고 로드됨
    <ul>
      <li>*.properties , *.yml 파일에 있는 property를 자바 클래스에 값을 가져와서(바인딩) 사용할 수 있게 해주는 어노테이션</li>
    </ul>
  </li>
  <li>application-{profile}.properties은 application.properties 보다 우선순위가 높게됨</li>
  <li>빌드할 때 다음과 같은 명령어와 함께 특정 환경설정을 적용할 수 있음
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=production
</code></pre></div>    </div>
  </li>
  <li>properties 파일에 <code class="highlighter-rouge">spring.profiles.include</code>를 통해 추가할 프로파일을 설정할 수 있음</li>
</ul>

<h4 id="example-1">Example</h4>

<p><strong>application-properties</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.profiles.active=dev
profile-common.name = default_name_mazzi
defaultonly.name = defualt_name
</code></pre></div></div>
<p><strong>application-prod.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = test_name_mazzi
testonly.name = test_name
</code></pre></div></div>
<p><strong>application-dev.properties</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>profile-common.name = dev_name_mazzi
devonly.name = dev_name
</code></pre></div></div>
<p><strong>AppRunner</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppRunner</span> <span class="kd">implements</span> <span class="n">ApplicationRunner</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">ApplicationArguments</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"spring.profiles.active : "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">getOptionValues</span><span class="o">(</span><span class="s">"spring.profiles.active"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Enviroment's Active Profile : "</span> <span class="o">+</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getActiveProfiles</span><span class="o">()));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"defaultonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"defaultonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"testonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"testonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"devonly.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"devonly.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"profile-common.name : "</span> <span class="o">+</span> <span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"profile-common.name"</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"====================================================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><strong>실행 결과</strong></p>

<p><img src="https://user-images.githubusercontent.com/43840561/121315869-b6b15980-c943-11eb-83a9-7e4214b18fe6.png" alt="image" style="zoom:50%;" /></p>

<ul>
  <li>profile-common.name는 모든 프로퍼티 파일이 공통으로 가진 프로퍼티</li>
  <li>dev 프로파일을 활성화</li>
  <li>공통 속성인 <code class="highlighter-rouge">profile-common.name</code>은 우선순위가 높은 dev 프로파일의 것으로 오버라이드 됨</li>
</ul>

<hr />
<h3 id="참고자료">참고자료</h3>
<ul>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles">공식문서</a></li>
  <li><a href="https://yangbox.tistory.com/35">스프링부트 프로파일(Springboot Profile)로 다른 환경 구성하기</a></li>
  <li><a href="https://engkimbs.tistory.com/766">스프링 부트 프로파일(Spring Boot Profile)</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>📋 4. 의존 자동 주입</title>
	  <link>//springbasic4</link>
	  <author></author>
	  <pubDate>2021-05-29T19:18:00+09:00</pubDate>
	  <guid>//springbasic4</guid>
	  <description><![CDATA[
	     <h2 id="autowired-어노테이션을-통한-의존-자동-주입">@Autowired 어노테이션을 통한 의존 자동 주입</h2>

<ul>
  <li>자동 주입 기능을 사용하면 스프링이 알아서 의존 객체를 찾아 주입한다.</li>
  <li>사용 방법은 의존을 주입할 대상에 <code class="highlighter-rouge">@Autowiwred</code> 어노테이션을 붙이면 된다.</li>
  <li>해당 어노테이션이 붙어있으면 스프링이 이를 찾아 필드에 할당한다.</li>
</ul>

<p>**@Autowired를 적용한 대상에 일치하는 빈이 없으면? **</p>

<p>해당 필드에 대한 의존을 충족하지 않는다는 내용과 함께 빈이 존재하지 않는다는 에러 메시지가 출력된다.</p>

<p>**만약 두개 이상이면? **</p>

<p>해당 타입의 빈이 한개가 아닌 여러개를 발견했다는 예외 메시지가 출력된다.</p>

<hr />

<h2 id="qualifier를-이용한-의존-객체-선택">@Qualifier를 이용한 의존 객체 선택</h2>

<ul>
  <li>자동 주입 가능한 빈이 두 개 이상인 경우 자동 주입을 할 빈을 지정하는 방법</li>
</ul>

<h3 id="사용-위치">사용 위치</h3>

<h4 id="bean-을-붙인-빈-설정-메서드">@Bean 을 붙인 빈 설정 메서드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationContextTestResourceQualifier</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
  	<span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"defaultFile"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">File</span> <span class="nf">defaultFile</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">File</span> <span class="n">defaultFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">"defaultFile.txt"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">defaultFile</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="autowired에서-자동-주입할-빈을-한정할-때-사용">@Autowired에서 자동 주입할 빈을 한정할 때 사용</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListPrinter</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="n">MemberDao</span> <span class="n">memberDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">MemberPrinter</span> <span class="n">printer</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">MemberListPrinter</span><span class="o">(</span><span class="n">MemberDao</span> <span class="n">memberDao</span><span class="o">,</span> <span class="n">MemberPrinter</span> <span class="n">printer</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">memberDao</span> <span class="o">=</span> <span class="n">memberDao</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">printer</span> <span class="o">=</span> <span class="n">printer</span><span class="o">;</span>
	<span class="o">}</span>
	
  <span class="nd">@Autowired</span>
  <span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"printer"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberPrint</span><span class="o">(</span><span class="n">MemberPrinter</span> <span class="n">printer</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">printer</span> <span class="o">=</span> <span class="n">printer</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>@Qualifier의 속성으로 주입할 빈의 후보를 한정한다.</li>
  <li>빈 설정에 해당 어노테이션이 없으면 빈의 이름을 한정자로 지정한다.</li>
</ul>

<hr />

<h2 id="상위하위-타입-관계와-자동-주입">상위/하위 타입 관계와 자동 주입</h2>

<p>MemberPrinter 클래스를 상속한 MeberSummaryPrinter 클래스가 있다고 하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSummaryPrinter</span> <span class="kd">extends</span> <span class="n">MemberPrinter</span> <span class="o">{</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
				<span class="s">"회원 정보: 이메일=%s, 이름=%s\n"</span><span class="o">,</span> 
				<span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>그리고 AppCtx 설정에서 <code class="highlighter-rouge">memberPrinter2()</code> 가 의 빈 객체를 설정하도록 변경한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppCtx</span> <span class="o">{</span>
	<span class="c1">// ...</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberPrinter</span> <span class="nf">memberPrinter1</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberPrinter</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberSummaryPrinter</span> <span class="nf">memberPrinter2</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberSummaryPrinter</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">memberPrinter2()</code> 의 빈을 MemberSummaryPrinter으로 변경해도 빈 중복 에러가 발생한다.</li>
  <li>MemberSummaryPrinter는 MemberPrinter 타입에도 할당할 수 있기 때문이다.</li>
  <li>스프링 컨테이너는 MemberPrinter 타입 빈을 자동 주입해야하는 @Autowired를 만나면 `memberPrinter1(), memberPrinter2() 중 어떤 빈을 주입해야하는 지 알 수 없다.</li>
</ul>

<p>이 문제는 두가지 방법으로 처리할 수 있다.</p>

<p><strong>@Qualifier</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Bean</span>
	<span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"printer"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="n">MemberPrinter</span> <span class="nf">memberPrinter1</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberPrinter</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"summaryPrinter"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="n">MemberSummaryPrinter</span> <span class="nf">memberPrinter2</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberSummaryPrinter</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><strong>MemberListPrinter가 MemberSummaryPrinter를 사용하도록 (Composition)</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListPrinter</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="n">MemberDao</span> <span class="n">memberDao</span><span class="o">;</span>
	<span class="kd">private</span> <span class="n">MemberPrinter</span> <span class="n">printer</span><span class="o">;</span>

  <span class="c1">// ...</span>
	
	<span class="nd">@Autowired</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberPrinter</span><span class="o">(</span><span class="n">MemberSummaryPrinter</span> <span class="n">printer</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">printer</span> <span class="o">=</span> <span class="n">printer</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="autowired의-필수-여부-지정-방법">@Autowired의 필수 여부 지정 방법</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberPrinter</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">dateTimeFormatter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
					<span class="s">"회원 정보: 아이디=%d, 이메일=%s, 이름=%s, 등록일=%tF\n"</span><span class="o">,</span> 
					<span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
					<span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getRegisterDateTime</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
					<span class="s">"회원 정보: 아이디=%d, 이메일=%s, 이름=%s, 등록일=%s\n"</span><span class="o">,</span> 
					<span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
					<span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> 
					<span class="n">dateTimeFormatter</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getRegisterDateTime</span><span class="o">()));</span>
		<span class="o">}</span>
	<span class="o">}</span>
  
 	<span class="nd">@Autowired</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDateFormatter</span><span class="o">(</span><span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
	<span class="o">}</span>

 <span class="c1">// ...</span>
</code></pre></div></div>

<p>dateTimeFormatter가 null인지 여부에 따라 날짜 형식을 바꿔 출력한다.<br />
즉 반드시 <code class="highlighter-rouge">setDateFormatter()</code>를 통해 의존 객체를 주입할 필요가 없다.<br />
하지만 <code class="highlighter-rouge">@Autowired</code>는 해당하는 빈이 존재하지 않으면 예외를 발생시킨다.</p>

<h3 id="autowiredrequired--false">@Autowired(required = false)</h3>

<p>이 경우 <code class="highlighter-rouge">@Autowired(required = false)</code> 설정으로 자동 주입 대상이 필수가 아님을 명시한다.<br />
이러면 매칭되는 빈이 없어도 예외가 발생하지 않고 자동 주입을 수행하지 않는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDateFormatter</span><span class="o">(</span><span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="optional">Optional</h3>

<p>스프링 5부터는 required 속성 말고, Optional을 사용할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDateFormatter</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">DateTimeFormatter</span><span class="o">&gt;</span> <span class="n">formatterOpt</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">formatterOpt</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="n">formatterOpt</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   	<span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="nullable">@Nullable</h3>

<p>해당 어노테이션을 의존 주입 대상 파라미터에 붙이면 세터 메서드를 호출할 때 자동 주입할 빈이 존재할 경우 인자로 받고, 존재하지 않으면 null을 전달한다.<br />
이 어노테이션은 스프링이 제공하는 어노테이션이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDateFormatter</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>required 속성을 false로 할 때와 차이점?</strong></p>

<p>@Nullable 어노테이션을 사용하면 자동 주입할 빈이 존재하지 않아도 세터 메서드가 호출된다.<br />
@Autowired(required = false)의 경우 대상 빈이 존재하지 않을 경우 세터 메서드를 호출하지 않는다.</p>

<p>위의 세가지 방식은 메서드 뿐만 아니라 필드에도 동일하게 적용할 수 있다.</p>

<h3 id="생성자-초기화와-필수-여부-지정-방식-동작">생성자 초기화와 필수 여부 지정 방식 동작</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberPrinter</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">MemberPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">dateTimeFormatter</span> <span class="o">=</span> <span class="n">DateTimeFormatter</span><span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">"yyyy년 MM월 dd일"</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">dateTimeFormatter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
					<span class="s">"회원 정보: 아이디=%d, 이메일=%s, 이름=%s, 등록일=%tF\n"</span><span class="o">,</span> 
					<span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
					<span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getRegisterDateTime</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span>
					<span class="s">"회원 정보: 아이디=%d, 이메일=%s, 이름=%s, 등록일=%s\n"</span><span class="o">,</span> 
					<span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
					<span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> 
					<span class="n">dateTimeFormatter</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getRegisterDateTime</span><span class="o">()));</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="nd">@Autowired</span><span class="o">(</span><span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDateFormatter</span><span class="o">(</span><span class="n">DateTimeFormatter</span> <span class="n">dateTimeFormatter</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">dateTimeFormatter</span> <span class="o">=</span> <span class="n">dateTimeFormatter</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h4 id="autowiredrequired--false일-경우">@Autowired(required = false)일 경우</h4>

<ul>
  <li>dateTimeFormatter에 null을 할당하지 않는다. <code class="highlighter-rouge">setDateFormatter()</code> 가 호출되지 않기 때문이다.</li>
</ul>

<h4 id="nullable-1">@Nullable</h4>

<ul>
  <li>일치하는 빈이 없을 때 기본 생성자에서 초기화해주고 있어도, dateTimeFormatter에 null 값을 할당한다.</li>
</ul>

<hr />

<h2 id="자동-주입과-명시적-의존-주입-간의-관계">자동 주입과 명시적 의존 주입 간의 관계</h2>

	  ]]></description>
	</item>

	<item>
	  <title>📋 3. 스프링 DI</title>
	  <link>//springbasic</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//springbasic</guid>
	  <description><![CDATA[
	     <h2 id="스프링은-객체-컨테이너">스프링은 객체 컨테이너</h2>

<h3 id="beanfactory">BeanFactory</h3>

<ul>
  <li>객체 생성과 검색에 대한 기능 정의</li>
  <li><code class="highlighter-rouge">getBean()</code> : 생성된 객체를 검색하는데 필요한 메서드</li>
  <li>객체 검색 이외에도 싱글톤인지 프로토타입 빈인지 확인하는 기능도 있음</li>
</ul>

<h3 id="annotationcontext">AnnotationContext</h3>

<ul>
  <li>메시지, profile, 환경 변수 등을 처리할 수 있는 기능을 추가로 쩡의</li>
</ul>

<hr />

<h2 id="의존이란">의존이란?</h2>

<h2 id="di를-통한-의존-처리">DI를 통한 의존 처리</h2>

<h3 id="의존이란-1">의존이란?</h3>

<ul>
  <li>한 클래스가 다른 클래스의 메서드를 실행할 때 <strong>의존</strong>한다고 표현</li>
  <li>
    <p>변경에 의해 영향을 받는 관계를 의미</p>
  </li>
  <li>DI는 의존하는 객체를 직접 생성하지 않고, 의존 객체를 주입받는 방식을 사용</li>
  <li>DI를 통해 객체를 주입하면 유지보수성이 더 올라간다.</li>
</ul>

<h2 id="스프링의-di-설정">스프링의 DI 설정</h2>

<ul>
  <li>스프링은 DI를 이용해서 객체를 서로 연결해주는 조립기이다.
    <ul>
      <li>특정 타입의 클래스만 생성하는 조립기가 아닌 범용 조립기이다.</li>
    </ul>
  </li>
</ul>

<p><strong>설정 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppCtx</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MemberDao</span> <span class="nf">memberDao</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberDao</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MemberRegisterService</span> <span class="nf">memberRegSvc</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberRegisterService</span><span class="o">(</span><span class="n">memberDao</span><span class="o">());</span> <span class="c1">// memberDao()	가 생성한 객체를 주입</span>
    <span class="o">}</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">ChangePasswordService</span> <span class="nf">changePwSvc</span><span class="o">()</span> <span class="o">{</span>
    	<span class="n">ChangePasswordService</span> <span class="n">pwsSvc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChangePasswordService</span><span class="o">();</span>
        <span class="n">pwdSvc</span><span class="o">.</span><span class="na">setMemberDao</span><span class="o">(</span><span class="n">memberDao</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">pwdSvc</span><span class="o">;</span>
    
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Configuration</code> : 스프링 설정 클래스</li>
  <li><code class="highlighter-rouge">@Bean</code> : 해당 메서드가 생성한 객체를 스프링 빈으로 설정
    <ul>
      <li>메서드 이름을 빈 객체의 이름으로 사용</li>
    </ul>
  </li>
</ul>

<p>설정 클래스만 만들어서 끝나는 것이 아닌, 설정 클래스로 컨테이너를 생성해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ApplicationContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">AppCtx</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
  
<span class="c1">// ...</span>
<span class="n">MemberRegisterService</span> <span class="n">regSvc</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"memberRegSvc"</span><span class="o">,</span> <span class="n">MemberRegisterService</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>컨테이너를 생성하면 <code class="highlighter-rouge">getBean()</code> 를 이용해 사용할 객체를 구할 수 있음</li>
  <li>스프링 컨테이너 <code class="highlighter-rouge">ctx</code> 로터 이름이 “memberRegSvc”인 빈 객체를 구함</li>
</ul>

<h3 id="di-방식---생성자-방식">DI 방식 - 생성자 방식</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">StationService</span><span class="o">(</span><span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">stationDao</span> <span class="o">=</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="di-방식---생성자-방식-1">DI 방식 - 생성자 방식</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StationService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStationDao</span><span class="o">(</span><span class="n">StationDao</span> <span class="n">stationDao</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">stationDao</span> <span class="o">=</span> <span class="n">stationDao</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<hr />

<h2 id="configuration-설정-클래스의-bean-설정과-싱글톤">@Configuration 설정 클래스의 @Bean 설정과 싱글톤</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppCtx</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MemberDao</span> <span class="nf">memberDao</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberDao</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MemberRegisterService</span> <span class="nf">memberRegSvc</span><span class="o">()</span> <span class="o">{</span>
    	<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberRegisterService</span><span class="o">(</span><span class="n">memberDao</span><span class="o">());</span> <span class="c1">// memberDao()	가 생성한 객체를 주입</span>
    <span class="o">}</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">ChangePasswordService</span> <span class="nf">changePwSvc</span><span class="o">()</span> <span class="o">{</span>
    	<span class="n">ChangePasswordService</span> <span class="n">pwsSvc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChangePasswordService</span><span class="o">();</span>
        <span class="n">pwdSvc</span><span class="o">.</span><span class="na">setMemberDao</span><span class="o">(</span><span class="n">memberDao</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">pwdSvc</span><span class="o">;</span>
    
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li><code class="highlighter-rouge">memberDao()</code>는 매번 새로운 MemberDao 객체를 생성해서 반환한다.</li>
</ul>

<p><strong>그러면 <code class="highlighter-rouge">memberRegSvc()</code> 가 반환하는 객체와 <code class="highlighter-rouge">changePwSvc()</code>가 반환하는 객체는 서로 다른 MemberDao 객체를 사용하는 것인가?</strong></p>

<p>🙅‍♀️ 스프링 컨테이너가 생성한 빈은 싱글톤 객체이다.<br />
<code class="highlighter-rouge">@Bean</code>이 붙은 메서드에 대해 한 개의 객체만 생성하고 이를 보관했다가, 동일한 객체를 반환한다.</p>

<hr />

<h2 id="두-개-이상의-설정-파일-사용하기">두 개 이상의 설정 파일 사용하기</h2>

<p>스프링은 한 개 이상의 설정 파일을 이용해서 컨테이너를 생성할 수 있다.</p>

<h3 id="configuration-autowired">@Configuration, @Autowired</h3>

<p><strong>AppConf1</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConf1</span> <span class="o">{</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberDao</span> <span class="nf">memberDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberDao</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberPrinter</span> <span class="nf">memberPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberPrinter</span><span class="o">();</span>
	<span class="o">}</span>
	
<span class="o">}</span>
</code></pre></div></div>

<p><strong>AppConf2</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConf2</span> <span class="o">{</span>
	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="n">MemberDao</span> <span class="n">memberDao</span><span class="o">;</span>
	<span class="nd">@Autowired</span>
	<span class="kd">private</span> <span class="n">MemberPrinter</span> <span class="n">memberPrinter</span><span class="o">;</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberRegisterService</span> <span class="nf">memberRegSvc</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberRegisterService</span><span class="o">(</span><span class="n">memberDao</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">ChangePasswordService</span> <span class="nf">changePwdSvc</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">ChangePasswordService</span> <span class="n">pwdSvc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChangePasswordService</span><span class="o">();</span>
		<span class="n">pwdSvc</span><span class="o">.</span><span class="na">setMemberDao</span><span class="o">(</span><span class="n">memberDao</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">pwdSvc</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberListPrinter</span> <span class="nf">listPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberListPrinter</span><span class="o">(</span><span class="n">memberDao</span><span class="o">,</span> <span class="n">memberPrinter</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberInfoPrinter</span> <span class="nf">infoPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">MemberInfoPrinter</span> <span class="n">infoPrinter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemberInfoPrinter</span><span class="o">();</span>
		<span class="n">infoPrinter</span><span class="o">.</span><span class="na">setMemberDao</span><span class="o">(</span><span class="n">memberDao</span><span class="o">);</span>
		<span class="n">infoPrinter</span><span class="o">.</span><span class="na">setPrinter</span><span class="o">(</span><span class="n">memberPrinter</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">infoPrinter</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">VersionPrinter</span> <span class="nf">versionPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">VersionPrinter</span> <span class="n">versionPrinter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VersionPrinter</span><span class="o">();</span>
		<span class="n">versionPrinter</span><span class="o">.</span><span class="na">setMajorVersion</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
		<span class="n">versionPrinter</span><span class="o">.</span><span class="na">setMinorVersion</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">versionPrinter</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@AutoWired</code> : 스프링의 자동 주입 기능. 스프링 설정 클래스 필드에 해당 어노테이션을 붙이면 해당 타입 빈을 찾아서 필드에 할당한다.
    <ul>
      <li>AppConf2의 memberDao 필드에는 AppConf1 클래스에서 설정한 빈이 할당된다.</li>
    </ul>
  </li>
  <li>스프링 컨테이너는 AppConf2 객체를 빈으로 등록하고 <code class="highlighter-rouge">@AutoWired</code> 가 붙은 대상에 대해 알맞은 빈을 자동으로 주입한다.</li>
</ul>

<p><strong>설정 클래스가 여러개일 때 스프링 컨테이너를 생성하는 방법은?</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ctx</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">AppConf1</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">AppConf2</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>AnnotationConfigApplicationContext의 생성자의 인자는 가변 인자이다.</li>
</ul>

<h3 id="import-어노테이션-사용">@Import 어노테이션 사용</h3>

<ul>
  <li>함께 사용할 설정 클래스를 지정</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@Import</span><span class="o">({</span><span class="n">AppConf2</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfImport</span> <span class="o">{</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberDao</span> <span class="nf">memberDao</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberDao</span><span class="o">();</span>
	<span class="o">}</span>
	
	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="n">MemberPrinter</span> <span class="nf">memberPrinter</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">MemberPrinter</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>지정한 클래스도 함께 사용하기 때문에 스프링 컨테이너를 생성할 때 AppConfi2를 지정할 필요가 없다.</li>
</ul>

<hr />

<h2 id="getbean">getBean()</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">VersionPrinter</span> <span class="n">versionPrinter</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"versionPrinter"</span><span class="o">,</span> <span class="n">VersionPrinter</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>첫번째 인자는 빈의 이름</li>
  <li>두번째 인자는 빈의 타입</li>
  <li>빈의 이름을 지정하지 않고 타입만으로 빈을 구할 수도 있다.
    <ul>
      <li>대신 해당 타입의 빈 객체가 한 개만 존재해야한다.</li>
    </ul>
  </li>
</ul>

<p><strong>주입 대상 객체를 모두 빈 객체로 설정해야하나?</strong></p>

<p>🙅‍♀️ 스프링 컨테이너가 객체를 관리하는지 여부만 다를 뿐이다.<br />
참고로 스프링 컨테이너는 자동 주입, 라이프사이클 관리 등 객체 생성 외에도 객체 관리를 위한 다양한 기능을 제공한다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Auth 강의</title>
	  <link>//lecture-auth</link>
	  <author></author>
	  <pubDate>2021-05-28T19:18:00+09:00</pubDate>
	  <guid>//lecture-auth</guid>
	  <description><![CDATA[
	     <h2 id="피드백-강의">피드백 강의</h2>

<h3 id="인증-헤더">인증 헤더</h3>

<p>로그인을 통해 토큰을 발급 받은 후 헤더에 Authorization에 토큰을 실어보낸다.<br />
왜 굳이 이 헤더에 토큰을 넣어 보낼까?</p>

<h3 id="http-인증">HTTP 인증</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/567b6a87-15f7-4409-be6a-2a4baf9b3ffb/image.png" style="zoom:50%;" /></p>

<p>HTTP 프로토콜의 정의이기 때문이다.</p>

<ol>
  <li>클라이언트가 “/” 요청을 보낸다.</li>
  <li>서버는 접근을 할 수 있는지 확인하고, 없으면 401을 보낸다.</li>
  <li>여기서는 basic이라는 방식으로 토큰을 검증하고 있다. 잘못되었으니 다시 요청해!</li>
</ol>

<h3 id="http-인증-스킴">HTTP 인증 스킴</h3>

<h4 id="basic">Basic</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e9a8db3-4221-43a8-84fa-c2f81f371ab1/image.png" style="zoom:33%;" /></p>

<ul>
  <li>base64를 이용해 인코딩된 사용자의 id/pw 쌍의 인증 정보를 전달</li>
  <li>안전을 위해 HTTPS(TLS) 연결 위에서 발생되어야 함</li>
</ul>

<h4 id="bearer">Bearer</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/d631b9a8-b41d-438e-8038-6299f044616a/image.png" style="zoom:33%;" /></p>

<ul>
  <li>bearer token이라는 보안 토큰을 활용하는 인증 스킴</li>
  <li>Outh2.0에서 사용하기 위해 만들어짐</li>
</ul>

<h2 id="jwt">JWT</h2>

<ul>
  <li>Json Web Token</li>
  <li>웹 표준 (RFC 7519)</li>
  <li>자체적으로 검증되었음을 증명해주는 signature를 포함</li>
  <li>생성시 검증이나 권한 인가 시 필요한 값을 넣어 상태를 따로 관리하지 않아도 됨</li>
</ul>

<h3 id="토큰의-구성">토큰의 구성</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/1bcb51b5-e245-4389-9b50-a6d91bc27d2d/image.png" style="zoom:50%;" /></p>

<h4 id="1-header">1. Header</h4>

<ul>
  <li>토큰에 대한 해석 방법</li>
  <li>alg : 시그니처에서 사용할 알고리즘 방법</li>
  <li>typ : 토큰의 타입</li>
</ul>

<h4 id="2-payload">2. Payload</h4>

<ul>
  <li>토큰의 내용, 전달할 내용</li>
  <li>payload의 각각의 값을 클레임이라고 함</li>
  <li>sub : 클레임의 제목</li>
  <li>name :</li>
  <li>iat : 생성 시간</li>
  <li>이 역시도 base64로 인코딩</li>
</ul>

<h4 id="3-signature">3. Signature</h4>

<ul>
  <li>헤더와 페이로드가 변조되지 않았음을 검즌</li>
  <li>base64로 인코딩을 하고, 알고리즘과 키값으로 해독</li>
</ul>

<p><strong>basic과 bearer 둘 다 base64로 인코딩 하면 어떻게 구별하나요?</strong></p>

<p>이는 서버에서 페이크처럼 쓸 수 있지!</p>

<p><strong>payload가 같으면 토큰 값도 같아지나요?</strong></p>

<p>근데 아마 iat가 달라서 다를 수 밖에 없을 듯</p>

<hr />

<h2 id="dispatcher-servlet">Dispatcher Servlet</h2>

<h3 id="요청에-따라-수행할-로직-분기">요청에 따라 수행할 로직 분기</h3>

<h3 id="dispatcherservlet-위치">DispatcherServlet 위치</h3>

<p><img src="https://images.velog.io/images/new_wisdom/post/a3187c31-d891-43dc-af7a-bb4cde6ab4b0/image.png" style="zoom:50%;" /></p>

<ul>
  <li>Handler 앞에 Interceptor가 있음</li>
</ul>

<p>MVC Config 객체도 모두 빈이었다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 테스트로 배우는 Spring Configuration 강의</title>
	  <link>//spring-configuration-lec</link>
	  <author></author>
	  <pubDate>2021-05-25T19:18:00+09:00</pubDate>
	  <guid>//spring-configuration-lec</guid>
	  <description><![CDATA[
	     <h2 id="배경-지식-강의">배경 지식 강의</h2>

<p>스프링 컨테이너와 스프링빈</p>

<h3 id="컨테이너">컨테이너</h3>

<p>스프링 컨테이너에 빈을 등록하기 위해서는 Configuration이 필요하다.</p>

<ul>
  <li>XML</li>
  <li>Annotation 기반의 configuration</li>
  <li>java bean  configuration</li>
</ul>

<h3 id="xml로-configuration-설정하는-예시">XML로 Configuration 설정하는 예시</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userRepository"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserRepository"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userService"</span> <span class="na">class=</span><span class="s">"nextstep.helloworld.core.xmlConfig.UserService"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"userRepository"</span> <span class="na">ref=</span><span class="s">"userRepository"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></div></div>

<ul>
  <li>userRepository와 userService를 빈으로 등록함</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"application-config.xml"</span><span class="o">);</span>

<span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">ClassPathXmlApplicationContext</code>로 해당 XML파일을 로드해온다.</li>
  <li><code class="highlighter-rouge">getBeanDefinitionNames()</code> : 등록된 빈이름을 가져온다.</li>
</ul>

<h3 id="java-bean-configuration">java bean configuration</h3>

<h4 id="학습-테스트-코드">학습 테스트 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">JavaConfigTest</span> <span class="o">{</span>
    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">javaConfig</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

        <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">authService</span><span class="o">).</span><span class="na">isNotNull</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>HelloApplication 클래스를 기반으로 빈 등록을 할 것이다.</li>
</ul>

<h4 id="authenticationprincipalconfig">AuthenticationPrincipalConfig</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthenticationPrincipalConfig</span> <span class="o">{</span>

    <span class="c1">// AuthService 빈을 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthService</span> <span class="nf">authService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthService</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// AuthenticationPrincipalArgumentResolver를 빈 등록하고 authService에 대한 의존성을 주입하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="nf">authenticationPrincipalArgumentResolver</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthenticationPrincipalArgumentResolver</span><span class="o">(</span><span class="n">authService</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Configuration</code> : 메타 데이터를 설정할 수 있는 클래스가 된다.</li>
  <li><code class="highlighter-rouge"> @Bean</code> 과 특정 객체를 반환하는 메서드로 해당 객체를 빈으로 등록할 수 있다.</li>
  <li>빈들의 의존성 또한 직접 맺어줄 수 있다.</li>
</ul>

<p><strong>@Configuration 클래스도 빈 등록이 되나요?</strong></p>

<p>🙆‍♀️</p>

<p><strong>@Configuration 클래스의 메서드 순서와 빈 등록 순서는 상관이 없나요?</strong></p>

<p>🙆‍♀️</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">useSpringBean</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">HelloApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">AuthService</span> <span class="n">authService</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// 싱글톤 // new AuthService()이니까</span>
    <span class="n">AuthenticationPrincipalArgumentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AuthenticationPrincipalArgumentResolver</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">resolver</span><span class="o">.</span><span class="na">getAuthService</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">authService</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>resolver에 있는 AuthService 객체와 빈으로 등록된 AuthService가 같은 객체인가?</strong></p>

<p>🙆‍♀️</p>

<hr />

<h2 id="외부-파일의-값을-이용하기">외부 파일의 값을 이용하기</h2>

<h3 id="properties-파일-접근">properties 파일 접근</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PropertySourceConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Environment</span> <span class="n">env</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">PropertySourceConfig</span><span class="o">(</span><span class="n">Environment</span> <span class="n">env</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">env</span> <span class="o">=</span> <span class="n">env</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// application.properties의 security-jwt-token-secret-key 값을 활용하여 JwtTokenKeyProvider를 빈으로 등록하기</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">JwtTokenKeyProvider</span> <span class="nf">jwtTokenKeyProvider</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JwtTokenKeyProvider</span><span class="o">(</span><span class="s">"security-jwt-token-secret-key"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Environment 라는 필드가 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">key</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="n">PropertySourceConfig</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">String</span><span class="o">[]</span> <span class="n">beanDefinitionNames</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">beanDefinitionNames</span><span class="o">));</span>

    <span class="n">JwtTokenKeyProvider</span> <span class="n">jwtTokenKeyProvider</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">JwtTokenKeyProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">jwtTokenKeyProvider</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.ih1aovtQShabQ7l0cINw4k1fagApg3qLWiB8Kt59Lno"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">PropertySourceConfig</code> 클래스로 컨텍스트를 만든다.</li>
  <li>사실 이 properties를 객체로 만들어 접근할 수도 있다.</li>
</ul>

<h3 id="value-주입">@Value 주입</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴포넌트 스캔을 통한 빈 등록</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenExpireProvider</span> <span class="o">{</span>
    <span class="c1">// application.properties의 security-jwt-token-expire-length 값을 활용하여 validityInMilliseconds값 초기화 하기</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtTokenExpireProvider</span><span class="o">(</span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${security-jwt-token-expire-length}"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">validityInMilliseconds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">validityInMilliseconds</span> <span class="o">=</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getValidityInMilliseconds</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">validityInMilliseconds</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java-based Configuration을 하기 위한 클래스로 지정하기</span>
<span class="c1">// application.properties 파일을 활용하기 위한 설정 추가하기</span>
<span class="c1">// nextstep.helloworld.core.environment 내에 있는 스프링 빈을 스캔하기</span>
<span class="nd">@Configuration</span>
<span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"classpath:application.properties"</span><span class="o">)</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"nextstep.helloworld.core.environment"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>환경에 따라 properties 설정이 가능한가요?</strong></p>

<p>🙆‍♀️ 환경에 맞게 deploy하기 - profile</p>

<hr />

<h2 id="스프링-컨테이너-설정-방법-히스토리">스프링 컨테이너 설정 방법 히스토리</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/55f6f1f7-1e78-4099-814c-d884510efb89/image.png" style="zoom:67%;" /></p>

<p>컨테이너 설정을 할 때는 메타정보를 통해 이루어진다.</p>

<p>맨 처음에는 <strong>XML기반</strong>으로 진행되었다.<br />
이러면 프로덕션 코드와 의존 관계, 빈 등록 정보를 분리할 수 있었다.</p>

<p>이후 <strong>어노테이션 기반</strong>이 등장하면서 XML과 혼용하여 사용하였다.<br />
등록할 빈들을 어노테이션으로 관리하였다.</p>

<p>Spring 3.0부터는 <strong>Java Bean 기반</strong>으로 이루어졌다.<br />
XML로 관리하던 내용들을 Bean 등록을 통해 관리하였다.</p>

<hr />

<h3 id="auto-configuration">Auto Configuration?</h3>

<ul>
  <li><strong>jar dependency 기반</strong>으로 스프링 애플리케이션을 자동으로 설정해준다.</li>
</ul>

<p>별다른 설정을 하지 않았는데도, DB 등에 관련한 것들을 마음 껏 쓸 수 있었다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/01ebb7bc-6306-49f3-9b00-5f4e9e62682e/image.png" style="zoom:67%;" /></p>

<p>그 이유는 <code class="highlighter-rouge">@SpringBootApplication</code> 에 있는 <code class="highlighter-rouge">@EnableAutoConfiguration</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2b3a167-8bab-45e0-ae77-20ac1ee0521e/image.png" style="zoom:33%;" /></p>

<p>컨텍스트를 로드하면 이정도의 AutoConfiguration들이 등록된다.</p>

<p>ex) jdbcTemplate을 생성해주지 않았는데도 자동으로 주입된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a4b8b58e-311e-4c72-8f15-8f3c3287666d/image.png" style="zoom:50%;" /></p>

<p><strong>빈으로 등록되지 않은 클래스를 사용하면 컴파일 에러가 떠야하는데 나지 않는 이유는?</strong></p>

<p><code class="highlighter-rouge">@ConditionalOnClass</code> 덕분이다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/a24ebfbc-d8dd-4cca-9e92-07163b4e6e85/image.png" style="zoom:50%;" /></p>

<ul>
  <li>DataSource, JdbcTemplate이 로드가 되면 동작한다.</li>
</ul>

<h4 id="h2consoleautoconfiguration">H2ConsoleAutoConfiguration</h4>

<p>h2 DB설정을 해주지 않았는데도 h2와 관련된 설정이 자동으로 된다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/95850513-5786-4b7a-b2e0-efc5d5680cf2/image.png" style="zoom:67%;" /></p>

<p>이것도 이미 등록되어있기 때문에 가능하다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 4. MVC 프레임워크 만들기</title>
	  <link>//spring-mvc-4</link>
	  <author></author>
	  <pubDate>2021-05-04T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-4</guid>
	  <description><![CDATA[
	     <h2 id="mvc-프레임워크-만들기">MVC 프레임워크 만들기</h2>

<h2 id="프론트-컨트롤러-패턴">프론트 컨트롤러 패턴</h2>

<p>프론트 컨트롤러도 서블릿이다.<br />
요청을 모두 받고 요청에 맞는 컨트롤러를 호출한다.</p>

<h3 id="특징">특징</h3>

<p>프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받고, 요청에 맞는 컨트롤러를 찾아서 호출한다.<br />
입구를 하나로 묶는다.<br />
프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 된다.</p>

<h3 id="스프링-웹-mvc와-프론트-컨트롤러">스프링 웹 MVC와 프론트 컨트롤러</h3>

<p>스프링 웹 MVC의 핵심도 바로 FrontController이다. (DispatcherServlet이 프론트 컨트롤러 패턴으로 되어있다.)</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/b2493682-0c37-4a1c-93c4-f2ffd02e7862/image.png" style="zoom: 67%;" /></p>

<p>ControllerV1을 인터페이스로 만들고 이를 구현한 Controller들을 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV1</span> <span class="kd">implements</span> <span class="n">ControllerV1</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="frontcontrollerservletv1">FrontControllerServletV1</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV1"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v1/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV1</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV1</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV1</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV1</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v1/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV1</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV1</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Controller 정보를 가진 서블릿인 FrontContoller를 구현한다.</p>

<ul>
  <li><strong>urlPatterns</strong> :  “/front-controller/v1/”를 포함한 하위 모든 요청을 하나의 서블릿에서 받아들인다.</li>
  <li><strong>controllerMap</strong> : key-매핑 URL, value-호출될 컨트롤러</li>
  <li><strong>service()</strong> : reqeustURI를 조회하여 실제 호출할 컨트롤러를 찾고 해당 컨트롤러를 실행(<code class="highlighter-rouge">process()</code>)한다.</li>
</ul>

<p>여러 Controller와 서블릿이 하나의 JSP를 재사용하고 있다.</p>

<hr />

<h2 id="view-분리">View 분리</h2>

<p>Controller에서 View로 이동하는 부분이 중복된다.<br />
Controller는 MyView만 반환해주면 된다.</p>

<h4 id="controllerv2">ControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV2</span> <span class="o">{</span>
    <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>인터페이스를 구현하므로 반환 타입을 맞출 수 있다.</li>
</ul>

<h4 id="myview">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewPath</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewPath</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewPath</span> <span class="o">=</span> <span class="n">viewPath</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="memberformcontrollerv2">MemberFormControllerV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberFormControllerV2</span> <span class="kd">implements</span> <span class="n">ControllerV2</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">MyView</span> <span class="nf">process</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>viewPath를 가지고 있는 MyView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv2">FrontControllerServletV2</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV2"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV2</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV2</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV2</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV2</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV2</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV2</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="model-추가">Model 추가</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/9a6ede47-f242-4b1f-a88e-08f055df0508/image.png" style="zoom:67%;" /></p>

<h3 id="서블릿-종속성-추가">서블릿 종속성 추가</h3>

<p>컨트롤러 입장에서 <code class="highlighter-rouge">HttpServletRequest</code>, <code class="highlighter-rouge">HttpServletResponse</code>가 필요하지 않다.<br />
요청 파라미터를 Map으로 넘기면 컨트롤러가 서블릿이 아니어도 동작할 수 있다.</p>

<h3 id="뷰-이름-중복-제거">뷰 이름 중복 제거</h3>

<p>현재 컨트롤러에서 지정하는 뷰 이름에는 중복(<code class="highlighter-rouge">/WEB-INF/views/</code>)이 존재한다.<br />
컨트롤러는 뷰의 논리 이름을 반환하고, 물리 이름은 프론트 컨트롤러에서 처리하도록 변경해보자.<br />
논리적 물리적 이름을 구분하면 나중에 변경할 때 컨트롤러를 변경할 일이 없다.</p>

<h3 id="modelview">ModelView</h3>

<p>Model을 전달하기 위해서 <code class="highlighter-rouge">request.setAttribute()</code> 를 사용하여 데이터를 저장하고 뷰에 전달했다.<br />
서블릿의 종속성을 제거하기 위해, Model을 따로 만들고 View 이름까지 전달하는 객체를 만든다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ModelView</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">ModelView</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">viewName</span> <span class="o">=</span> <span class="n">viewName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="controllerv3">ControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV3</span> <span class="o">{</span>
    <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>ModelView를 반환하도록 한다.</li>
</ul>

<h4 id="membersavecontrollerv3">MemberSaveControllerV3</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV3</span> <span class="kd">implements</span> <span class="n">ControllerV3</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="s">"save-result"</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>논리 이름을 ModelView 객체에 넣어 생성하도록 한다.</li>
  <li>모델에 뷰에 필요한 객체를 담고 ModelView 객체를 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv3-일부">FrontControllerServletV3 일부</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">createParamMap()</code> : HttpServletRequest의 파라미터 정보를 Map으로 변경한다.</li>
  <li><code class="highlighter-rouge">viewResolver()</code> : 컨트롤러가 반환한 논리 뷰 이름을 실제 물리 뷰 경로로 변경한다.</li>
  <li><code class="highlighter-rouge">view.render(mv.getModel(), req, resp)</code> : 뷰 객체를 통해  HTML 화면을 렌더링한다.</li>
</ul>

<h4 id="myview-1">MyView</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">render</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">modelToRequestAttribute</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">);</span>
    <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
    <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="단순하고-실용적인-컨트롤러">단순하고 실용적인 컨트롤러</h2>

<p>컨트롤러 인터페이스를 구현하면서 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 번거롭다.<br />
컨트롤러는 View의 이름만 변경하도록, 실용성 있도록 변경한다.</p>

<h4 id="controllerv4">ControllerV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ControllerV4</span> <span class="o">{</span>
    <span class="cm">/**
     *
     * @param paramMap
     * @param model
     * @return viewName
     */</span>

    <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>view 이름을 반환하도록 변경한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberSaveControllerV4</span> <span class="kd">implements</span> <span class="n">ControllerV4</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">paramMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="n">model</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"save-result"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Controller에서는 필요한 값을 꺼내고, 비즈니스 로직을 호출한 후 viewName만을 반환한다.</li>
</ul>

<h4 id="frontcontrollerservletv4">FrontControllerServletV4</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV4"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v2/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV4</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV4</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ControllerV4</span><span class="o">&gt;</span> <span class="n">controllerMap</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV4</span><span class="o">());</span>
        <span class="n">controllerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v2/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV4</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">controllerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">controller</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// param Map</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
      	<span class="c1">// model </span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>프론트 컨트롤러에서 model을 만들고 각 Controller에 paramMap과 model을 넘겨 처리를 하고, viewName을 반환받는다.</li>
  <li>modelView에서 model을 꺼낼 필요가 없다.</li>
</ul>

<p>하지만, 지금 ControllerV4 인터페이스로 받을 수 있는 컨트롤러를 제한하고 있다.</p>

<hr />

<h2 id="유연한-controller---어댑터-패턴">유연한 Controller - 어댑터 패턴</h2>

<p>지금까지의 프론트 컨트롤러는 한가지 인터페이스만 사용이 가능했었다. <br />
어떠한 컨트롤러도 호환이 가능하도록 어댑터 패턴을 사용한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0f169df9-469c-4e38-b61c-2cf42f872444/image.png" alt="" /></p>

<ul>
  <li>핸들러 어댑터 : 중간에 어댑터 역할을 하는 어댑터가 추가되었다. 이 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.</li>
  <li>기존에는 프론트 컨트롤러가 바로 컨트롤러를 호출하였지만, 이제는 어댑터를 통해서 호출한다.</li>
  <li>핸들러 : 컨트롤러의 좀 더 넓은 범위. 어댑터가 있기 때문에 컨트롤러 개념 뿐만 아니라 해당하는 어댑터만 있으면 처리가 가능하다.</li>
</ul>

<h4 id="myhandleradapter">MyHandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">);</span>
    <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">supports(Object handler)</code> : 어댑터가 해당 컨트롤러를 처리할 수 있는지 반환</li>
  <li><code class="highlighter-rouge">handle(...)</code> : 어댑터는 실제 컨트롤러를 호출하고 결과로 ModelView를 반환한다.</li>
  <li>만약 컨트롤러가 ModelView를 반환하지 못하면, 어댑터가 직접 생성한다.</li>
  <li>프론트 컨트롤러가 아닌 어댑터가 실제 컨트롤러를 호출한다.</li>
</ul>

<h4 id="controllerv3handleradapter">ControllerV3HandlerAdapter</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV3HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV3</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV3</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>supports()로 ControllerV3 타입인지 확인하고 맞다면 호출한다.</li>
</ul>

<p>####</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"frontControllerServletV5"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/front-controller/v5/*"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FrontControllerServletV5</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">handlerMappingMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">MyHandlerAdapter</span><span class="o">&gt;</span> <span class="n">handlerAdapters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">FrontControllerServletV5</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">initHandlerMappingMap</span><span class="o">();</span>
        <span class="n">initHandlerAdapters</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerMappingMap</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/new-form"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberFormControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members/save"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberSaveControllerV3</span><span class="o">());</span>
        <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"/front-controller/v5/v3/members"</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">MemberListControllerV3</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerAdapters</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">handlerAdapters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ControllerV3HandlerAdapter</span><span class="o">());</span>

    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// 요청 정보로 핸들러를 가져온다.</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">getHandler</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 어댑터를 찾는다.</span>
        <span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="n">getHandlerAdapter</span><span class="o">(</span><span class="n">handler</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="n">adapter</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">mv</span><span class="o">.</span><span class="na">getViewName</span><span class="o">();</span> <span class="c1">// 논리 이름 ex) new-form</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewResolver</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        
        <span class="n">view</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">mv</span><span class="o">.</span><span class="na">getModel</span><span class="o">(),</span> <span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyHandlerAdapter</span> <span class="nf">getHandlerAdapter</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">MyHandlerAdapter</span> <span class="n">adapter</span> <span class="o">:</span> <span class="n">handlerAdapters</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">adapter</span><span class="o">.</span><span class="na">supports</span><span class="o">(</span><span class="n">handler</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">adapter</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"handler adapter를 찾을 수 없습니다. handler "</span> <span class="o">+</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">getHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">requestURI</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
        <span class="n">Object</span> <span class="n">handler</span> <span class="o">=</span> <span class="n">handlerMappingMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">requestURI</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">handler</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">MyView</span> <span class="nf">viewResolver</span><span class="o">(</span><span class="n">String</span> <span class="n">viewName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyView</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span> <span class="o">+</span> <span class="n">viewName</span> <span class="o">+</span> <span class="s">".jsp"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">view</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>생성자 : 핸들러 매핑과 어댑터를 초기화한다.</li>
  <li>매핑 정보인 handlerMappingMap 이 Object Map으로 아무 타입이나 받을 수 있다.</li>
  <li>핸들러 매핑</li>
  <li>핸들러를 처리할 수 있는 어댑터 조회</li>
  <li>어댑터 호출</li>
</ul>

<h4 id="controllerv4handleradapter-예제">ControllerV4HandlerAdapter 예제</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ControllerV4HandlerAdapter</span> <span class="kd">implements</span> <span class="n">MyHandlerAdapter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ControllerV4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">ModelView</span> <span class="nf">handle</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ControllerV4</span> <span class="n">controller</span> <span class="o">=</span> <span class="o">(</span><span class="n">ControllerV4</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="n">createParamMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
      
        <span class="c1">//  viewName만 반환할 경우 ModelView 객체로 만들어주는 역할도 한다.</span>
        <span class="n">String</span> <span class="n">viewName</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">paramMap</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>

        <span class="n">ModelView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelView</span><span class="o">(</span><span class="n">viewName</span><span class="o">);</span>
        <span class="n">mv</span><span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="n">model</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="nf">createParamMap</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">paramMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span> <span class="n">paramMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">paramName</span><span class="o">,</span>
                        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>
        <span class="k">return</span> <span class="n">paramMap</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>어댑터가 호출하는 ControllerV4는 viewName만 반환하는데, 이때 어댑터에서 이를 ModelView 객체로 만들어 반환한다.</li>
</ul>

<p>프론트 컨트롤러 입장에서는 핸들러 어댑터에만 의존하고 있다.</p>

<p>이 MVC 프레임 워크는 역할과 구현이 분리되어 있다.  <br />
모든 것을 인터페이스로 만들고 구현하고 싶은 부분만 주입하면 완벽! (스프링 MVC는 뷰와 뷰리졸버 다 인터페이스로 구현되어있다.)
어떤 핸들러를 추가하고 싶어도 우리는 핸들러어댑터만 구현해주면 된다!</p>

<h4 id="ex-requestmapping">ex) @RequestMapping()</h4>

<p>RequestMappingHandlerAdapter : 위 어노테이션이 붙은 핸들러를 처리해주는 어댑터</p>


	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-3</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-3</guid>
	  <description><![CDATA[
	     <h2 id="서블릿-jsp-mvc-패턴">서블릿, JSP, MVC 패턴</h2>

<p>서블릿으로 만들어보고, JSP로 만들어보고 마지막으로 MVC로 만들어 볼 것이다!</p>

<h3 id="서블릿으로-만들었을-때-일부-예제">서블릿으로 만들었을 때 일부 예제</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"memberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="n">PrintWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;meta charset=\"UTF-8\"&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;title&gt;Title&lt;/title&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/head&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;a href=\"/index.html\"&gt;메인&lt;/a&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;id&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;username&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;th&gt;age&lt;/th&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/thead&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tbody&gt;"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Member</span> <span class="n">member</span> <span class="o">:</span> <span class="n">members</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;tr&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;td&gt;"</span> <span class="o">+</span> <span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">()</span> <span class="o">+</span> <span class="s">"&lt;/td&gt;"</span><span class="o">);</span>
            <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tr&gt;"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"    &lt;/tbody&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/table&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>복잡하지만… 동적으로 원하는 HTML을 만들 수 있다.</li>
  <li>각 요청마다 Servlet을 만들어야 한다.</li>
  <li>응답할 HTML을 자바 코드 내에 작성해야한다.</li>
</ul>

<hr />

<h2 id="jsp">JSP</h2>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<h5 id="import문-작성">import문 작성</h5>

<pre><code class="language-jsp">&lt;%@ page import="hello.servlet.domain.member.MemberRepository" %&gt;
&lt;%@ page import="hello.servlet.domain.member.Member" %&gt;
&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
</code></pre>

<pre><code class="language-jsp">&lt;%
    // request, response 사용 가능
    MemberRepository memberRepository = MemberRepository.getInstance();
    System.out.println("save.jsp");
    String username = request.getParameter("username");
    int age = Integer.parseInt(request.getParameter("age"));
    Member member = new Member(username, age);
    System.out.println("member = " + member);
    memberRepository.save(member);

%&gt;
</code></pre>

<p><code class="highlighter-rouge">&lt;% %&gt;</code> 안에 자바코드를 작성할 수 있다.</p>

<ul>
  <li>비즈니스 로직과 뷰가 연결되어 있다.</li>
  <li>요구사항이 변경되면 뷰를 수정하다가 비즈니스 로직도 같이 수정될 수 있다.</li>
  <li>유지보수성이 떨어진다.</li>
</ul>

<hr />

<h2 id="mvc">MVC</h2>

<h3 id="servlet-jsp의-문제점">Servlet, JSP의 문제점</h3>

<h4 id="너무-많은-역할">너무 많은 역할</h4>

<p>하나의 서블릿이나 JSP만으로 비즈니스 로직과 뷰 렌더링까지 모두 처리하게 되면, 너무 많은 역할을 하고, 또한 유지보수가 어려워진다.</p>

<h4 id="변경의-라이프-사이클">변경의 라이프 사이클</h4>

<p>비즈니스 로직과 뷰의 변경의 라이프 사이클이 다르다.<br />
예를 들어서 UI 를 일부 수정하는 일과 비즈니스 로직을 수정하는 일은 각각 다르게 발생할 가능성이 매우 높고 대부분 서로에게 영향을 주지 않는다. <br />
이렇게 변경의 라이프 사이클이 다른 부분을 하나의 코드로 관리하는 것은 유지보수하기 좋지 않다.<br />
레이어를 분리하는 기준은 변경 주기가 다를 때라고 생각하면 편하다.</p>

<h4 id="기능-특화">기능 특화</h4>

<p>뷰 템플릿은 화면을 렌더링 하는데 최적화 되어 있기 때문에 이 부분의 업무만 담당하는 것이 가장 효과적이다.</p>

<h3 id="model-view-controller">Model View Controller</h3>

<p>MVC 패턴은 서블릿이나, JSP로 처리하던 것을 컨트롤러(Controller)와 뷰(View)라는 영역으로 서로 역할을 나눈 것을 말한다.<br />
웹 애플리케이션은 보통 이 MVC 패턴을 사용한다.</p>

<h4 id="controller">Controller</h4>

<p>HTTP 요청을 받아서 파라미터를 검증하고, 비즈니스 로직을 실행한다. 그리고 뷰에 전달할 결과 데이터를 조회해서 모델에 담는다.<br />
중앙에서 조종하는 역할. (비즈니스 로직을 담을 수 있지만, 역할이 너무 많아지기 때문에 비즈니스 로직을 호출한다고 하자.)</p>

<h4 id="model">Model</h4>

<p>뷰에 출력할 데이터를 담아둔다.<br />
뷰가 필요한 데이터를 모두 모델에 담아서 전달해주는 덕분에 뷰는 비즈니스 로직이나 데이터 접근을 몰라도 되고, 화면을 렌더링 하는 일에 집중할 수 있다.</p>

<h4 id="view">View</h4>

<p>모델에 담겨있는 데이터를 사용해서 화면을 그리는 일에 집중한다. 여기서는 HTML을 생성하는 부분을 말한다.</p>

<h3 id="mvc-적용하기">MVC 적용하기</h3>

<ul>
  <li>서블릿을 컨트롤러로 사용</li>
  <li>JSP를 뷰로 사용</li>
  <li>HttpServletRequest 객체를 모델로 사용 (<code class="highlighter-rouge">request.setAttribute()</code> , <code class="highlighter-rouge">request.getAttribute() </code>사용)</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/1fa7cead-0d71-4afc-a391-a7b7932c9541/image.png" style="zoom:67%;" /></p>

<h4 id="mvcmemberformservlet">MvcMemberFormServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberFormServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/new-form"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberFormServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/new-form.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span> <span class="c1">// 컨트롤러에서 뷰로 이동</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span> <span class="c1">// 서블릿에서 JSP를 호출한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">dispatcher.forward()</code> : 다른 서블릿이나 JSP로 이동할 수 있는 기능이다. 서버 내부에서 다시 호출이 발생한다.<br />
클라이언트에게 갔다가 오는게 아닌(리다이렉트가 아닌), 서버 내부에서 호출한 것이다.</li>
  <li><code class="highlighter-rouge">/WEB-INF</code> :  이 경로안에 JSP가 있으면 외부에서 직접 JSP를 호출할 수 없어 컨트롤러를 통해서만 접근이 가능하도록 한다.</li>
</ul>

<h4 id="redirect-vs-forward">redirect vs forward</h4>

<ul>
  <li>redirect : 실제 클라이언트(웹 브라우저)에 응답이 나갔다가, 클라이언트가 redirect 경로로 다시 요청한다.<br />
클라이언트가 인지할 수 있고, URL 경로도 실제로 변경된다.</li>
  <li>forward : 서버 내부에서 일어나는 호출이기 때문에 클라이언트가 인지하지 못한다.</li>
</ul>

<h4 id="mvcmembersaveservlet">MvcMemberSaveServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberSaveServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members/save"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberSaveServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"age"</span><span class="o">));</span>

        <span class="c1">// 비즈니스 로직</span>
        <span class="n">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Member</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// Model에 데이터를 보관한다. - req 객체에 Map이 있는데 여기에 저장한다.</span>
        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"member"</span><span class="o">,</span> <span class="n">member</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/save-result.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">requestDispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">requestDispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="save-resultjsp">save-result.jsp</h4>

<pre><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt; 성공
&lt;ul&gt;
    &lt;li&gt;id=${member.id}&lt;/li&gt;
    &lt;li&gt;username=${member.username}&lt;/li&gt;
    &lt;li&gt;age=${member.age}&lt;/li&gt;
&lt;/ul&gt;
&lt;a href="/index.html"&gt;메인&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">${}</code> : jsp가 제공하는 프로퍼티 접근법으로, req에 담겨있는 attribute에 있는 데이터를 가져올 수 있다.</li>
</ul>

<h4 id="mvcmemberlistservlet">MvcMemberListServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"mvcMemberListServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/servlet-mvc/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MvcMemberListServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">MemberRepository</span> <span class="n">memberRepository</span> <span class="o">=</span> <span class="n">MemberRepository</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="n">req</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">viewPath</span> <span class="o">=</span> <span class="s">"/WEB-INF/views/members.jsp"</span><span class="o">;</span>
        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="n">viewPath</span><span class="o">);</span>
        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="membersjsp-일부">members.jsp 일부</h4>

<pre><code class="language-jsp">&lt;c:forEach var="item" items="${members}"&gt;
    &lt;tr&gt;
        &lt;td&gt;${item.id}&lt;/td&gt;
        &lt;td&gt;${item.username}&lt;/td&gt;
        &lt;td&gt;${item.age}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/c:forEach&gt;
</code></pre>

<ul>
  <li><code class="highlighter-rouge">&lt;c:forEach&gt;</code> : <code class="highlighter-rouge">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code> 를 선언해야한다.</li>
</ul>

<h3 id="mvc-패턴의-한계">MVC 패턴의 한계</h3>

<h3 id="forward의-중복">forward의 중복</h3>

<p>메서드를 추출해도 되지만, 메서드 호출마저 중복으로 일어난다.</p>

<h4 id="viewpath에-중복">ViewPath에 중복</h4>

<p>prefix인 <code class="highlighter-rouge">/WEB-INF/views/</code> 와 suffix인 <code class="highlighter-rouge">.jsp</code> 가 중복으로 발생한다.<br />
만약 jsp가 아닌 thymeleaf 같은 다른 뷰로 변경한다면 전체 코드를 다 변경해야 한다.</p>

<h4 id="사용하지-않는-코드">사용하지 않는 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span>
</code></pre></div></div>

<p>위 객체는 사용할 수도 있고, 안할수도 있다.</p>

<h4 id="공통-처리가-어렵다">공통 처리가 어렵다.</h4>

<p>컨트롤러에서 공통으로 처리해야 하는 부분이 점점 증가하는 경우를 생각해보자.<br />
단순히 공통 기능을 메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 된다. <br />
또한 호출하는 것 자체도 중복이다.</p>

<h4 id="프론트-컨트롤러front-controller-패턴을-도입하면-이런-문제를-깔끔하게-해결할-수-있다">프론트 컨트롤러(Front Controller) <strong>패턴</strong>을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.</h4>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 3. 서블릿, JSP, MVC 패턴</title>
	  <link>//spring-mvc-5</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-5</guid>
	  <description><![CDATA[
	     <h2 id="스프링-mvc-전체-구조">스프링 MVC 전체 구조</h2>

<p><img src="https://images.velog.io/images/new_wisdom/post/6b0d1860-915b-4819-9d2f-9521353e2142/image.png" style="zoom:80%;" /></p>

<h4 id="지금껏-만들었던-프레임-워크---스프링-mvc">지금껏 만들었던 프레임 워크 &lt;-&gt; 스프링 MVC</h4>

<ul>
  <li>FrontController - DispatcherServlet</li>
  <li>HandlerMappingMap - HandlerMapping</li>
  <li>MyHandlerAdapter - HandlerAdapter</li>
  <li>ModelView - ModelAndView</li>
  <li>ViewResolver - ViewResolver</li>
  <li>MyView - View</li>
</ul>

<h3 id="dispatcherservlet">DispatcherServlet</h3>

<p>DispacherServlet 도 부모 클래스에서 HttpServlet 을 상속 받아서 사용하고, 서블릿으로 동작한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/630a4870-d2a9-4dec-a4c3-ccfe49db023a/image.png" style="zoom:67%;" /></p>

<p>스프링 부트는 DispatcherServlet를 자동으로 등록하면서 모든 경로에 대해서 매핑한다.</p>

<h4 id="요청의-흐름">요청의 흐름</h4>

<p>DispatcherServlet이 호출되면 <code class="highlighter-rouge">service()</code> 가 호출된다.<br />
최종적으로는 DispatcherServlet.doDispatch()` 가 호출된다.</p>

<h4 id="dodispatch">doDispatch()</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/cbfe84c7-a2f8-4bf1-a082-42c141b2e287/image.png" style="zoom:67%;" /></p>

<p>DispatcherServlet의 doDispatch()의 주요 부분들을 살펴보자!</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/0e644c4e-cd85-405a-a1ea-f063768df8a1/image.png" alt="" /></p>

<ul>
  <li>ModelAndView</li>
  <li>getHandler() : 핸들러를 가져온다.
    <ul>
      <li>핸들러가 없으면 404로 셋팅을 한다.</li>
    </ul>
  </li>
  <li>getHandlerAdapter() : 핸들러 어댑터를 가져온다.</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/536712af-32f3-41fc-af6f-5d885365747d/image.png" style="zoom:67%;" /></p>

<ul>
  <li>핸들러 어댑터로 핸들러 호출하고 ModelAndView 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/eef62fa6-513d-4ed3-b7a3-18ad10ae0074/image.png" style="zoom:67%;" /></p>

<ul>
  <li>view 렌더링 호출</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/5a04d84a-5b0c-456c-baa1-ddf4401c2f36/image.png" alt="" /></p>

<ul>
  <li>ViewResolver를 통해서 view를 찾아 반환</li>
</ul>

<p><img src="https://images.velog.io/images/new_wisdom/post/56d8ddca-3457-4b3a-a7b8-c462504d98d8/image.png" alt="" /></p>

<ul>
  <li>View 렌더링</li>
</ul>

<h3 id="스프링-mvc-구조">스프링 MVC 구조</h3>

<ol>
  <li>핸들러 조회 : 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러 조회</li>
  <li>핸들러 어댑터 조회 : 핸들러를 실행할 수 있는 핸들러 어댑터 조회</li>
  <li>핸들러 어댑터 실행 : 핸들러 어댑터 실행</li>
  <li>핸들러 실행 : 핸들러 어댑터가 실제 핸들러 실행</li>
  <li>ModelAndView 반환 : 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환</li>
  <li>viewResolver 호출 : JSP의 경우 <code class="highlighter-rouge">InternalResourceViewResolver</code> 가 자동으로 등록되고 사용됨</li>
  <li>view 반환 : 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고 렌더링 역할을 담당하는 뷰 객체 반환
    <ul>
      <li>JSP의 경우 InternalResourceViewResolver(JstlView) 를 반환하고 내부에 forward() 로직이 있다.</li>
    </ul>
  </li>
  <li>뷰 렌더링 : 뷰를 통해서 뷰를 렌더링 한다.</li>
</ol>

<p>가장 큰 장점은 DispatcherServlet  코드의 변경 없이 원하는 기능을 변경하거나 확장할 수 있다.<br />
대부분 확장 가능하도록 인터페이스로 제공한다.</p>

<p>하지만 사실 우리가 확장할 컨트롤러는 거의 없다.</p>

<hr />

<h2 id="핸들러-매핑과-핸들러-어댑터">핸들러 매핑과 핸들러 어댑터</h2>

<h3 id="과거-controller-인터페이스">과거 Controller 인터페이스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Controller</span> <span class="o">{</span>
    <span class="n">ModelAndView</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@Component</code> :  ““/springmvc/old-controller: 라는 이름의 스프링 빈으로 등록</li>
  <li>빈의 이름으로<strong>URL</strong>을 매핑</li>
</ul>

<h4 id="위-컨트롤러가-호출되는-방식">위 컨트롤러가 호출되는 방식</h4>

<ul>
  <li><strong>HandlerMapping</strong>(핸들러 매핑)
    <ul>
      <li>핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 함
 ex) <strong>스프링 빈의 이름으로 핸들러를 찾을 수 있는 핸들러 매핑</strong> 필요</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>(핸들러 어댑터)
    <ul>
      <li>핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요
 ex) Controller 인터페이스를 실행할 수 있는 핸들러 어댑터를 찾고 실행해야 함</li>
    </ul>
  </li>
  <li>스프링은 이미 필요한 핸들러 매핑과 핸들러 어댑터를 대부분 구현해두었다.</li>
</ul>

<h4 id="스프링-부트가-자동으로-등록하는-핸들러-매핑과-핸들러-어댑터">스프링 부트가 자동으로 등록하는 핸들러 매핑과 핸들러 어댑터</h4>

<ul>
  <li><strong>HandlerMapping</strong>
    <ul>
      <li>RequestMappingHandlerMapping : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>BeanNameUrlHandlerMapping : 스프링 빈의 이름으로 핸들러를 찾는다. 
(위 예제의 @Component)</li>
    </ul>
  </li>
  <li><strong>HandlerAdapter</strong>
    <ul>
      <li>RequestMappingHandlerAdapter : 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용 - 가장 우선순위가 높음</li>
      <li>HttpRequestHandlerAdapter : HttpRequestHandler 처리</li>
      <li>SimpleControllerHandlerAdapter : Controller 인터페이스(애노테이션X, 과거에 사용) 처리</li>
    </ul>
  </li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로핸들러를찾아주는 BeanNameUrlHandlerMapping가 실행에 성공하고 핸들러인 OldController 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다. SimpleControllerHandlerAdapter 가 Controller 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 SimpleControllerHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>SimpleControllerHandlerAdapter 는 핸들러인 OldController 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<h3 id="httprequesthandler"><strong>HttpRequestHandler</strong></h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HttpRequestHandler</span> <span class="o">{</span>
         <span class="kt">void</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><strong>서블릿과 가장 유사한 형태</strong>의 핸들러</li>
</ul>

<h5 id="1-핸들러-매핑으로-핸들러-조회-1"><strong>1.</strong> <strong>핸들러 매핑으로 핸들러 조회</strong></h5>

<p>HandlerMapping 을 순서대로 실행해서, 핸들러를 찾는다.</p>

<p>빈이름으로 핸들러를 찾아야하기 때문에 빈이름으로 핸들러를찾아주는 BeanNameUrlHandlerMapping 가 실행에 성공하고 핸들러인 MyHttpRequestHandler 를 반환한다.</p>

<h5 id="2-핸들러-어댑터-조회-1"><strong>2.</strong> <strong>핸들러 어댑터 조회</strong></h5>

<p>HandlerAdapter 의 supports() 를 순서대로 호출한다.
HttpRequestHandlerAdapter 가 HttpRequestHandler 인터페이스를 지원하므로 대상이 된다.</p>

<h5 id="3-핸들러-어댑터-실행-1"><strong>3.</strong> <strong>핸들러 어댑터 실행</strong></h5>

<p>DispatcherServlet이 조회한 HttpRequestHandlerAdapter 를 실행하면서 핸들러 정보도 함께 넘겨준다.</p>

<p>HttpRequestHandlerAdapter 는 핸들러인 MyHttpRequestHandler 를 내부에서 실행하고, 그 결과를 반환한다.</p>

<hr />

<h2 id="뷰-리졸버">뷰 리졸버</h2>

<h4 id="application-properties">application-properties</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
</code></pre></div></div>

<p>스프링 부트는 <code class="highlighter-rouge">InternalResourceViewResolver</code> 라는 뷰 리졸버를 자동으로 등록한다.<br />
이때 <code class="highlighter-rouge">application.properties</code> 에 등록한 <code class="highlighter-rouge">spring.mvc.view.prefix</code> , <code class="highlighter-rouge">spring.mvc.view.suffix</code> 설정 정보를 사용해서 등록한다.</p>

<h4 id="스프링-부트가-자동으로-등록하는-뷰-리졸버">스프링 부트가 자동으로 등록하는 뷰 리졸버</h4>

<ul>
  <li>BeanNameViewResolver : 빈 이름으로 뷰를 찾아서 반환</li>
  <li>InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환</li>
</ul>

<p><strong>1.</strong> <strong>핸들러 어댑터 호출</strong><br />
핸들러 어댑터를 통해 논리 뷰 이름을 획득</p>

<p><strong>2. ViewResolver 호출</strong></p>

<p>new-form 이라는 뷰 이름으로 viewResolver를 순서대로 호출
InternalResourceViewResolver 가 호출됨</p>

<h5 id="3-internalresourceviewresolver"><strong>3. InternalResourceViewResolver</strong></h5>

<p>내부에서 자원을 찾을 수 있음을 의미한다.<br />
이 뷰 리졸버는 InternalResourceView 를 반환</p>

<h5 id="4-뷰---internalresourceview">4. <strong>뷰</strong> <strong>- InternalResourceView</strong></h5>

<p>InternalResourceView 는 JSP처럼 포워드 forward() 를 호출해서 처리할 수 있는 경우에 사용</p>

<h5 id="5-viewrender">5. view.render()</h5>

<p>view.render() 가 호출되고 InternalResourceView 는 forward() 를 사용해서 JSP를 실행한다</p>

<p>Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver 를 등록해야 한다. <br />
최근에는 라이브러리만 추가하면 스프링 부트가 이런 작업도 모두 자동화해준다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>📋 Spring MVC - 2. 서블릿</title>
	  <link>//spring-mvc-2</link>
	  <author></author>
	  <pubDate>2021-05-03T19:18:00+09:00</pubDate>
	  <guid>//spring-mvc-2</guid>
	  <description><![CDATA[
	     <h2 id="예제">예제</h2>

<p>스프링을 사용하지는 않지만 스프링 부트 프로젝트를 만든다. <br />
서블릿은 톰캣 같은 WAS를 직접 설치하고, 그 위에 서블릿 코드를 클래스 파일로 빌드해서 올린 다음 톰캣 서버를 실행해야 했는데,<br />
스프링 부트는 톰캣 서버를 내장하고 있으니, 이로 진행한다.</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/d9e7d412-01b4-4131-9aed-28fbf9acbe6e/image.png" alt="" /></p>

<p>보통은 Jar를 선택하지만, JSP를 돌리기 위해 War를 선택한다.</p>

<h4 id="helloservlet">HelloServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 서블릿이 호출되면 이 service가 호출된다.</span>
<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"helloServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">resp</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"HelloServlet"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Request : "</span> <span class="o">+</span> <span class="n">req</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Response : "</span> <span class="o">+</span> <span class="n">resp</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="s">"hello"</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HelloServlet
Request : org.apache.catalina.connector.RequestFacade@de1a8e6
Response : org.apache.catalina.connector.ResponseFacade@2b3735f6
amazzi
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">@WebServlet</code> : 서블릿 어노테이션</li>
  <li><code class="highlighter-rouge">@ServletComponentScan</code> : 스프링이 자동으로 서블릿을 찾아 등록해준다.</li>
  <li>HTTP 요청이 오면 서블릿 컨테이너인 WAS가 HTTP 요청, 응답 객체를 서블릿에 던져준다.</li>
  <li><code class="highlighter-rouge">req.getParameter()</code> :  요청에서 해당 Parameter를 가져온다.</li>
  <li><code class="highlighter-rouge">resp.setCharacterEncoding("utf-8");</code> : 헤더에 CharacterEncoding을 지정한다.</li>
  <li><code class="highlighter-rouge">resp.getWriter().write();</code> : <code class="highlighter-rouge">write()</code> 에 바디에 담을 데이터를 넣어준다.</li>
</ul>

<h4 id="-requestfacade">🤔 RequestFacade?</h4>

<p>HttpServletRequest는 인터페이스이다.<br />
여러가지 WAS 서버들이 이 인터페이스의 구현체를 구현하고 있어 다양한 WAS를 사용할 수 있는 것이다.</p>

<h4 id="http-요청-메시지-로그로-확인하기">HTTP 요청 메시지 로그로 확인하기</h4>

<p>application-properties에 다음을 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>logging.level.org.apache.coyote.http11=debug
</code></pre></div></div>

<h4 id="웹-애플리케이션-서버의-요청-응답-구조">웹 애플리케이션 서버의 요청 응답 구조</h4>

<p><img src="https://images.velog.io/images/new_wisdom/post/1d33b3a2-3565-4487-b17d-c7af286c3c30/image.png" style="zoom:80%;" /></p>

<hr />

<h2 id="httpservletrequest">HttpServletRequest</h2>

<p>서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다. <br />
그리고 결과를 HttpServletRequest 객체에 담아서 제공한다.</p>

<ul>
  <li>START LINE
    <ul>
      <li>HTTP 메소드</li>
      <li>URL</li>
      <li>쿼리 스트링</li>
      <li>스키마, 프로토콜</li>
    </ul>
  </li>
  <li>HEADER
    <ul>
      <li>헤더 조회</li>
    </ul>
  </li>
  <li>BODY
    <ul>
      <li>form 파라미터의 형식 조회</li>
      <li>message body 데이터 직접 조회</li>
    </ul>
  </li>
  <li>부가 기능
    <ul>
      <li>임시 저장소 기능
        <ul>
          <li>해당 HTTP 요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능</li>
          <li>저장: request.setAttribute(name, value)</li>
          <li>조회: request.getAttribute(name)</li>
        </ul>
      </li>
      <li>세션 관리 기능
        <ul>
          <li>request.getSession(create: true)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="기본-사용">기본 사용</h4>

<h4 id="start-line">Start Line</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="o">=</span> <span class="n">GET</span>
<span class="n">request</span><span class="o">.</span><span class="na">getProtocal</span><span class="o">()</span> <span class="o">=</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
<span class="n">request</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()</span> <span class="o">=</span> <span class="n">http</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">()</span> <span class="o">=</span> <span class="nl">http:</span><span class="c1">//localhost:8080/request-header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">()</span> <span class="o">=</span> <span class="o">/</span><span class="n">request</span><span class="o">-</span><span class="n">header</span>
<span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">()</span> <span class="o">=</span> <span class="n">username</span><span class="o">=</span><span class="n">hello</span>
<span class="n">request</span><span class="o">.</span><span class="na">isSecure</span><span class="o">()</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre></div></div>

<h4 id="헤더-정보">헤더 정보</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">request</span><span class="o">.</span><span class="na">getHeaderNames</span><span class="o">().</span><span class="na">asIterator</span><span class="o">()</span>
        <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">headerName</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">headerName</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span>
                <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">headerName</span><span class="o">)));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Headers - end ---"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</code></pre></div></div>

<p>이 외에도 Header 정보를 추출하는 메서드들이 있다.</p>

<ul>
  <li>request.getServerName()</li>
  <li>request.getServerPort()</li>
  <li>request.getLocale()</li>
  <li>request.getCookies()</li>
  <li>request.getContentType()</li>
  <li>request.getCharacterEncoding()</li>
</ul>

<hr />

<h2 id="http-요청-데이터---get-쿼리-파라미터">HTTP 요청 데이터 - GET 쿼리 파라미터</h2>

<p>메시지 바디 없이, URL의 <strong>쿼리 파라미터</strong>를 사용해서 데이터를 전달하는 방법. <br />
예) 검색, 필터, 페이징등에서 많이 사용</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/request-param?username=hello&amp;age=20
</code></pre></div></div>

<p>쿼리파라미터는URL에다음과같이 ?를시작으로보낼수있다.추가파라미터는 &amp;로구분하면된다.</p>

<h4 id="requestparamservlet">RequestParamServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 파라미터 전송 기능
 * http://localhost:8080/request-param?username=hello&amp;age=20
 */</span>

<span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestParamServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-param"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParamServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. 전체 파라미터 조회"</span><span class="o">);</span>
        <span class="n">req</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">()</span>
                <span class="o">.</span><span class="na">asIterator</span><span class="o">()</span>
                <span class="o">.</span><span class="na">forEachRemaining</span><span class="o">(</span><span class="n">paramName</span> <span class="o">-&gt;</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">paramName</span> <span class="o">+</span> <span class="s">"="</span> <span class="o">+</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">paramName</span><span class="o">)));</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. 단일 파라미터 조회 (더 많이 쓰는 방식)"</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. 파라미터 이름이 같은 여러개 값이 있을 경우"</span><span class="o">);</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">usernames</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터---post-html-form">HTTP 요청 데이터 - POST HTML Form</h2>

<p>메시지 바디에 데이터가 들어가기 때문에 content-type이 있다. <br />
<code class="highlighter-rouge">content-type : application/x-www-form-urlencoded </code><br />
바디에 쿼리 파리미터 형식으로 데이터를 전달한다. <code class="highlighter-rouge">username=hello&amp;age=20</code></p>

<h4 id="hello-formhtml-일부">hello-form.html 일부</h4>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"/request-param"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    username: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span><span class="nt">/&gt;</span> age: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"age"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>전송<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>이전에 만들었던 <strong>requestParamServlet</strong>에 요청을 보내면,</p>

<p><img src="https://images.velog.io/images/new_wisdom/post/3d6eaa71-b5b2-4166-9aa3-6b3aaf8bf97a/image.png" style="zoom: 50%;" /></p>

<p>다음과 같은 결과를 얻는다! <br />
그런데 <strong>requestParamServlet</strong>는 쿼리 파라미터만 조회하는데 ?</p>

<p>application/x-www-form-urlencoded 형식은 쿼리 파라미터 형식과 같다.<br />
따라서 <strong>쿼리 파라미터 조회 메서드를 그대로 사용</strong>하면 된다.
서버 입장에서는 둘의 형식이 동일하므로, request.getParameter() 로 편리하게 구분없이 조회할 수 있다.</p>

<p>request.getParameter() 는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다.</p>

<h4 id="-postman으로-테스트할-경우">💡 POSTMAN으로 테스트할 경우</h4>

<p>Form 데이터를 입력하기 귀찮은데, 이때 <strong>Content-type</strong>을 <code class="highlighter-rouge">application/x-www-form-urlencoded</code> 로 설정한다.</p>

<hr />

<h2 id="http-요청-데이터---api-메시지-바디">HTTP 요청 데이터 - API 메시지 바디</h2>

<p><strong>HTTP message body</strong>에 데이터를 직접 담아서 요청한다. <br />
HTTP API에서 주로 JSON을 사용한다.</p>

<h3 id="단순-텍스트">단순 텍스트</h3>

<h4 id="requestbodystringservlet---raw한-string">RequestBodyStringServlet - Raw한 String</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyStringServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-string"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyStringServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>HTML form도 이렇게 조회할 수 있지만 번거로우니 쿼리 파라미터 조회를 사용하자!</p>

<h3 id="json">JSON</h3>

<ul>
  <li>content-type: <strong>application/json</strong></li>
</ul>

<h4 id="hellodata">HelloData</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloData</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="requestbodyjsonservlet">RequestBodyJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"requestBodyJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/request-body-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestBodyJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">ServletInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span> <span class="c1">// byte 코드를 얻음</span>
        <span class="n">String</span> <span class="n">messageBody</span> <span class="o">=</span> <span class="n">StreamUtils</span><span class="o">.</span><span class="na">copyToString</span><span class="o">(</span><span class="n">inputStream</span><span class="o">,</span> <span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">);</span> <span class="c1">// 스프링이 제공하는 유틸리티</span>

        <span class="n">HelloData</span> <span class="n">helloData</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">messageBody</span><span class="o">,</span> <span class="n">HelloData</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JSON 결과를 파싱해서 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 한다. <br />
스프링 부트로 Spring MVC를 선택하면 기본으로 Jackson 라이브러리( ObjectMapper)를 제공한다.</p>

<hr />

<h2 id="httpservletresponse---기본-사용법">HTTPServletResponse - 기본 사용법</h2>

<p>개발자가 직접 응답 객체를 만들기는 번거롭지 않게 서블릿이 제공해준다!</p>

<ul>
  <li>HTTP 응답코드 지정</li>
  <li>헤더 생성</li>
  <li>바디 생성 등등…</li>
</ul>

<h4 id="responseheaderservlet">ResponseHeaderServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHeaderServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-header"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseHeaderServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//[status-line] 상태코드 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_OK</span><span class="o">);</span> <span class="c1">//200</span>
        <span class="c1">//[response-headers] 응답 헤더 지정</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"text/plain;charset=utf-8"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Cache-Control"</span><span class="o">,</span> <span class="s">"no-cache, no-store, must-revalidate"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Pragma"</span><span class="o">,</span> <span class="s">"no-cache"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"my-header"</span><span class="o">,</span> <span class="s">"hello"</span><span class="o">);</span>
        <span class="c1">//[Header 편의 메서드] content(response); cookie(response); redirect(response);</span>
        <span class="c1">//[message body] 응답 바디 지정</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ok"</span><span class="o">);</span>

        <span class="c1">//Content-Type: text/plain;charset=utf-8</span>
        <span class="c1">//Content-Length: 2</span>
        <span class="c1">//response.setHeader("Content-Type", "text/plain;charset=utf-8");</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text/plain"</span><span class="o">);</span> 
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span> 
        <span class="c1">//response.setContentLength(2); //(생략시 자동 생성)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="쿠키-설정하기">쿠키 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Set-Cookie: myCookie=good; Max-Age=600; </span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Set-Cookie"</span><span class="o">,</span> <span class="s">"myCookie=good; Max-Age=600"</span><span class="o">);</span> 

<span class="c1">// 또는 </span>
<span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cookie</span><span class="o">(</span><span class="s">"myCookie"</span><span class="o">,</span> <span class="s">"good"</span><span class="o">);</span> 
<span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span> <span class="c1">//600초</span>
<span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="redirect-설정하기">Redirect 설정하기</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Status Code 302</span>
<span class="c1">//Location: /basic/hello-form.html</span>
<span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FOUND</span><span class="o">);</span> <span class="c1">//302</span>
<span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Location"</span><span class="o">,</span> <span class="s">"/basic/hello-form.html"</span><span class="o">);</span>

<span class="c1">// 또는</span>
<span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">"/basic/hello-form.html"</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h2 id="http-요청-데이터">HTTP 요청 데이터</h2>

<h3 id="단순-텍스트-html">단순 텍스트, HTML</h3>

<h4 id="httpservletresponse">HttpServletResponse</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseHtmlServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-html"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletResponse</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">javax</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">// Content-Type: text:html; charset=utf-8</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">"text:html"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">PrintWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;html&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" &lt;div&gt;이건 아니지&lt;/div&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/body&gt;"</span><span class="o">);</span>
        <span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/html&gt;"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>간단하지만, HTML을 일일히 작성해주어야 한다?</p>

<h3 id="api-json">API JSON</h3>

<h4 id="responsejsonservlet">ResponseJsonServlet</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"responseJsonServlet"</span><span class="o">,</span> <span class="n">urlPatterns</span> <span class="o">=</span> <span class="s">"/response-json"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseJsonServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="c1">//Content-Type: application/json</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"content-type"</span><span class="o">,</span> <span class="s">"application/json"</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">"utf-8"</span><span class="o">);</span>
        <span class="n">HelloData</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HelloData</span><span class="o">();</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="s">"mazzi"</span><span class="o">);</span>
        <span class="n">data</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        
        <span class="c1">// JSON으로 변환</span>
        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>(사실 스프링 쓰면 이렇게 길어지지도 않는다.)</p>

<hr />

<p>✍️ 김영님의 <strong>스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술</strong> 강의 노트 ✍️</p>


	  ]]></description>
	</item>

	<item>
	  <title>🌱 @Valid와 @Validated</title>
	  <link>//spring-validation</link>
	  <author></author>
	  <pubDate>2021-04-30T19:18:00+09:00</pubDate>
	  <guid>//spring-validation</guid>
	  <description><![CDATA[
	     <h2 id="valid와-validated">@Valid와 @Validated</h2>

<p>서비스 근로에서 장바구니 미션 API를 만들며 요청으로 들어온 DTO의 값을 검증하는 방법을 고민하다가,  Spring Validation을 사용해보게 되었다.<br />
이번에는 DTO의 필드에 제약을 걸어주고 컨트롤러에서 검증을 해주었는데, 새롭게 배운 내용이니 이를 정리해보려 한다.<br />
사실 올바르게 사용한 것인지는 확신일 없으나, 이런 것도 있구나 다뤄보면서 여러 시행착오를 겪었기에 좀 더 공부하면서 정리해야지 😋</p>

<h4 id="dependency-추가---gradle">Dependency 추가 - gradle</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-validation'
</code></pre></div></div>

<hr />

<h2 id="valid">@Valid</h2>

<p>이번에 우리가 사용한 예시를 보며 하나씩 정리하자.</p>

<h4 id="productcontroller">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validae</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
 		
  	<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>컨트롤러에서 @RequestBody를 통해 DTO에 매핑을 할 때 검증을 진행할 곳에 <code class="highlighter-rouge">@Valid</code> 를 붙여준다.<br />
해당 요청이 들어와 메서드가 실행될 시 유효성 검사를 진행한다.<br />
만약 검증에 실패할 경우 <code class="highlighter-rouge">MethodArgumentNotValidException</code>를 던진다.</p>

<h4 id="productdto">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
     
 		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>DTO에 사용된 어노테이션과 좀 더 찾아본 제약 조건 어노테이션을 정리해보면… ✍️</p>

<ul>
  <li><code class="highlighter-rouge">@NotNull</code> : 모든 데이터 타입에 대해 null을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@NotEmpty</code> : null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</li>
  <li><code class="highlighter-rouge">@NotBlack</code> : null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</li>
  <li><code class="highlighter-rouge">@Min(숫자)</code> / <code class="highlighter-rouge">@Max(숫자)</code> : 최소, 최대 값을 검증한다.</li>
</ul>

<p>또한 제약 조건 어노테이션에 속성들로 예외로 던져줄 <strong>message</strong> 등의 옵션을 설정할 수 있다.</p>

<h3 id="제약-조건-어노테이션">제약 조건 어노테이션</h3>

<table>
  <thead>
    <tr>
      <th>Anotation</th>
      <th>제약 조건</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>@NotNull</td>
      <td>모든 데이터 타입에 대해 null을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@NotEmpty</td>
      <td>null과 ““를 허용하지 않는다. (타입 - String, Collection. Map, Array)</td>
    </tr>
    <tr>
      <td>@NotBlank</td>
      <td>null과 “”, “  “(빈 공백 문자열)을 허용하지 않는다.</td>
    </tr>
    <tr>
      <td>@Null</td>
      <td>Null만 입력 가능</td>
    </tr>
    <tr>
      <td>@Size(min=,max=)</td>
      <td>문자열, 배열등의 크기 검증</td>
    </tr>
    <tr>
      <td>@Pattern(regex=)</td>
      <td>정규식 검증</td>
    </tr>
    <tr>
      <td>@Max(숫자)</td>
      <td>최대값 검증</td>
    </tr>
    <tr>
      <td>@Min(숫자)</td>
      <td>최소값 검증</td>
    </tr>
    <tr>
      <td>@Future</td>
      <td>현재 보다 미래인지 검증</td>
    </tr>
    <tr>
      <td>@Past</td>
      <td>현재 보다 과거인지 검증</td>
    </tr>
    <tr>
      <td>@Positive</td>
      <td>양수만 가능</td>
    </tr>
    <tr>
      <td>@PositiveOrZero</td>
      <td>양수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Negative</td>
      <td>음수만 가능</td>
    </tr>
    <tr>
      <td>@NegativeOrZero</td>
      <td>음수와 0만 가능</td>
    </tr>
    <tr>
      <td>@Email</td>
      <td>이메일 형식만 가능</td>
    </tr>
    <tr>
      <td>@Digits(integer=, fraction = )</td>
      <td>대상 수가 지정된 정수와 소수 자리 수 보다 작은지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMax(value=)</td>
      <td>지정된 실수 이하인지 검증</td>
    </tr>
    <tr>
      <td>@DecimalMin(value=)</td>
      <td>지정된 실수 이상인지 검증</td>
    </tr>
    <tr>
      <td>@AssertFalse</td>
      <td>false 인지 검증</td>
    </tr>
    <tr>
      <td>@AssertTrue</td>
      <td>true 인지 검증</td>
    </tr>
  </tbody>
</table>

<p>그런데 우리는 어떤 요청에서는 id값만 제약조건을 걸고, 어떤 요청에서는 모든 필드에 대한 제약조건을 걸고 싶었다.<br />
당연하게도(?) 제약조건에 대해 그룹핑을 할 수 있는 방법도 있었다!</p>

<hr />

<h2 id="validated">@Validated</h2>

<p><strong>제약조건에 대한 그룹을 만들어 적용</strong>시킬 수 있다.<br />
<strong>특정 Validation 그룹</strong>으로 검증하기 위해서는 Group 인터페이스를 생성하고 이 안에 그룹에 대한 인터페이스를 정의한다.</p>

<h4 id="request">Request</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Request</span> <span class="o">{</span>
    <span class="kd">interface</span> <span class="nc">id</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">interface</span> <span class="nc">allProperties</span> <span class="o">{</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이제 요청마다 <strong>id</strong>, or <strong>모든 필드</strong>에 대한 제약 조건을 검사하고 싶을 때를 나눠 그룹을 정의한다.</p>

<h4 id="productdto-1">ProductDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDto</span> <span class="o">{</span>
    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"금액은 음수일 수 없습니다."</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">price</span><span class="o">;</span>

    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>속성 제약조건 어노테이션의 옵션 <strong>groups</strong>에 그룹을 지정해준다.</p>

<h4 id="productcontroller-1">ProductController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/products"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProductController</span><span class="o">(</span><span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
    <span class="o">}</span>
		
  	<span class="c1">// ...</span>
  
    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">add</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">productId</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">productDto</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/"</span> <span class="o">+</span> <span class="n">productId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="cartitemcontroller">CartItemController</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/carts"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CartItemController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CartItemController</span><span class="o">(</span><span class="kd">final</span> <span class="n">CartService</span> <span class="n">cartService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cartService</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">;</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addCartItem</span><span class="o">(</span><span class="nd">@Validated</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="nd">@RequestBody</span> <span class="kd">final</span> <span class="n">ProductDto</span> <span class="n">productDto</span><span class="o">,</span>
                                            <span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Long</span> <span class="n">newId</span> <span class="o">=</span> <span class="n">cartService</span><span class="o">.</span><span class="na">addCart</span><span class="o">(</span><span class="n">productDto</span><span class="o">.</span><span class="na">getProductId</span><span class="o">(),</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="kd">final</span> <span class="n">URI</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ServletUriComponentsBuilder</span>
                <span class="o">.</span><span class="na">fromCurrentRequest</span><span class="o">()</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/{cartId}"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">buildAndExpand</span><span class="o">(</span><span class="n">newId</span><span class="o">)</span>
                <span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span><span class="n">uri</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
		<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@RequestBody</code> 옆에 <code class="highlighter-rouge">@Validated</code>를 선언하고 괄호를 열어 원하는 그룹을 넣어준다.</p>

<hr />

<h2 id="컬렉션-valid-">컬렉션 @Valid ?</h2>

<h4 id="orderdetaildto">OrderDetailDto</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderDetailDto</span> <span class="o">{</span>

    <span class="nd">@NotNull</span><span class="o">(</span><span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">productId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">cartId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">imageUrl</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">groups</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">allProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">quantity</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderDetailDto</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>우리가 구현하다 문제가 된 부분은 바로 위와 같은 <code class="highlighter-rouge">OrderDetailDto</code> 의 컬렉션인 <code class="highlighter-rouge">List&lt;OrderDetailDto&gt; orderDetailRequestDtos</code>로 들어오는 값을 검증하고 싶었는데,  <br />
컬렉션에 속한 객체는 속성 제약 조건이 검증되지 않고 그냥 통과되어 버리는 것이었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/customers/{customerName}/orders"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderController</span><span class="o">(</span><span class="kd">final</span> <span class="n">OrderService</span> <span class="n">orderService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">addOrder</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">customerName</span><span class="o">,</span>
                                         <span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderDetailDto</span><span class="o">&gt;</span> <span class="n">orderDetailRequestDtos</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">.</span><span class="na">addOrder</span><span class="o">(</span><span class="n">orderDetailRequestDtos</span><span class="o">,</span> <span class="n">customerName</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">created</span><span class="o">(</span>
                <span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"/api/"</span> <span class="o">+</span> <span class="n">customerName</span> <span class="o">+</span> <span class="s">"/orders/"</span> <span class="o">+</span> <span class="n">orderId</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

   <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="왜">왜❓</h4>

<p>이유는<a href="https://stackoverflow.com/questions/17207766/spring-mvc-valid-on-list-of-beans-in-rest-service/35643761#35643761"><code class="highlighter-rouge">@Valid</code>는 JSR-303의 어노테이션이고 JSR-303은 JavaBeans에 적용되는데, List는 JavaBeans가 아니기 때문이라고 한다.</a><br />
우리는 Collection DTO를 감싸는 또다른 DTO 객체를 만들어야하나… 했으나,  클래스 단에 <code class="highlighter-rouge">@Validated</code> 을 붙여 해결할 수 있었다.</p>

<h3 id="예외">예외</h3>

<p>여기서 주의할 점이 있다. 바로 예외에 관한 부분인데,<br />
<strong><code class="highlighter-rouge">@Valid</code> 는 검증에 실패하면 <code class="highlighter-rouge">MethodArgumentNotValidException</code> 를 던지고, <br />
클래스 단에 붙은 <code class="highlighter-rouge">@Validated </code>는 검증에 실패하면 <code class="highlighter-rouge">ConstraintViolationException</code> 를 던진다.</strong></p>

<p>지금으로써는 각 예외를 잡아서 핸들링 해주었다.</p>

<hr />

<p>근로하면서 Spring Validation이라는 것을 처음써봐서 여러 시도들을 해보았고, 덕분에 이런것도 있구나를 깨달을 수 있었다.<br />
특히 컬렉션에 대한 검증에서 왜이러지를 고민하며 이유를 찾아갔었고 덕분에 정말 많이 배웠다.<br />
사실 장바구니 API 구현에서 살짝 Spring Validation을 다룬거라 이에 대해 깊게 깨우치진 않았지만, 굉장히 좋은 학습이었다.<br />
아마 이 글은 미션을 진행하면서 점차 살이 붙을 것 같다.<br />
일단 지금은 이번에 경험한 내용을 정리하는데 의의를 둔다!</p>

<hr />

<h3 id="참고-자료">참고 자료</h3>

<ul>
  <li><a href="https://namocom.tistory.com/m/920">[spring] JSR-303 과 @Valid 과 @Validated</a></li>
  <li><a href="https://meetup.toast.com/posts/223">Validation 어디까지 해봤니?</a></li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
